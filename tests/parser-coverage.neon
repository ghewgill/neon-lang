-- ImportDeclaration
IMPORT module
IMPORT module.name
IMPORT module ALIAS alias
IMPORT module.name ALIAS alias
IMPORT "module" ALIAS m
IMPORT OPTIONAL module

-- TypeDeclaration
TYPE name IS type

-- Type, ParameterisedType
TYPE name IS Array<type>
TYPE name IS Dictionary<type>

-- Type, RecordType
TYPE name IS RECORD END RECORD
TYPE name IS RECORD name: type END RECORD
TYPE name IS RECORD name: type PRIVATE name: type END RECORD

-- Type, ClassType
TYPE name IS CLASS END CLASS
TYPE name IS CLASS name: type END CLASS
TYPE name IS CLASS name: type PRIVATE name: type END CLASS
TYPE name IS CLASS IMPLEMENTS name END CLASS
TYPE name IS CLASS IMPLEMENTS module.name END CLASS
TYPE name IS CLASS IMPLEMENTS name1, name2 END CLASS
TYPE name IS CLASS IMPLEMENTS module.name1, module.name2 END CLASS

-- Type, EnumType
TYPE name IS ENUM END ENUM
TYPE name IS ENUM one END ENUM
TYPE name IS ENUM one two END ENUM

-- Type, PointerType
TYPE name IS POINTER TO type

-- Type, FunctionPointerType
TYPE name IS FUNCTION()

-- Type, TypeQualified
TYPE name IS one.two
TYPE name IS one.two.three

-- ConstantDeclaration
CONSTANT name: type := expr
CONSTANT name := expr

-- NativeConstantDeclaration
DECLARE NATIVE CONSTANT name: type

-- VariableDeclaration
VAR name: type
VAR name, name: type
VAR name: type := expr
VAR name := expr

-- NativeVariableDeclaration
DECLARE NATIVE VAR name: type

-- LetDeclaration
LET name: type := expr
LET name := expr

-- FunctionDeclaration
FUNCTION name() END FUNCTION
FUNCTION name() statement() END FUNCTION
FUNCTION name() statement() statement() END FUNCTION

-- NativeFunctionDeclaration
DECLARE NATIVE FUNCTION name()

-- ExtensionFunctionDeclaration
DECLARE EXTENSION FUNCTION name()

-- FunctionHeader
FUNCTION name() END FUNCTION
FUNCTION type.name() END FUNCTION

-- FunctionParameterList
FUNCTION name() END FUNCTION
FUNCTION name(x: type) END FUNCTION
FUNCTION name(x: type, y: type) END FUNCTION
FUNCTION name(): type END FUNCTION

-- FunctionParameter
FUNCTION name(x: type) END FUNCTION
FUNCTION name(x, y: type) END FUNCTION
FUNCTION name(IN x: type) END FUNCTION
FUNCTION name(OUT x: type) END FUNCTION
FUNCTION name(INOUT x: type) END FUNCTION
FUNCTION name(x: type DEFAULT expr) END FUNCTION
FUNCTION name(x: type...) END FUNCTION

-- ExceptionDeclaration
EXCEPTION name

-- InterfaceDeclaration
INTERFACE name END INTERFACE
INTERFACE name FUNCTION func() END INTERFACE

-- ExportDeclaration
EXPORT name

-- MainBlock
BEGIN MAIN END MAIN
BEGIN MAIN statement() END MAIN
BEGIN MAIN statement() statement() END MAIN

-- AssertStatement
ASSERT expr
ASSERT expr, expr

-- AssignmentStatement
name := expr
_ := expr

-- CaseStatement
CASE expr END CASE
CASE expr WHEN cond DO END CASE
CASE expr WHEN cond DO statement() END CASE
CASE expr WHEN cond DO statement() statement() END CASE
CASE expr WHEN cond DO statement() WHEN OTHERS DO END CASE
CASE expr WHEN cond DO statement() WHEN OTHERS DO statement() END CASE
CASE expr WHEN cond DO statement() WHEN OTHERS DO statement() statement() END CASE
CASE expr WHEN cond, cond DO END CASE

-- CheckStatement
CHECK expr ELSE END CHECK
CHECK expr ELSE statement() END CHECK
CHECK expr ELSE statement() statement() END CHECK
CHECK VALID name ELSE END CHECK
CHECK VALID expr AS name ELSE END CHECK
CHECK VALID expr AS name, expr AS name ELSE END CHECK

-- WhenCondition
CASE expr WHEN = expr DO END CASE
CASE expr WHEN <> expr DO END CASE
CASE expr WHEN < expr DO END CASE
CASE expr WHEN > expr DO END CASE
CASE expr WHEN <= expr DO END CASE
CASE expr WHEN >= expr DO END CASE
CASE expr WHEN expr DO END CASE
CASE expr WHEN expr TO expr DO END CASE

-- ExitStatement
EXIT FUNCTION
EXIT WHILE
EXIT FOR
EXIT FOREACH
EXIT LOOP
EXIT REPEAT
EXIT label

-- ExpressionStatement
statement()

-- ForStatement
FOR name := expr TO expr DO END FOR
FOR name := expr TO expr DO statement() END FOR
FOR name := expr TO expr DO statement() statement() END FOR
FOR name := expr TO expr STEP expr DO END FOR
FOR name := expr TO expr LABEL label DO END FOR

-- ForeachStatement
FOREACH name IN expr DO END FOREACH
FOREACH name IN expr DO statement() END FOREACH
FOREACH name IN expr DO statement() statement() END FOREACH
FOREACH name IN expr INDEX name DO END FOREACH
FOREACH name IN expr LABEL label DO END FOREACH

-- IfStatement
IF expr THEN END IF
IF expr THEN statement() END IF
IF expr THEN statement() statement() END IF
IF expr THEN statement() ELSIF expr THEN statement() END IF
IF expr THEN statement() ELSIF expr THEN statement() ELSE END IF
IF expr THEN statement() ELSIF expr THEN statement() ELSE statement() END IF
IF expr THEN statement() ELSIF expr THEN statement() ELSE statement() statement() END IF
IF VALID name THEN END IF
IF VALID expr AS name THEN END IF
IF VALID expr AS name, expr AS name THEN END IF
IF IMPORTED mod THEN END IF

-- IncrementStatement
INC expr
DEC expr

-- LoopStatement
LOOP END LOOP
LOOP statement() END LOOP
LOOP statement() statement() END LOOP
LOOP LABEL label statement() END LOOP

-- NextStatement
NEXT WHILE
NEXT FOR
NEXT FOREACH
NEXT LOOP
NEXT REPEAT
NEXT label

-- RaiseStatement
RAISE name
RAISE name.name
RAISE name(expr)

-- RepeatStatement
REPEAT UNTIL expr
REPEAT statement() UNTIL expr
REPEAT statement() statement() UNTIL expr
REPEAT LABEL label statement() UNTIL expr

-- ReturnStatement
RETURN expr

-- TestCaseStatement
TESTCASE expr
TESTCASE expr EXPECT name
TESTCASE expr EXPECT name.name

-- TryStatement
TRY END TRY
TRY statement() END TRY
TRY statement() statement() END TRY
TRY TRAP name DO END TRY
TRY TRAP name.name DO END TRY
TRY TRAP name DO statement() END TRY
TRY TRAP name DO statement() statement() END TRY
TRY TRAP name AS x DO END TRY

-- UnusedStatement
UNUSED x
UNUSED x, y

-- WhileStatement
WHILE expr DO END WHILE
WHILE expr DO statement() END WHILE
WHILE expr DO statement() statement() END WHILE
WHILE expr LABEL label DO statement() END WHILE
WHILE VALID name DO END WHILE
WHILE VALID expr AS name DO END WHILE
WHILE VALID expr AS name, expr AS name DO END WHILE

-- ConditionalExpression
name := (IF expr THEN expr ELSE expr)

-- TryExpression
name := (TRY expr)
name := (TRY expr TRAP name DO)
name := (TRY expr TRAP name DO statement())
name := (TRY expr TRAP name DO statement() statement())
name := (TRY expr TRAP name GIVES expr)
name := (TRY expr TRAP name GIVES expr TRAP name GIVES expr)
name := (TRY expr TRAP name AS x DO statement())
name := (TRY expr TRAP name AS x GIVES expr)

-- DisjunctionExpression
name := expr OR expr

-- ConjunctionExpression
name := expr AND expr

-- MembershipExpression
name := expr IN expr
name := expr NOT IN expr

-- ComparisonExpression
name := expr = expr
name := expr <> expr
name := expr < expr
name := expr > expr
name := expr <= expr
name := expr >= expr

-- ChainedComparisonExpression
name := a < b < c

-- AdditionExpression
name := expr + expr
name := expr - expr
name := expr & expr

-- MultiplicationExpression
name := expr * expr
name := expr / expr
name := expr INTDIV expr
name := expr MOD expr

-- ExponentiationExpression
name := expr ^ expr

-- InterpolatedStringExpression
name := "a\(b)c"

-- CompoundExpression
name := a[b]
name := a(b)
name := a.b
name := a->b
name := "foo"[b]
name := "foo".b()

-- Atom
name := (expr)
name := []
name := [1 TO 10]
name := {}
name := FALSE
name := TRUE
name := 10
name := "abc"
name := EMBED "file"
name := HEXBYTES "01 02"
name := +expr
name := -expr
name := NOT expr
name := NEW type
name := NEW module.type
name := NEW type(param WITH arg)
name := NEW module.type(param WITH arg)
name := NIL
name := NOWHERE

-- ArrayLiteral
name := []
name := [expr]
name := [expr, expr]
name := [expr, expr,]

-- ArrayRangeLiteral
name := [expr TO expr]
name := [expr TO expr STEP expr]

-- DictionaryLiteral
name := {}
name := {"key": expr}
name := {"key": expr, "key": expr}
name := {"key": expr, "key": expr,}
name := {"key": expr, key: expr}

-- CompoundExpression
name := name[expr]
name := name[expr, expr]
name := name()
name := name(expr)
name := name(expr, expr)
name := name.name
name := name->name

-- FunctionArgument
name(expr)
name(IN expr)
name(OUT expr)
name(INOUT expr)
name(_)
name(name WITH expr)
name(name WITH _)

-- ArrayIndexExpression
name := name[expr]
name := name[expr TO expr]
