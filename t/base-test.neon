IMPORT base

FUNCTION from(b: Number, s: String): Number
    LET r: base.NumberResult := base.from(b, s)
    CHECK r ISA base.NumberResult.value ELSE
        RAISE TestFailedException
    END CHECK
    RETURN r.value
END FUNCTION

-- check zero functionality
TESTCASE from(2, "0") = 0
TESTCASE base.to(2, 0) = "0"

-- conversion from all valid bases
TESTCASE from(2, "101010") = 42
TESTCASE from(3, "1120") = 42
TESTCASE from(4, "222") = 42
TESTCASE from(5, "132") = 42
TESTCASE from(6, "110") = 42
TESTCASE from(7, "60") = 42
TESTCASE from(8, "52") = 42
TESTCASE from(9, "46") = 42
TESTCASE from(10, "42") = 42
TESTCASE from(11, "39") = 42
TESTCASE from(12, "36") = 42
TESTCASE from(13, "33") = 42
TESTCASE from(14, "30") = 42
TESTCASE from(15, "2c") = 42
TESTCASE from(16, "2a") = 42
TESTCASE from(17, "28") = 42
TESTCASE from(18, "26") = 42
TESTCASE from(19, "24") = 42
TESTCASE from(20, "22") = 42
TESTCASE from(21, "20") = 42
TESTCASE from(22, "1k") = 42
TESTCASE from(23, "1j") = 42
TESTCASE from(24, "1i") = 42
TESTCASE from(25, "1h") = 42
TESTCASE from(26, "1g") = 42
TESTCASE from(27, "1f") = 42
TESTCASE from(28, "1e") = 42
TESTCASE from(29, "1d") = 42
TESTCASE from(30, "1c") = 42
TESTCASE from(31, "1b") = 42
TESTCASE from(32, "1a") = 42
TESTCASE from(33, "19") = 42
TESTCASE from(34, "18") = 42
TESTCASE from(35, "17") = 42
TESTCASE from(36, "16") = 42

-- check that both upper and lower case is accepted
TESTCASE from(16, "beef") = 48879
TESTCASE from(16, "BEEF") = 48879

LET r1: base.NumberResult := base.fromBinary("101010") IF r1 ISA base.NumberResult.value THEN TESTCASE r1.value = 42 ELSE RAISE TestFailedException END IF
LET r2: base.NumberResult := base.fromOctal("52")      IF r2 ISA base.NumberResult.value THEN TESTCASE r2.value = 42 ELSE RAISE TestFailedException END IF
LET r3: base.NumberResult := base.fromHex("2a")        IF r3 ISA base.NumberResult.value THEN TESTCASE r3.value = 42 ELSE RAISE TestFailedException END IF

-- conversion to all valid bases
TESTCASE base.to(2, 42) = "101010"
TESTCASE base.to(3, 42) = "1120"
TESTCASE base.to(4, 42) = "222"
TESTCASE base.to(5, 42) = "132"
TESTCASE base.to(6, 42) = "110"
TESTCASE base.to(7, 42) = "60"
TESTCASE base.to(8, 42) = "52"
TESTCASE base.to(9, 42) = "46"
TESTCASE base.to(10, 42) = "42"
TESTCASE base.to(11, 42) = "39"
TESTCASE base.to(12, 42) = "36"
TESTCASE base.to(13, 42) = "33"
TESTCASE base.to(14, 42) = "30"
TESTCASE base.to(15, 42) = "2c"
TESTCASE base.to(16, 42) = "2a"
TESTCASE base.to(17, 42) = "28"
TESTCASE base.to(18, 42) = "26"
TESTCASE base.to(19, 42) = "24"
TESTCASE base.to(20, 42) = "22"
TESTCASE base.to(21, 42) = "20"
TESTCASE base.to(22, 42) = "1k"
TESTCASE base.to(23, 42) = "1j"
TESTCASE base.to(24, 42) = "1i"
TESTCASE base.to(25, 42) = "1h"
TESTCASE base.to(26, 42) = "1g"
TESTCASE base.to(27, 42) = "1f"
TESTCASE base.to(28, 42) = "1e"
TESTCASE base.to(29, 42) = "1d"
TESTCASE base.to(30, 42) = "1c"
TESTCASE base.to(31, 42) = "1b"
TESTCASE base.to(32, 42) = "1a"
TESTCASE base.to(33, 42) = "19"
TESTCASE base.to(34, 42) = "18"
TESTCASE base.to(35, 42) = "17"
TESTCASE base.to(36, 42) = "16"

TESTCASE base.toBinary(42) = "101010"
TESTCASE base.toOctal(42) = "52"
TESTCASE base.toHex(42) = "2a"

-- check exceptional conditions
TESTCASE base.from(1.5, "0") EXPECT ValueRangeException
TESTCASE base.from(-5, "0") EXPECT ValueRangeException
TESTCASE base.to(1.5, 0) EXPECT ValueRangeException
TESTCASE base.to(-5, 0) EXPECT ValueRangeException
TESTCASE base.to(2, -1) EXPECT ValueRangeException
