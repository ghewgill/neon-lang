IMPORT file

FUNCTION bstr(z: Boolean): String
    RETURN (IF z THEN "TRUE" ELSE "FALSE")
END FUNCTION

TESTCASE file.Separator IN ["/", "\\"]

LET lr: file.LinesResult := file.readLines("LICENSE.txt")
CHECK lr ISA file.LinesResult.lines ELSE
    RAISE TestFailedException
END CHECK
LET lines: Array<String> := lr.lines
print(str(lines.size()))
--= 21
print(lines[0])
--= The MIT License (MIT)

LET br: file.BytesResult := file.readBytes("LICENSE.txt")
CHECK br ISA file.BytesResult.data ELSE
    RAISE TestFailedException
END CHECK
LET buf: Bytes := br.data
print(bstr(buf.size() = 1076 OR buf.size() = 1097)) -- account for lf vs crlf
--= TRUE
VAR arr: Array<Number> := buf.toArray()
print("\(arr[0])")
--= 84

print(bstr(file.isDirectory("t")))
--= TRUE

LET a: Array<String> := file.files("t")
print(bstr("file-test.neon" IN a))
--= TRUE

LET fir: file.FileInfoResult := file.getInfo("t/file-test.neon")
CHECK fir ISA file.FileInfoResult.info ELSE
    RAISE TestFailedException
END CHECK
LET fi: file.FileInfo := fir.info
print(fi.name)
--= file-test.neon
TESTCASE 1000 <= fi.size <= 10000
print(bstr(fi.readable))
--= TRUE
print(fi.type.toString())
--= normal
TESTCASE fi.lastModificationTime > 0

TESTCASE file.writeLines("tmp/file-test.tmp", ["hello", "world"]) ISA file.FileResult.ok
print(bstr(file.exists("tmp/file-test.tmp")))
--= TRUE
CHECK file.delete("tmp/file-test.tmp") ISA file.FileResult.ok ELSE
    RAISE TestFailedException
END CHECK
print(bstr(file.exists("tmp/file-test.tmp")))
--= FALSE
CHECK file.delete("tmp/file-test.tmp") ISA file.FileResult.ok ELSE -- No exception expected.
    RAISE TestFailedException
END CHECK

TESTCASE file.writeLines("tmp/file-test.tmp", ["hello", "world"]) ISA file.FileResult.ok
CHECK file.delete("tmp/file-test2.tmp") ISA file.FileResult.ok ELSE
    RAISE TestFailedException
END CHECK
CHECK file.rename("tmp/file-test.tmp", "tmp/file-test2.tmp") ISA file.FileResult.ok ELSE
    RAISE TestFailedException
END CHECK
print(bstr(file.exists("tmp/file-test.tmp")))
--= FALSE
print(bstr(file.exists("tmp/file-test2.tmp")))
--= TRUE

CHECK file.copyOverwriteIfExists("tmp/file-test2.tmp", "tmp/file-test3.tmp") ISA file.FileResult.ok ELSE
    RAISE TestFailedException
END CHECK
print(bstr(file.exists("tmp/file-test2.tmp")))
--= TRUE
print(bstr(file.exists("tmp/file-test3.tmp")))
--= TRUE

CHECK file.mkdir("tmp/foo") ISA file.FileResult.ok ELSE
    RAISE TestFailedException
END CHECK
print(bstr(file.isDirectory("tmp/foo")))
--= TRUE
TESTCASE file.writeLines("tmp/foo/bar.txt", ["hello", "world"]) ISA file.FileResult.ok
TESTCASE file.removeEmptyDirectory("tmp/foo") ISA file.FileResult.error
CHECK file.delete("tmp/foo/bar.txt") ISA file.FileResult.ok ELSE
    RAISE TestFailedException
END CHECK
TESTCASE file.removeEmptyDirectory("tmp/foo") ISA file.FileResult.ok
print(bstr(file.isDirectory("tmp/foo")))
--= FALSE

CHECK file.mkdir("tmp/foo") ISA file.FileResult.ok ELSE
    RAISE TestFailedException
END CHECK
print(bstr(file.isDirectory("tmp/foo")))
--= TRUE
TESTCASE file.writeLines("tmp/foo/bar.txt", ["hello", "world"]) ISA file.FileResult.ok
CHECK file.removeDirectoryTree("tmp/foo") ISA file.FileResult.ok ELSE
    RAISE TestFailedException
END CHECK
print(bstr(file.isDirectory("tmp/foo")))
--= FALSE

print(file.pathJoin("a", "b"))
--? a[/\\]b
print(file.pathJoin("a", "/b"))
--= /b
print(file.pathJoin("a", "b", "c"))
--? a[/\\]b[/\\]c
print(file.pathJoin("a/", "", "c"))
--= a/c

VAR directory, name: String
file.pathSplit("a", OUT directory, OUT name)
print("\(directory) \(name)")
--=  a
file.pathSplit("a/b", OUT directory, OUT name)
print("\(directory) \(name)")
--= a b

LET r: file.BytesResult := file.readBytes("nonexistent.file")
CHECK r ISA file.BytesResult.error ELSE
    RAISE TestFailedException
END CHECK
TESTCASE r.error.type = file.Error.notFound
TESTCASE r.error.message <> ""
TESTCASE r.error.path = "nonexistent.file"
