%IMPORT io
IMPORT json
IMPORT os
IMPORT simplehttp
IMPORT time

CONSTANT Port: Number := 20179

FUNCTION get(url: String): Object
    %io.write(io.stderr(), "get \(url)\n")
    LET data: String := simplehttp.get("http://127.0.0.1:\(Port)\(url)", {}, OUT responseHeaders WITH _).decodeToString()
    %io.write(io.stderr(), "\(data)\n")
    RETURN json.decode(data)
END FUNCTION

FUNCTION post(url: String, post_data: String): Object
    %io.write(io.stderr(), "post \(url)\n")
    LET data: String := simplehttp.post("http://127.0.0.1:\(Port)\(url)", post_data, {}, OUT responseHeaders WITH _).decodeToString()
    RETURN json.decode(data)
END FUNCTION

VAR p: os.Process := os.spawn("bin/neon -d \(Port) t/debug-example.neon")
time.sleep(1)
VAR r: Object

r := get("/module/-/bytecode")
VAR a: Array<Object> := r
ASSERT a.size() > 0

LET debuginfo: Object := get("/module/-/debuginfo")

r := get("/module/-/source")
ASSERT r[1] = "IMPORT debugger"

r := get("/status")
ASSERT r.state = "stopped"
ASSERT r.module = "t/debug-example.neon"
ASSERT r.ip = 0

a := get("/opstack")
ASSERT a.size() = 0

r := post("/step/instruction", "")

a := get("/opstack")
ASSERT a.size() = 1
ASSERT a[0].type = "string"
ASSERT a[0].value = "hello world"

r := post("/step/source/0", "")

r := get("/status")
ASSERT r.ip = 5 % Dependent on actual bytecode

r := get("/module/-/global/0")
ASSERT r.type = "string"
ASSERT r.value = "hello world"

r := post("/step/source/0", "")
%= hello world
r := get("/status")

VAR entry_g: Number := 0
a := debuginfo.functions
FOREACH f IN a DO
    IF f.name = "g" THEN
        entry_g := f.entry
        EXIT FOREACH
    END IF
END FOREACH
ASSERT entry_g <> 0

r := post("/break/\(entry_g)", "true")

a := get("/break")
ASSERT a.size() = 1
ASSERT a[0] = entry_g

r := post("/continue", "")

r := get("/status")
ASSERT r.ip = entry_g

r := post("/continue", "")
%= 5

r := get("/status")
ASSERT r.log_messages = 1

a := post("/log", "")
ASSERT a.size() = 1
ASSERT a[0] = "hello debugger"

a := post("/log", "")
ASSERT a.size() = 0

r := post("/continue", "")

LET rc: Number := os.wait(INOUT p)
