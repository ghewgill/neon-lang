IMPORT http
%IMPORT io
IMPORT json
IMPORT os
IMPORT time
IMPORT variant

CONSTANT Port: Number := 20179

FUNCTION get(url: String): variant.Variant
    %io.write(io.stderr(), "get \(url)\n")
    LET data: String := http.get("http://127.0.0.1:\(Port)\(url)", OUT headers WITH _).decodeToString()
    %io.write(io.stderr(), "\(data)\n")
    RETURN json.decode(data)
END FUNCTION

FUNCTION post(url: String, post_data: String): variant.Variant
    %io.write(io.stderr(), "post \(url)\n")
    LET data: String := http.post("http://127.0.0.1:\(Port)\(url)", post_data, OUT headers WITH _).decodeToString()
    RETURN json.decode(data)
END FUNCTION

VAR p: os.Process := os.spawn("bin/neon -d \(Port) t/debug-example.neon")
time.sleep(1)
VAR r: variant.Variant

r := get("/module/-/bytecode")
ASSERT r.getArray().size() > 0

LET debuginfo: variant.Variant := get("/module/-/debuginfo")

r := get("/module/-/source")
ASSERT r.getArray()[1].getString() = "IMPORT debugger"

r := get("/status")
ASSERT r.getDictionary()["state"].getString() = "stopped"
ASSERT r.getDictionary()["module"].getString() = "t/debug-example.neon"
ASSERT r.getDictionary()["ip"].getNumber() = 0

r := get("/opstack")
ASSERT r.getArray().size() = 0

r := post("/step/instruction", "")

r := get("/opstack")
ASSERT r.getArray().size() = 1
ASSERT r.getArray()[0].getDictionary()["type"].getString() = "string"
ASSERT r.getArray()[0].getDictionary()["value"].getString() = "hello world"

r := post("/step/source/0", "")

r := get("/status")
ASSERT r.getDictionary()["ip"].getNumber() = 11 % Dependent on actual bytecode

r := get("/module/-/global/0")
ASSERT r.getDictionary()["type"].getString() = "string"
ASSERT r.getDictionary()["value"].getString() = "hello world"

r := post("/step/source/0", "")
%= hello world
r := get("/status")

VAR entry_g: Number := 0
FOREACH f IN debuginfo.getDictionary()["functions"].getArray() DO
    IF f.getDictionary()["name"].getString() = "g" THEN
        entry_g := f.getDictionary()["entry"].getNumber()
        EXIT FOREACH
    END IF
END FOREACH
ASSERT entry_g <> 0

r := post("/break/\(entry_g)", "true")

r := get("/break")
ASSERT r.getArray().size() = 1
ASSERT r.getArray()[0].getNumber() = entry_g

r := post("/continue", "")

r := get("/status")
ASSERT r.getDictionary()["ip"].getNumber() = entry_g

r := post("/continue", "")
%= 5

r := get("/status")
ASSERT r.getDictionary()["log_messages"].getNumber() = 1

r := post("/log", "")
ASSERT r.getArray().size() = 1
ASSERT r.getArray()[0].getString() = "hello debugger"

r := post("/log", "")
ASSERT r.getArray().size() = 0

r := post("/continue", "")

LET rc: Number := os.wait(INOUT p)
