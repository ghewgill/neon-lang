FUNCTION num(s: String): Number
    LET pr: ParseNumberResult := parseNumber(s)
    CHECK pr ISA ParseNumberResult.number ELSE
        PANIC "unexpected error"
    END CHECK
    RETURN pr.number
END FUNCTION

FUNCTION err(s: String): String
    LET pr: ParseNumberResult := parseNumber(s)
    CHECK pr ISA ParseNumberResult.error ELSE
        PANIC "error expected"
    END CHECK
    RETURN pr.error
END FUNCTION

print(str(num("45")))
--= 45

-- Check for behaviour of various strings that are not numbers.
TESTCASE err("") = "parseNumber() argument not a number"
TESTCASE err("-") = "parseNumber() argument not a number"
TESTCASE err(".") = "parseNumber() argument not a number"
-- The following test should be included in the test cases,
-- but many of the executors currently accept "1." as a valid
-- number because they are using their native library string
-- to number implementations. Excluding this one for now.
--TESTCASE err("1.") = "parseNumber() argument not a number"
TESTCASE err("12e") = "parseNumber() argument not a number"
TESTCASE err("12e-") = "parseNumber() argument not a number"
TESTCASE err("12e1.2") = "parseNumber() argument not a number"
TESTCASE err("12e1-") = "parseNumber() argument not a number"
-- Valid numbers.
TESTCASE num("-123") = -123
TESTCASE num("-123.45") = -123.45
TESTCASE num("-0") = 0
TESTCASE num("-0.0") = 0
TESTCASE num("0.0") = 0
TESTCASE num("+0.0") = 0
TESTCASE num("+0") = 0
TESTCASE num("123") = 123
TESTCASE num("123.45") = 123.45
TESTCASE num("00123") = 123
TESTCASE num("123.00") = 123

print("hello")
--= hello

print(str(5))
--= 5
