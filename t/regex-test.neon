-- Automatically generated by make_regex_test.py
-- Source from data/regex-testoutput1
IMPORT regex

FUNCTION test0()
    LET pr := regex.prepare("the quick brown fox")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "the quick brown fox")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "the quick brown fox"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "What do you know about the quick brown fox?")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "the quick brown fox"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "The quick brown FOX")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "What do you know about THE QUICK BROWN FOX?")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test1()
    LET pr := regex.prepare("The quick brown fox", ignoreCase WITH TRUE)
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "the quick brown fox")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "the quick brown fox"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "The quick brown FOX")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "The quick brown FOX"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "What do you know about the quick brown fox?")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "the quick brown fox"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "What do you know about THE QUICK BROWN FOX?")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "THE QUICK BROWN FOX"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test3()
    LET pr := regex.prepare("a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abxyzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abxyzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aabxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aabxyzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaabxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaabxyzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaabxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaabxyzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abcxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abcxyzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aabcxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aabcxyzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaabcxyzpqrrrabbxyyyypAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaabcxyzpqrrrabbxyyyypAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaabcxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaabcxyzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaabcxyzpqrrrabbxyyyypqqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaabcxyzpqrrrabbxyyyypqqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaabcxyzpqrrrabbxyyyypqqqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaabcxyzpqrrrabbxyyyypqqqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaabcxyzpqrrrabbxyyyypqqqqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaabcxyzpqrrrabbxyyyypqqqqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaabcxyzpqrrrabbxyyyypqqqqqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaabcxyzpqrrrabbxyyyypqqqqqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaabcxyzpqrrrabbxyyyypqqqqqqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaabcxyzpqrrrabbxyyyypqqqqqqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaabcxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaabcxyzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abxyzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abxyzzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aabxyzzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aabxyzzzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaabxyzzzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaabxyzzzzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaabxyzzzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaabxyzzzzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abcxyzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abcxyzzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aabcxyzzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aabcxyzzzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaabcxyzzzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaabcxyzzzzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaabcxyzzzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaabcxyzzzzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaabcxyzzzzpqrrrabbbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaabcxyzzzzpqrrrabbbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaabcxyzzzzpqrrrabbbxyyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaabcxyzzzzpqrrrabbbxyyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaabcxyzpqrrrabbxyyyypABzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaabcxyzpqrrrabbxyyyypABzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaabcxyzpqrrrabbxyyyypABBzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaabcxyzpqrrrabbxyyyypABBzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, ">>>aaabxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaabxyzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, ">aaaabxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaabxyzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, ">>>>abcxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abcxyzpqrrrabbxyyyypqAzz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abxyzpqrrabbxyyyypqAzz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "abxyzpqrrrrabbxyyyypqAzz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "abxyzpqrrrabxyyyypqAzz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "aaaabcxyzzzzpqrrrabbbxyyyyyypqAzz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "aaaabcxyzzzzpqrrrabbbxyyypqAzz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "aaabcxyzpqrrrabbxyyyypqqqqqqqAzz")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test4()
    LET pr := regex.prepare("^(abc){1,2}zz")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abczz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abczz"
        TESTCASE r.match[1].string = "abc"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abcabczz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abcabczz"
        TESTCASE r.match[1].string = "abc"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "zz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "abcabcabczz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, ">>abczz")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test5()
    LET pr := regex.prepare("^(b+?|a){1,2}?c")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "bc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bc"
        TESTCASE r.match[1].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bbc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bbc"
        TESTCASE r.match[1].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bbbc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bbbc"
        TESTCASE r.match[1].string = "bb"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bac")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bac"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bbac")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bbac"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aac")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aac"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abbbbbbbbbbbc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abbbbbbbbbbbc"
        TESTCASE r.match[1].string = "bbbbbbbbbbb"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bbbbbbbbbbbac")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bbbbbbbbbbbac"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaac")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "abbbbbbbbbbbac")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test6()
    LET pr := regex.prepare("^(b+|a){1,2}c")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "bc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bc"
        TESTCASE r.match[1].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bbc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bbc"
        TESTCASE r.match[1].string = "bb"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bbbc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bbbc"
        TESTCASE r.match[1].string = "bbb"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bac")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bac"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bbac")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bbac"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aac")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aac"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abbbbbbbbbbbc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abbbbbbbbbbbc"
        TESTCASE r.match[1].string = "bbbbbbbbbbb"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bbbbbbbbbbbac")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bbbbbbbbbbbac"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaac")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "abbbbbbbbbbbac")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test7()
    LET pr := regex.prepare("^(ba|b*){1,2}?bc")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "babc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "babc"
        TESTCASE r.match[1].string = "ba"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bbabc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bbabc"
        TESTCASE r.match[1].string = "ba"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bababc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bababc"
        TESTCASE r.match[1].string = "ba"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bababbc")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "babababc")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test9()
    LET pr := regex.prepare(@"^[ab\]cde]")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "athing")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bthing")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "]thing")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "]"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "cthing")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "c"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "dthing")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "d"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "ething")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "e"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "fthing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "[thing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, @"\	hing")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test10()
    LET pr := regex.prepare("^[]cde]")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "]thing")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "]"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "cthing")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "c"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "dthing")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "d"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "ething")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "e"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "athing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "fthing")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test11()
    LET pr := regex.prepare(@"^[^ab\]cde]")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "fthing")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "f"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "[thing")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "["
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, @"\	hing")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @"\"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "athing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "bthing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "]thing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "cthing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "dthing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "ething")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test12()
    LET pr := regex.prepare("^[^]cde]")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "athing")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "fthing")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "f"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "]thing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "cthing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "dthing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "ething")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test15()
    LET pr := regex.prepare("^[0-9]+$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "0")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "0"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "1")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "1"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "2")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "2"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "3")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "3"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "4")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "4"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "5")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "5"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "6")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "6"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "7")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "7"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "8")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "8"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "9")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "9"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "10")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "10"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "100")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "100"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abc")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test16()
    LET pr := regex.prepare("^.*nter")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "enter")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "enter"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "inter")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "inter"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "uponter")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "uponter"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test17()
    LET pr := regex.prepare("^xxx[0-9]+$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "xxx0")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "xxx0"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "xxx1234")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "xxx1234"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "xxx")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test18()
    LET pr := regex.prepare("^.+[0-9][0-9][0-9]$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "x123")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "x123"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "x1234")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "x1234"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "xx123")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "xx123"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "123456")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "123456"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "123")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test19()
    LET pr := regex.prepare("^.+?[0-9][0-9][0-9]$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "x123")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "x123"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "x1234")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "x1234"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "xx123")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "xx123"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "123456")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "123456"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "123")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test20()
    LET pr := regex.prepare(@"^([^!]+)!(.+)=apquxz\.ixr\.zzz\.ac\.uk$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abc!pqr=apquxz.ixr.zzz.ac.uk")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abc!pqr=apquxz.ixr.zzz.ac.uk"
        TESTCASE r.match[1].string = "abc"
        TESTCASE r.match[2].string = "pqr"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "!pqr=apquxz.ixr.zzz.ac.uk")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "abc!=apquxz.ixr.zzz.ac.uk")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "abc!pqr=apquxz:ixr.zzz.ac.uk")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "abc!pqr=apquxz.ixr.zzz.ac.ukk")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test21()
    LET pr := regex.prepare(":")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "Well, we need a colon: somewhere")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ":"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "Fail without a colon")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test22()
    LET pr := regex.prepare(@"([\da-f:]+)$", ignoreCase WITH TRUE)
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "0abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "0abc"
        TESTCASE r.match[1].string = "0abc"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abc"
        TESTCASE r.match[1].string = "abc"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "fed")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "fed"
        TESTCASE r.match[1].string = "fed"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "E")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "E"
        TESTCASE r.match[1].string = "E"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "::")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "::"
        TESTCASE r.match[1].string = "::"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "5f03:12C0::932e")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "5f03:12C0::932e"
        TESTCASE r.match[1].string = "5f03:12C0::932e"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "fed def")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "def"
        TESTCASE r.match[1].string = "def"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "Any old stuff")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "ff"
        TESTCASE r.match[1].string = "ff"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "0zzz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "gzzz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "fed ")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "Any old rubbish")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test23()
    LET pr := regex.prepare(@"^.*\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, ".1.2.3")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ".1.2.3"
        TESTCASE r.match[1].string = "1"
        TESTCASE r.match[2].string = "2"
        TESTCASE r.match[3].string = "3"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "A.12.123.0")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "A.12.123.0"
        TESTCASE r.match[1].string = "12"
        TESTCASE r.match[2].string = "123"
        TESTCASE r.match[3].string = "0"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, ".1.2.3333")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "1.2.3")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "1234.2.3")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test24()
    LET pr := regex.prepare(@"^(\d+)\s+IN\s+SOA\s+(\S+)\s+(\S+)\s*\(\s*$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "1 IN SOA non-sp1 non-sp2(")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "1 IN SOA non-sp1 non-sp2("
        TESTCASE r.match[1].string = "1"
        TESTCASE r.match[2].string = "non-sp1"
        TESTCASE r.match[3].string = "non-sp2"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "1    IN    SOA    non-sp1    non-sp2   (")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "1    IN    SOA    non-sp1    non-sp2   ("
        TESTCASE r.match[1].string = "1"
        TESTCASE r.match[2].string = "non-sp1"
        TESTCASE r.match[3].string = "non-sp2"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "1IN SOA non-sp1 non-sp2(")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test25()
    LET pr := regex.prepare(@"^[a-zA-Z\d][a-zA-Z\d\-]*(\.[a-zA-Z\d][a-zA-z\d\-]*)*\.$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "a.")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a."
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "Z.")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "Z."
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "2.")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "2."
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "ab-c.pq-r.")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "ab-c.pq-r."
        TESTCASE r.match[1].string = ".pq-r"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "sxk.zzz.ac.uk.")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "sxk.zzz.ac.uk."
        TESTCASE r.match[1].string = ".uk"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "x-.y-.")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "x-.y-."
        TESTCASE r.match[1].string = ".y-"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "-abc.peq.")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test26()
    LET pr := regex.prepare(@"^\*\.[a-z]([a-z\-\d]*[a-z\d]+)?(\.[a-z]([a-z\-\d]*[a-z\d]+)?)*$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "*.a")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "*.a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "*.b0-a")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "*.b0-a"
        TESTCASE r.match[1].string = "0-a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "*.c3-b.c")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "*.c3-b.c"
        TESTCASE r.match[1].string = "3-b"
        TESTCASE r.match[2].string = ".c"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "*.c-a.b-c")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "*.c-a.b-c"
        TESTCASE r.match[1].string = "-a"
        TESTCASE r.match[2].string = ".b-c"
        TESTCASE r.match[3].string = "-c"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "*.0")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "*.a-")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "*.a-b.c-")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "*.c-a.0-c")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test30()
    LET pr := regex.prepare(@"^[\da-f](\.[\da-f])*$", ignoreCase WITH TRUE)
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "a.b.c.d")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a.b.c.d"
        TESTCASE r.match[1].string = ".d"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "A.B.C.D")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "A.B.C.D"
        TESTCASE r.match[1].string = ".D"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "a.b.c.1.2.3.C")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a.b.c.1.2.3.C"
        TESTCASE r.match[1].string = ".C"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test31()
    LET pr := regex.prepare(@@"^\".*\"\s*(;.*)?$"@@)
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, @@""1234""@@)
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @@""1234""@@
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, @@""abcd" ;"@@)
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @@""abcd" ;"@@
        TESTCASE r.match[1].string = ";"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, @@""" ; rhubarb"@@)
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @@""" ; rhubarb"@@
        TESTCASE r.match[1].string = "; rhubarb"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, @@""1234" : things"@@)
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test32()
    LET pr := regex.prepare("^$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ""
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "A non-empty line")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test36()
    LET pr := regex.prepare("^(a(b(c)))(d(e(f)))(h(i(j)))(k(l(m)))$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abcdefhijklm")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abcdefhijklm"
        TESTCASE r.match[1].string = "abc"
        TESTCASE r.match[2].string = "bc"
        TESTCASE r.match[3].string = "c"
        TESTCASE r.match[4].string = "def"
        TESTCASE r.match[5].string = "ef"
        TESTCASE r.match[6].string = "f"
        TESTCASE r.match[7].string = "hij"
        TESTCASE r.match[8].string = "ij"
        TESTCASE r.match[9].string = "j"
        TESTCASE r.match[10].string = "klm"
        TESTCASE r.match[11].string = "lm"
        TESTCASE r.match[12].string = "m"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test37()
    LET pr := regex.prepare("^(?:a(b(c)))(?:d(e(f)))(?:h(i(j)))(?:k(l(m)))$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abcdefhijklm")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abcdefhijklm"
        TESTCASE r.match[1].string = "bc"
        TESTCASE r.match[2].string = "c"
        TESTCASE r.match[3].string = "ef"
        TESTCASE r.match[4].string = "f"
        TESTCASE r.match[5].string = "ij"
        TESTCASE r.match[6].string = "j"
        TESTCASE r.match[7].string = "lm"
        TESTCASE r.match[8].string = "m"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test39()
    LET pr := regex.prepare("^[.^$|()*+?{,}]+")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, ".^$(*+)|{?,?}")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ".^$(*+)|{?,?}"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test40()
    LET pr := regex.prepare(@"^a*\w")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "z")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "z"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "az")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "az"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "a")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaa"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "a+")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aa+")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test41()
    LET pr := regex.prepare(@"^a*?\w")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "z")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "z"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "az")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "a")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "a+")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aa+")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test42()
    LET pr := regex.prepare(@"^a+\w")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "az")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "az"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaz"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaa"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aa+")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test43()
    LET pr := regex.prepare(@"^a+?\w")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "az")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "az"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aa+")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test44()
    LET pr := regex.prepare(@"^\d{8}\w{2,}")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "1234567890")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "1234567890"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "12345678ab")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "12345678ab"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "12345678__")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "12345678__"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "1234567")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test45()
    LET pr := regex.prepare(@"^[aeiou\d]{4,5}$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "uoie")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "uoie"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "1234")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "1234"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "12345")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "12345"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaaa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaaa"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "123456")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test46()
    LET pr := regex.prepare(@"^[aeiou\d]{4,5}?")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "uoie")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "uoie"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "1234")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "1234"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "12345")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "1234"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaaa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaa"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "123456")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "1234"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test50()
    LET pr := regex.prepare("^From +([^ ]+) +[a-zA-Z][a-zA-Z][a-zA-Z] +[a-zA-Z][a-zA-Z][a-zA-Z] +[0-9]?[0-9] +[0-9][0-9]:[0-9][0-9]")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "From abcd  Mon Sep 01 12:33:02 1997")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "From abcd  Mon Sep 01 12:33"
        TESTCASE r.match[1].string = "abcd"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test51()
    LET pr := regex.prepare(@"^From\s+\S+\s+([a-zA-Z]{3}\s+){2}\d{1,2}\s+\d\d:\d\d")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "From abcd  Mon Sep 01 12:33:02 1997")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "From abcd  Mon Sep 01 12:33"
        TESTCASE r.match[1].string = "Sep "
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "From abcd  Mon Sep  1 12:33:02 1997")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "From abcd  Mon Sep  1 12:33"
        TESTCASE r.match[1].string = "Sep  "
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "From abcd  Sep 01 12:33:02 1997")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test52()
    LET pr := regex.prepare("^12.34")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, @@"12
34"@@)
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @@"12
34"@@
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "1234")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "1234"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test64()
    LET pr := regex.prepare("^[ab]{1,3}(ab*|b)")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "aabbbbb")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aabb"
        TESTCASE r.match[1].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test65()
    LET pr := regex.prepare("^[ab]{1,3}?(ab*|b)")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "aabbbbb")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aabbbbb"
        TESTCASE r.match[1].string = "abbbbb"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test66()
    LET pr := regex.prepare("^[ab]{1,3}?(ab*?|b)")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "aabbbbb")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test67()
    LET pr := regex.prepare("^[ab]{1,3}(ab*?|b)")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "aabbbbb")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aabb"
        TESTCASE r.match[1].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test76()
    LET pr := regex.prepare(@"^\s")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, " abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = " "
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ""
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, @@"
abc"@@)
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @@"
"@@
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ""
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "\tabc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "\t"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abc")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test83()
    LET pr := regex.prepare("ab{1,3}bc")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abbbbc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abbbbc"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abbbc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abbbc"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abbc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abbc"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abc")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "abbbbbc")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test84()
    LET pr := regex.prepare(@"([^.]*)\.([^:]*):[T ]+(.*)")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "track1.title:TBlah blah blah")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "track1.title:TBlah blah blah"
        TESTCASE r.match[1].string = "track1"
        TESTCASE r.match[2].string = "title"
        TESTCASE r.match[3].string = "Blah blah blah"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test85()
    LET pr := regex.prepare(@"([^.]*)\.([^:]*):[T ]+(.*)", ignoreCase WITH TRUE)
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "track1.title:TBlah blah blah")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "track1.title:TBlah blah blah"
        TESTCASE r.match[1].string = "track1"
        TESTCASE r.match[2].string = "title"
        TESTCASE r.match[3].string = "Blah blah blah"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test86()
    LET pr := regex.prepare(@"([^.]*)\.([^:]*):[t ]+(.*)", ignoreCase WITH TRUE)
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "track1.title:TBlah blah blah")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "track1.title:TBlah blah blah"
        TESTCASE r.match[1].string = "track1"
        TESTCASE r.match[2].string = "title"
        TESTCASE r.match[3].string = "Blah blah blah"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test87()
    LET pr := regex.prepare("^[W-c]+$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "WXY_^abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "WXY_^abc"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "wxy")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test88()
    LET pr := regex.prepare("^[W-c]+$", ignoreCase WITH TRUE)
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "WXY_^abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "WXY_^abc"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "wxy_^ABC")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "wxy_^ABC"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test89()
    LET pr := regex.prepare(@"^[\x3f-\x5F]+$", ignoreCase WITH TRUE)
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "WXY_^abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "WXY_^abc"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "wxy_^ABC")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "wxy_^ABC"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test91()
    LET pr := regex.prepare("^abc$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abc"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, @@"qqq
abc"@@)
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, @@"abc
zzz"@@)
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, @@"qqq
abc
zzz"@@)
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test95()
    LET pr := regex.prepare("(?:b)|(?::+)")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "b::c")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "c::b")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "::"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test96()
    LET pr := regex.prepare("[-az]+")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "az-")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "az-"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "b")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test97()
    LET pr := regex.prepare("[az-]+")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "za-")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "za-"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "b")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test98()
    LET pr := regex.prepare(@"[a\-z]+")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "a-z")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a-z"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "b")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test99()
    LET pr := regex.prepare("[a-z]+")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abcdxyz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abcdxyz"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test100()
    LET pr := regex.prepare(@"[\d-]+")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "12-34")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "12-34"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaa")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test101()
    LET pr := regex.prepare(@"\x5c")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, @"\")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @"\"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test102()
    LET pr := regex.prepare(@"\x20Z")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "the Zoo")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = " Z"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "Zulu")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test114()
    LET pr := regex.prepare("a{0}bc")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "bc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bc"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test115()
    LET pr := regex.prepare("(a|(bc)){0,0}?xyz")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "xyz")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "xyz"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test121()
    LET pr := regex.prepare("[^a]")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "Abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "A"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test122()
    LET pr := regex.prepare("[^a]", ignoreCase WITH TRUE)
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "Abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test123()
    LET pr := regex.prepare("[^a]+")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "AAAaAbc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "AAA"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test124()
    LET pr := regex.prepare("[^a]+", ignoreCase WITH TRUE)
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "AAAaAbc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bc"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test125()
    LET pr := regex.prepare("[^a]+")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, @@"bbb
ccc"@@)
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @@"bbb
ccc"@@
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test126()
    LET pr := regex.prepare("[^k]$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "c"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abk")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test127()
    LET pr := regex.prepare("[^k]{2,3}$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abc"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "kbc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "bc"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "kabc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abc"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abk")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "akb")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "akk")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test128()
    LET pr := regex.prepare(@"^\d{8,}\@.+[^k]$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "12345678@a.b.c.d")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "12345678@a.b.c.d"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "123456789@x.y.z")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "123456789@x.y.z"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "12345678@x.y.uk")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "1234567@a.b.c.d")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test130()
    LET pr := regex.prepare("[^a]")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "aaaabcd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaAabcd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "A"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test131()
    LET pr := regex.prepare("[^a]", ignoreCase WITH TRUE)
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "aaaabcd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaAabcd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test132()
    LET pr := regex.prepare("[^az]")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "aaaabcd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaAabcd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "A"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test133()
    LET pr := regex.prepare("[^az]", ignoreCase WITH TRUE)
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "aaaabcd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaAabcd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test135()
    LET pr := regex.prepare("P[^*]TAIRE[^*]{1,6}?LL")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "xxxxxxxxxxxPSTAIREISLLxxxxxxxxx")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "PSTAIREISLL"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test136()
    LET pr := regex.prepare("P[^*]TAIRE[^*]{1,}?LL")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "xxxxxxxxxxxPSTAIREISLLxxxxxxxxx")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "PSTAIREISLL"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test137()
    LET pr := regex.prepare(@"(\.\d\d[1-9]?)\d+")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "1.230003938")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ".230003938"
        TESTCASE r.match[1].string = ".23"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "1.875000282")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ".875000282"
        TESTCASE r.match[1].string = ".875"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "1.235")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ".235"
        TESTCASE r.match[1].string = ".23"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test141()
    LET pr := regex.prepare("foo(.*)bar")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "The food is under the bar in the barn.")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "food is under the bar in the bar"
        TESTCASE r.match[1].string = "d is under the bar in the "
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test142()
    LET pr := regex.prepare("foo(.*?)bar")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "The food is under the bar in the barn.")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "food is under the bar"
        TESTCASE r.match[1].string = "d is under the "
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test143()
    LET pr := regex.prepare(@"(.*)(\d*)")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "I have 2 numbers: 53147"
        TESTCASE r.match[1].string = "I have 2 numbers: 53147"
        TESTCASE r.match[2].string = ""
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test144()
    LET pr := regex.prepare(@"(.*)(\d+)")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "I have 2 numbers: 53147"
        TESTCASE r.match[1].string = "I have 2 numbers: 5314"
        TESTCASE r.match[2].string = "7"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test145()
    LET pr := regex.prepare(@"(.*?)(\d*)")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ""
        TESTCASE r.match[1].string = ""
        TESTCASE r.match[2].string = ""
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test146()
    LET pr := regex.prepare(@"(.*?)(\d+)")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "I have 2"
        TESTCASE r.match[1].string = "I have "
        TESTCASE r.match[2].string = "2"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test147()
    LET pr := regex.prepare(@"(.*)(\d+)$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "I have 2 numbers: 53147"
        TESTCASE r.match[1].string = "I have 2 numbers: 5314"
        TESTCASE r.match[2].string = "7"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test148()
    LET pr := regex.prepare(@"(.*?)(\d+)$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "I have 2 numbers: 53147"
        TESTCASE r.match[1].string = "I have 2 numbers: "
        TESTCASE r.match[2].string = "53147"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test150()
    LET pr := regex.prepare(@"(.*\D)(\d+)$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "I have 2 numbers: 53147"
        TESTCASE r.match[1].string = "I have 2 numbers: "
        TESTCASE r.match[2].string = "53147"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test153()
    LET pr := regex.prepare("^[W-]46]")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "W46]789")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "W46]"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "-46]789")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "-46]"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "Wall")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "Zebra")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "42")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "[abcd]")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "]abcd[")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test154()
    LET pr := regex.prepare(@"^[W-\]46]")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "W46]789")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "W"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "Wall")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "W"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "Zebra")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "Z"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "Xylophone")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "X"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "42")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "4"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "[abcd]")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "["
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "]abcd[")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "]"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, @"\backslash")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @"\"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "-46]789")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchPrepared(pr.regex, "well")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test155()
    LET pr := regex.prepare(@"\d\d\/\d\d\/\d\d\d\d")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "01/01/2000")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "01/01/2000"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test158()
    LET pr := regex.prepare("^(a){0,0}")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "bcd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ""
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ""
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aab")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ""
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test159()
    LET pr := regex.prepare("^(a){0,1}")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "bcd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ""
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aab")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test160()
    LET pr := regex.prepare("^(a){0,2}")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "bcd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ""
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aab")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test161()
    LET pr := regex.prepare("^(a){0,3}")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "bcd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ""
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aab")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaa"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test162()
    LET pr := regex.prepare("^(a){0,}")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "bcd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = ""
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aab")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaa"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaaaaaa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaaaaaa"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test163()
    LET pr := regex.prepare("^(a){1,1}")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aab")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bcd")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test164()
    LET pr := regex.prepare("^(a){1,2}")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aab")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bcd")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test165()
    LET pr := regex.prepare("^(a){1,3}")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aab")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaa"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bcd")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test166()
    LET pr := regex.prepare("^(a){1,}")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aab")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aa"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaa"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "aaaaaaaa")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "aaaaaaaa"
        TESTCASE r.match[1].string = "a"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bcd")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test170()
    LET pr := regex.prepare(@".*\.gif")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, @@"borfle
bib.gif
no"@@)
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @@"borfle
bib.gif"@@
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test174()
    LET pr := regex.prepare(".*$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, @@"borfle
bib.gif
no"@@)
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @@"borfle
bib.gif
no"@@
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test178()
    LET pr := regex.prepare(".*$")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, @@"borfle
bib.gif
no
"@@)
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @@"borfle
bib.gif
no
"@@
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test182()
    LET pr := regex.prepare("(.*X|^B)")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, @@"abcde
1234Xyz"@@)
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @@"abcde
1234X"@@
        TESTCASE r.match[1].string = @@"abcde
1234X"@@
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "BarFoo")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "B"
        TESTCASE r.match[1].string = "B"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, @@"abcde
Bar"@@)
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test192()
    LET pr := regex.prepare("^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "123456654321")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "123456654321"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test193()
    LET pr := regex.prepare(@"^\d\d\d\d\d\d\d\d\d\d\d\d")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "123456654321")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "123456654321"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test194()
    LET pr := regex.prepare(@"^[\d][\d][\d][\d][\d][\d][\d][\d][\d][\d][\d][\d]")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "123456654321")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "123456654321"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test195()
    LET pr := regex.prepare("^[abc]{12}")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abcabcabcabc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abcabcabcabc"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test196()
    LET pr := regex.prepare("^[a-c]{12}")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abcabcabcabc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abcabcabcabc"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test197()
    LET pr := regex.prepare("^(a|b|c){12}")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abcabcabcabc")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abcabcabcabc"
        TESTCASE r.match[1].string = "c"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
FUNCTION test198()
    LET pr := regex.prepare("^[abcdefghijklmnopqrstuvwxy0123456789]")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "n")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "n"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "z")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test199()
    LET pr := regex.prepare("abcde{0,0}")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abcd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abcd"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abce")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test200()
    LET pr := regex.prepare("ab[cd]{0,0}e")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abe")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abe"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abcde")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test201()
    LET pr := regex.prepare("ab(c){0,0}d")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abd")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abd"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abcd")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test202()
    LET pr := regex.prepare("a(b*)")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "a")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "a"
        TESTCASE r.match[1].string = ""
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "ab")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "ab"
        TESTCASE r.match[1].string = "b"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "abbbb")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abbbb"
        TESTCASE r.match[1].string = "bbbb"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "bbbbb")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test203()
    LET pr := regex.prepare(@"ab\d{0}e")
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, "abe")
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = "abe"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, "ab1e")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test204()
    LET pr := regex.prepare(@@""([^\\"]+|\\.)*""@@)
    CHECK pr ISA regex.PrepareResult.regex ELSE
        TESTCASE FALSE
        EXIT PROCESS FAILURE
    END CHECK
    VAR r: regex.Result
    r := regex.searchPrepared(pr.regex, @@"the "quick" brown fox"@@)
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @@""quick""@@
        TESTCASE r.match[1].string = "quick"
    ELSE
        TESTCASE FALSE
    END IF
    r := regex.searchPrepared(pr.regex, @@""the \"quick\" brown fox""@@)
    IF r ISA regex.Result.match THEN
        TESTCASE r.match[0].string = @@""the \"quick\" brown fox""@@
        TESTCASE r.match[1].string = " brown fox"
    ELSE
        TESTCASE FALSE
    END IF
END FUNCTION
test0()
test1()
test3()
test4()
test5()
test6()
test7()
test9()
test10()
test11()
test12()
test15()
test16()
test17()
test18()
test19()
test20()
test21()
test22()
test23()
test24()
test25()
test26()
test30()
test31()
test32()
test36()
test37()
test39()
test40()
test41()
test42()
test43()
test44()
test45()
test46()
test50()
test51()
test52()
test64()
test65()
test66()
test67()
test76()
test83()
test84()
test85()
test86()
test87()
test88()
test89()
test91()
test95()
test96()
test97()
test98()
test99()
test100()
test101()
test102()
test114()
test115()
test121()
test122()
test123()
test124()
test125()
test126()
test127()
test128()
test130()
test131()
test132()
test133()
test135()
test136()
test137()
test141()
test142()
test143()
test144()
test145()
test146()
test147()
test148()
test150()
test153()
test154()
test155()
test158()
test159()
test160()
test161()
test162()
test163()
test164()
test165()
test166()
test170()
test174()
test178()
test182()
test192()
test193()
test194()
test195()
test196()
test197()
test198()
test199()
test200()
test201()
test202()
test203()
test204()
