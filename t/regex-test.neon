-- Automatically generated by make_regex_test.py
-- Source from data/regex-testoutput1
IMPORT regex

FUNCTION test0()
    LET re := regex.prepare("the quick brown fox")
    VAR r: regex.Result
    r := regex.searchRegex(re, "the quick brown fox")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "the quick brown fox"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "What do you know about the quick brown fox?")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "the quick brown fox"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "The quick brown FOX")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "What do you know about THE QUICK BROWN FOX?")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test1()
    LET re := regex.prepare("The quick brown fox", ignoreCase WITH TRUE)
    VAR r: regex.Result
    r := regex.searchRegex(re, "the quick brown fox")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "the quick brown fox"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "The quick brown FOX")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "The quick brown FOX"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "What do you know about the quick brown fox?")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "the quick brown fox"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "What do you know about THE QUICK BROWN FOX?")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "THE QUICK BROWN FOX"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test3()
    LET re := regex.prepare("a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abxyzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abxyzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aabxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aabxyzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaabxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaabxyzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaabxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaabxyzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abcxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abcxyzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aabcxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aabcxyzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaabcxyzpqrrrabbxyyyypAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaabcxyzpqrrrabbxyyyypAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaabcxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaabcxyzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaabcxyzpqrrrabbxyyyypqqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaabcxyzpqrrrabbxyyyypqqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaabcxyzpqrrrabbxyyyypqqqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaabcxyzpqrrrabbxyyyypqqqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaabcxyzpqrrrabbxyyyypqqqqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaabcxyzpqrrrabbxyyyypqqqqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaabcxyzpqrrrabbxyyyypqqqqqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaabcxyzpqrrrabbxyyyypqqqqqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaabcxyzpqrrrabbxyyyypqqqqqqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaabcxyzpqrrrabbxyyyypqqqqqqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaabcxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaabcxyzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abxyzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abxyzzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aabxyzzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aabxyzzzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaabxyzzzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaabxyzzzzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaabxyzzzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaabxyzzzzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abcxyzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abcxyzzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aabcxyzzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aabcxyzzzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaabcxyzzzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaabcxyzzzzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaabcxyzzzzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaabcxyzzzzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaabcxyzzzzpqrrrabbbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaabcxyzzzzpqrrrabbbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaabcxyzzzzpqrrrabbbxyyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaabcxyzzzzpqrrrabbbxyyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaabcxyzpqrrrabbxyyyypABzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaabcxyzpqrrrabbxyyyypABzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaabcxyzpqrrrabbxyyyypABBzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaabcxyzpqrrrabbxyyyypABBzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, ">>>aaabxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaabxyzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, ">aaaabxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaabxyzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, ">>>>abcxyzpqrrrabbxyyyypqAzz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abcxyzpqrrrabbxyyyypqAzz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abxyzpqrrabbxyyyypqAzz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "abxyzpqrrrrabbxyyyypqAzz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "abxyzpqrrrabxyyyypqAzz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "aaaabcxyzzzzpqrrrabbbxyyyyyypqAzz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "aaaabcxyzzzzpqrrrabbbxyyypqAzz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "aaabcxyzpqrrrabbxyyyypqqqqqqqAzz")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test4()
    LET re := regex.prepare("^(abc){1,2}zz")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abczz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abczz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abcabczz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abcabczz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "zz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "abcabcabczz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, ">>abczz")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test5()
    LET re := regex.prepare("^(b+?|a){1,2}?c")
    VAR r: regex.Result
    r := regex.searchRegex(re, "bc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bbc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bbc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bbbc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bbbc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bb"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bac")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bac"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bbac")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bbac"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aac")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aac"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abbbbbbbbbbbc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abbbbbbbbbbbc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bbbbbbbbbbb"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bbbbbbbbbbbac")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bbbbbbbbbbbac"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaac")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "abbbbbbbbbbbac")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test6()
    LET re := regex.prepare("^(b+|a){1,2}c")
    VAR r: regex.Result
    r := regex.searchRegex(re, "bc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bbc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bbc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bb"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bbbc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bbbc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bbb"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bac")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bac"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bbac")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bbac"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aac")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aac"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abbbbbbbbbbbc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abbbbbbbbbbbc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bbbbbbbbbbb"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bbbbbbbbbbbac")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bbbbbbbbbbbac"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaac")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "abbbbbbbbbbbac")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test7()
    LET re := regex.prepare("^(ba|b*){1,2}?bc")
    VAR r: regex.Result
    r := regex.searchRegex(re, "babc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "babc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "ba"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bbabc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bbabc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "ba"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bababc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bababc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "ba"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bababbc")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "babababc")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test9()
    LET re := regex.prepare(@"^[ab\]cde]")
    VAR r: regex.Result
    r := regex.searchRegex(re, "athing")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bthing")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "]thing")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "]"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "cthing")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "c"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "dthing")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "d"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "ething")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "e"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "fthing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "[thing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, @"\	hing")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test10()
    LET re := regex.prepare("^[]cde]")
    VAR r: regex.Result
    r := regex.searchRegex(re, "]thing")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "]"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "cthing")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "c"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "dthing")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "d"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "ething")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "e"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "athing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "fthing")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test11()
    LET re := regex.prepare(@"^[^ab\]cde]")
    VAR r: regex.Result
    r := regex.searchRegex(re, "fthing")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "f"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "[thing")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "["
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, @"\	hing")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @"\"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "athing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "bthing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "]thing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "cthing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "dthing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "ething")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test12()
    LET re := regex.prepare("^[^]cde]")
    VAR r: regex.Result
    r := regex.searchRegex(re, "athing")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "fthing")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "f"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "]thing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "cthing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "dthing")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "ething")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test15()
    LET re := regex.prepare("^[0-9]+$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "0")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "0"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "1")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "1"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "2")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "2"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "3")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "3"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "4")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "4"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "5")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "5"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "6")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "6"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "7")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "7"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "8")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "8"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "9")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "9"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "10")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "10"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "100")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "100"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abc")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test16()
    LET re := regex.prepare("^.*nter")
    VAR r: regex.Result
    r := regex.searchRegex(re, "enter")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "enter"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "inter")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "inter"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "uponter")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "uponter"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test17()
    LET re := regex.prepare("^xxx[0-9]+$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "xxx0")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "xxx0"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "xxx1234")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "xxx1234"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "xxx")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test18()
    LET re := regex.prepare("^.+[0-9][0-9][0-9]$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "x123")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "x123"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "x1234")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "x1234"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "xx123")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "xx123"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "123456")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "123456"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "123")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test19()
    LET re := regex.prepare("^.+?[0-9][0-9][0-9]$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "x123")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "x123"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "x1234")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "x1234"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "xx123")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "xx123"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "123456")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "123456"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "123")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test20()
    LET re := regex.prepare(@"^([^!]+)!(.+)=apquxz\.ixr\.zzz\.ac\.uk$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abc!pqr=apquxz.ixr.zzz.ac.uk")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abc!pqr=apquxz.ixr.zzz.ac.uk"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "pqr"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "!pqr=apquxz.ixr.zzz.ac.uk")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "abc!=apquxz.ixr.zzz.ac.uk")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "abc!pqr=apquxz:ixr.zzz.ac.uk")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "abc!pqr=apquxz.ixr.zzz.ac.ukk")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test21()
    LET re := regex.prepare(":")
    VAR r: regex.Result
    r := regex.searchRegex(re, "Well, we need a colon: somewhere")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ":"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "Fail without a colon")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test22()
    LET re := regex.prepare(@"([\da-f:]+)$", ignoreCase WITH TRUE)
    VAR r: regex.Result
    r := regex.searchRegex(re, "0abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "0abc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "0abc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "fed")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "fed"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "fed"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "E")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "E"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "E"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "::")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "::"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "::"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "5f03:12C0::932e")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "5f03:12C0::932e"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "5f03:12C0::932e"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "fed def")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "def"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "def"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "Any old stuff")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "ff"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "ff"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "0zzz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "gzzz")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "fed ")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "Any old rubbish")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test23()
    LET re := regex.prepare(@"^.*\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$")
    VAR r: regex.Result
    r := regex.searchRegex(re, ".1.2.3")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".1.2.3"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "1"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "2"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[3]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "3"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "A.12.123.0")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "A.12.123.0"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "12"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "123"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[3]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "0"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, ".1.2.3333")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "1.2.3")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "1234.2.3")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test24()
    LET re := regex.prepare(@"^(\d+)\s+IN\s+SOA\s+(\S+)\s+(\S+)\s*\(\s*$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "1 IN SOA non-sp1 non-sp2(")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "1 IN SOA non-sp1 non-sp2("
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "1"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "non-sp1"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[3]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "non-sp2"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "1    IN    SOA    non-sp1    non-sp2   (")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "1    IN    SOA    non-sp1    non-sp2   ("
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "1"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "non-sp1"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[3]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "non-sp2"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "1IN SOA non-sp1 non-sp2(")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test25()
    LET re := regex.prepare(@"^[a-zA-Z\d][a-zA-Z\d\-]*(\.[a-zA-Z\d][a-zA-z\d\-]*)*\.$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "a.")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a."
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "Z.")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "Z."
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "2.")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "2."
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "ab-c.pq-r.")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "ab-c.pq-r."
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".pq-r"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "sxk.zzz.ac.uk.")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "sxk.zzz.ac.uk."
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".uk"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "x-.y-.")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "x-.y-."
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".y-"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "-abc.peq.")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test26()
    LET re := regex.prepare(@"^\*\.[a-z]([a-z\-\d]*[a-z\d]+)?(\.[a-z]([a-z\-\d]*[a-z\d]+)?)*$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "*.a")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "*.a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "*.b0-a")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "*.b0-a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "0-a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "*.c3-b.c")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "*.c3-b.c"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "3-b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".c"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "*.c-a.b-c")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "*.c-a.b-c"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "-a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".b-c"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[3]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "-c"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "*.0")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "*.a-")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "*.a-b.c-")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "*.c-a.0-c")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test30()
    LET re := regex.prepare(@"^[\da-f](\.[\da-f])*$", ignoreCase WITH TRUE)
    VAR r: regex.Result
    r := regex.searchRegex(re, "a.b.c.d")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a.b.c.d"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".d"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "A.B.C.D")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "A.B.C.D"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".D"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "a.b.c.1.2.3.C")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a.b.c.1.2.3.C"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".C"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test31()
    LET re := regex.prepare(@@"^\".*\"\s*(;.*)?$"@@)
    VAR r: regex.Result
    r := regex.searchRegex(re, @@""1234""@@)
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @@""1234""@@
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, @@""abcd" ;"@@)
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @@""abcd" ;"@@
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ";"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, @@""" ; rhubarb"@@)
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @@""" ; rhubarb"@@
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "; rhubarb"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, @@""1234" : things"@@)
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test32()
    LET re := regex.prepare("^$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "A non-empty line")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test36()
    LET re := regex.prepare("^(a(b(c)))(d(e(f)))(h(i(j)))(k(l(m)))$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abcdefhijklm")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abcdefhijklm"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[3]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "c"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[4]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "def"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[5]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "ef"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[6]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "f"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[7]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "hij"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[8]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "ij"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[9]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "j"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[10]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "klm"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[11]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "lm"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[12]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "m"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test37()
    LET re := regex.prepare("^(?:a(b(c)))(?:d(e(f)))(?:h(i(j)))(?:k(l(m)))$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abcdefhijklm")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abcdefhijklm"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "c"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[3]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "ef"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[4]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "f"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[5]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "ij"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[6]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "j"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[7]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "lm"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[8]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "m"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test39()
    LET re := regex.prepare("^[.^$|()*+?{,}]+")
    VAR r: regex.Result
    r := regex.searchRegex(re, ".^$(*+)|{?,?}")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".^$(*+)|{?,?}"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test40()
    LET re := regex.prepare(@"^a*\w")
    VAR r: regex.Result
    r := regex.searchRegex(re, "z")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "z"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "az")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "az"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "a")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "a+")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aa+")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test41()
    LET re := regex.prepare(@"^a*?\w")
    VAR r: regex.Result
    r := regex.searchRegex(re, "z")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "z"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "az")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "a")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "a+")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aa+")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test42()
    LET re := regex.prepare(@"^a+\w")
    VAR r: regex.Result
    r := regex.searchRegex(re, "az")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "az"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aa+")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test43()
    LET re := regex.prepare(@"^a+?\w")
    VAR r: regex.Result
    r := regex.searchRegex(re, "az")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "az"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aa+")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test44()
    LET re := regex.prepare(@"^\d{8}\w{2,}")
    VAR r: regex.Result
    r := regex.searchRegex(re, "1234567890")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "1234567890"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "12345678ab")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "12345678ab"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "12345678__")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "12345678__"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "1234567")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test45()
    LET re := regex.prepare(@"^[aeiou\d]{4,5}$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "uoie")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "uoie"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "1234")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "1234"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "12345")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "12345"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaaa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaaa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "123456")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test46()
    LET re := regex.prepare(@"^[aeiou\d]{4,5}?")
    VAR r: regex.Result
    r := regex.searchRegex(re, "uoie")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "uoie"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "1234")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "1234"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "12345")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "1234"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaaa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "123456")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "1234"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test50()
    LET re := regex.prepare("^From +([^ ]+) +[a-zA-Z][a-zA-Z][a-zA-Z] +[a-zA-Z][a-zA-Z][a-zA-Z] +[0-9]?[0-9] +[0-9][0-9]:[0-9][0-9]")
    VAR r: regex.Result
    r := regex.searchRegex(re, "From abcd  Mon Sep 01 12:33:02 1997")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "From abcd  Mon Sep 01 12:33"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abcd"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test51()
    LET re := regex.prepare(@"^From\s+\S+\s+([a-zA-Z]{3}\s+){2}\d{1,2}\s+\d\d:\d\d")
    VAR r: regex.Result
    r := regex.searchRegex(re, "From abcd  Mon Sep 01 12:33:02 1997")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "From abcd  Mon Sep 01 12:33"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "Sep "
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "From abcd  Mon Sep  1 12:33:02 1997")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "From abcd  Mon Sep  1 12:33"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "Sep  "
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "From abcd  Sep 01 12:33:02 1997")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test52()
    LET re := regex.prepare("^12.34")
    VAR r: regex.Result
    r := regex.searchRegex(re, @@"12
34"@@)
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @@"12
34"@@
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "1234")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "1234"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test64()
    LET re := regex.prepare("^[ab]{1,3}(ab*|b)")
    VAR r: regex.Result
    r := regex.searchRegex(re, "aabbbbb")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aabb"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test65()
    LET re := regex.prepare("^[ab]{1,3}?(ab*|b)")
    VAR r: regex.Result
    r := regex.searchRegex(re, "aabbbbb")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aabbbbb"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abbbbb"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test66()
    LET re := regex.prepare("^[ab]{1,3}?(ab*?|b)")
    VAR r: regex.Result
    r := regex.searchRegex(re, "aabbbbb")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test67()
    LET re := regex.prepare("^[ab]{1,3}(ab*?|b)")
    VAR r: regex.Result
    r := regex.searchRegex(re, "aabbbbb")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aabb"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test76()
    LET re := regex.prepare(@"^\s")
    VAR r: regex.Result
    r := regex.searchRegex(re, " abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = " "
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, @@"
abc"@@)
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @@"
"@@
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "\tabc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "\t"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abc")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test83()
    LET re := regex.prepare("ab{1,3}bc")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abbbbc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abbbbc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abbbc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abbbc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abbc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abbc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abc")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "abbbbbc")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test84()
    LET re := regex.prepare(@"([^.]*)\.([^:]*):[T ]+(.*)")
    VAR r: regex.Result
    r := regex.searchRegex(re, "track1.title:TBlah blah blah")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "track1.title:TBlah blah blah"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "track1"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "title"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[3]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "Blah blah blah"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test85()
    LET re := regex.prepare(@"([^.]*)\.([^:]*):[T ]+(.*)", ignoreCase WITH TRUE)
    VAR r: regex.Result
    r := regex.searchRegex(re, "track1.title:TBlah blah blah")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "track1.title:TBlah blah blah"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "track1"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "title"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[3]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "Blah blah blah"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test86()
    LET re := regex.prepare(@"([^.]*)\.([^:]*):[t ]+(.*)", ignoreCase WITH TRUE)
    VAR r: regex.Result
    r := regex.searchRegex(re, "track1.title:TBlah blah blah")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "track1.title:TBlah blah blah"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "track1"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "title"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[3]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "Blah blah blah"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test87()
    LET re := regex.prepare("^[W-c]+$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "WXY_^abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "WXY_^abc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "wxy")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test88()
    LET re := regex.prepare("^[W-c]+$", ignoreCase WITH TRUE)
    VAR r: regex.Result
    r := regex.searchRegex(re, "WXY_^abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "WXY_^abc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "wxy_^ABC")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "wxy_^ABC"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test89()
    LET re := regex.prepare(@"^[\x3f-\x5F]+$", ignoreCase WITH TRUE)
    VAR r: regex.Result
    r := regex.searchRegex(re, "WXY_^abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "WXY_^abc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "wxy_^ABC")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "wxy_^ABC"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test91()
    LET re := regex.prepare("^abc$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, @@"qqq
abc"@@)
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, @@"abc
zzz"@@)
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, @@"qqq
abc
zzz"@@)
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test95()
    LET re := regex.prepare("(?:b)|(?::+)")
    VAR r: regex.Result
    r := regex.searchRegex(re, "b::c")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "c::b")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "::"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test96()
    LET re := regex.prepare("[-az]+")
    VAR r: regex.Result
    r := regex.searchRegex(re, "az-")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "az-"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "b")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test97()
    LET re := regex.prepare("[az-]+")
    VAR r: regex.Result
    r := regex.searchRegex(re, "za-")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "za-"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "b")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test98()
    LET re := regex.prepare(@"[a\-z]+")
    VAR r: regex.Result
    r := regex.searchRegex(re, "a-z")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a-z"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "b")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test99()
    LET re := regex.prepare("[a-z]+")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abcdxyz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abcdxyz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test100()
    LET re := regex.prepare(@"[\d-]+")
    VAR r: regex.Result
    r := regex.searchRegex(re, "12-34")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "12-34"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaa")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test101()
    LET re := regex.prepare(@"\x5c")
    VAR r: regex.Result
    r := regex.searchRegex(re, @"\")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @"\"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test102()
    LET re := regex.prepare(@"\x20Z")
    VAR r: regex.Result
    r := regex.searchRegex(re, "the Zoo")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = " Z"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "Zulu")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test114()
    LET re := regex.prepare("a{0}bc")
    VAR r: regex.Result
    r := regex.searchRegex(re, "bc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test115()
    LET re := regex.prepare("(a|(bc)){0,0}?xyz")
    VAR r: regex.Result
    r := regex.searchRegex(re, "xyz")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "xyz"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test120()
    LET re := regex.prepare(@"^([^a])([^\b])([^c]*)([^d]{3,4})")
    VAR r: regex.Result
    r := regex.searchRegex(re, "baNOTccccd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "baNOTcccc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[3]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "NOT"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[4]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "cccc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "baNOTcccd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "baNOTccc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[3]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "NOT"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[4]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "ccc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "baNOTccd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "baNOTcc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[3]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "NO"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[4]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "Tcc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bacccd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "baccc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[3]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[4]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "ccc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "anything")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, @"b\bc")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "baccd")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test121()
    LET re := regex.prepare("[^a]")
    VAR r: regex.Result
    r := regex.searchRegex(re, "Abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "A"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test122()
    LET re := regex.prepare("[^a]", ignoreCase WITH TRUE)
    VAR r: regex.Result
    r := regex.searchRegex(re, "Abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test123()
    LET re := regex.prepare("[^a]+")
    VAR r: regex.Result
    r := regex.searchRegex(re, "AAAaAbc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "AAA"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test124()
    LET re := regex.prepare("[^a]+", ignoreCase WITH TRUE)
    VAR r: regex.Result
    r := regex.searchRegex(re, "AAAaAbc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test125()
    LET re := regex.prepare("[^a]+")
    VAR r: regex.Result
    r := regex.searchRegex(re, @@"bbb
ccc"@@)
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @@"bbb
ccc"@@
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test126()
    LET re := regex.prepare("[^k]$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "c"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abk")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test127()
    LET re := regex.prepare("[^k]{2,3}$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "kbc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "kabc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abk")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "akb")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "akk")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test128()
    LET re := regex.prepare(@"^\d{8,}\@.+[^k]$")
    VAR r: regex.Result
    r := regex.searchRegex(re, @"12345678\@a.b.c.d")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "12345678@a.b.c.d"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, @"123456789\@x.y.z")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "123456789@x.y.z"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, @"12345678\@x.y.uk")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, @"1234567\@a.b.c.d")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test130()
    LET re := regex.prepare("[^a]")
    VAR r: regex.Result
    r := regex.searchRegex(re, "aaaabcd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaAabcd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "A"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test131()
    LET re := regex.prepare("[^a]", ignoreCase WITH TRUE)
    VAR r: regex.Result
    r := regex.searchRegex(re, "aaaabcd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaAabcd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test132()
    LET re := regex.prepare("[^az]")
    VAR r: regex.Result
    r := regex.searchRegex(re, "aaaabcd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaAabcd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "A"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test133()
    LET re := regex.prepare("[^az]", ignoreCase WITH TRUE)
    VAR r: regex.Result
    r := regex.searchRegex(re, "aaaabcd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaAabcd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test135()
    LET re := regex.prepare("P[^*]TAIRE[^*]{1,6}?LL")
    VAR r: regex.Result
    r := regex.searchRegex(re, "xxxxxxxxxxxPSTAIREISLLxxxxxxxxx")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "PSTAIREISLL"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test136()
    LET re := regex.prepare("P[^*]TAIRE[^*]{1,}?LL")
    VAR r: regex.Result
    r := regex.searchRegex(re, "xxxxxxxxxxxPSTAIREISLLxxxxxxxxx")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "PSTAIREISLL"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test137()
    LET re := regex.prepare(@"(\.\d\d[1-9]?)\d+")
    VAR r: regex.Result
    r := regex.searchRegex(re, "1.230003938")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".230003938"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".23"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "1.875000282")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".875000282"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".875"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "1.235")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".235"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ".23"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test140()
    LET re := regex.prepare(@"\b(foo)\s+(\w+)", ignoreCase WITH TRUE)
    VAR r: regex.Result
    r := regex.searchRegex(re, "Food is on the foo table")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "foo table"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "foo"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "table"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test141()
    LET re := regex.prepare("foo(.*)bar")
    VAR r: regex.Result
    r := regex.searchRegex(re, "The food is under the bar in the barn.")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "food is under the bar in the bar"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "d is under the bar in the "
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test142()
    LET re := regex.prepare("foo(.*?)bar")
    VAR r: regex.Result
    r := regex.searchRegex(re, "The food is under the bar in the barn.")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "food is under the bar"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "d is under the "
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test143()
    LET re := regex.prepare(@"(.*)(\d*)")
    VAR r: regex.Result
    r := regex.searchRegex(re, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "I have 2 numbers: 53147"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "I have 2 numbers: 53147"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test144()
    LET re := regex.prepare(@"(.*)(\d+)")
    VAR r: regex.Result
    r := regex.searchRegex(re, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "I have 2 numbers: 53147"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "I have 2 numbers: 5314"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "7"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test145()
    LET re := regex.prepare(@"(.*?)(\d*)")
    VAR r: regex.Result
    r := regex.searchRegex(re, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test146()
    LET re := regex.prepare(@"(.*?)(\d+)")
    VAR r: regex.Result
    r := regex.searchRegex(re, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "I have 2"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "I have "
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "2"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test147()
    LET re := regex.prepare(@"(.*)(\d+)$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "I have 2 numbers: 53147"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "I have 2 numbers: 5314"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "7"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test148()
    LET re := regex.prepare(@"(.*?)(\d+)$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "I have 2 numbers: 53147"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "I have 2 numbers: "
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "53147"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test149()
    LET re := regex.prepare(@"(.*)\b(\d+)$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "I have 2 numbers: 53147"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "I have 2 numbers: "
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "53147"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test150()
    LET re := regex.prepare(@"(.*\D)(\d+)$")
    VAR r: regex.Result
    r := regex.searchRegex(re, "I have 2 numbers: 53147")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "I have 2 numbers: 53147"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "I have 2 numbers: "
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[2]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "53147"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test153()
    LET re := regex.prepare("^[W-]46]")
    VAR r: regex.Result
    r := regex.searchRegex(re, "W46]789")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "W46]"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "-46]789")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "-46]"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "Wall")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "Zebra")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "42")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "[abcd]")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "]abcd[")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test154()
    LET re := regex.prepare(@"^[W-\]46]")
    VAR r: regex.Result
    r := regex.searchRegex(re, "W46]789")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "W"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "Wall")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "W"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "Zebra")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "Z"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "Xylophone")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "X"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "42")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "4"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "[abcd]")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "["
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "]abcd[")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "]"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, @"\backslash")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @"\"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "-46]789")
    TESTCASE r ISA regex.Result.noMatch
    r := regex.searchRegex(re, "well")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test155()
    LET re := regex.prepare(@"\d\d\/\d\d\/\d\d\d\d")
    VAR r: regex.Result
    r := regex.searchRegex(re, "01/01/2000")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "01/01/2000"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test158()
    LET re := regex.prepare("^(a){0,0}")
    VAR r: regex.Result
    r := regex.searchRegex(re, "bcd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aab")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test159()
    LET re := regex.prepare("^(a){0,1}")
    VAR r: regex.Result
    r := regex.searchRegex(re, "bcd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aab")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test160()
    LET re := regex.prepare("^(a){0,2}")
    VAR r: regex.Result
    r := regex.searchRegex(re, "bcd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aab")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test161()
    LET re := regex.prepare("^(a){0,3}")
    VAR r: regex.Result
    r := regex.searchRegex(re, "bcd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aab")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test162()
    LET re := regex.prepare("^(a){0,}")
    VAR r: regex.Result
    r := regex.searchRegex(re, "bcd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aab")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaaaaaa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaaaaaa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test163()
    LET re := regex.prepare("^(a){1,1}")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aab")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bcd")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test164()
    LET re := regex.prepare("^(a){1,2}")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aab")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bcd")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test165()
    LET re := regex.prepare("^(a){1,3}")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aab")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bcd")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test166()
    LET re := regex.prepare("^(a){1,}")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aab")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "aaaaaaaa")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "aaaaaaaa"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bcd")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test170()
    LET re := regex.prepare(@".*\.gif")
    VAR r: regex.Result
    r := regex.searchRegex(re, @@"borfle
bib.gif
no"@@)
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @@"borfle
bib.gif"@@
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test174()
    LET re := regex.prepare(".*$")
    VAR r: regex.Result
    r := regex.searchRegex(re, @@"borfle
bib.gif
no"@@)
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @@"borfle
bib.gif
no"@@
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test178()
    LET re := regex.prepare(".*$")
    VAR r: regex.Result
    r := regex.searchRegex(re, @@"borfle
bib.gif
no
"@@)
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @@"borfle
bib.gif
no
"@@
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test182()
    LET re := regex.prepare("(.*X|^B)")
    VAR r: regex.Result
    r := regex.searchRegex(re, @@"abcde
1234Xyz"@@)
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @@"abcde
1234X"@@
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @@"abcde
1234X"@@
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "BarFoo")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "B"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "B"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, @@"abcde
Bar"@@)
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test192()
    LET re := regex.prepare("^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]")
    VAR r: regex.Result
    r := regex.searchRegex(re, "123456654321")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "123456654321"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test193()
    LET re := regex.prepare(@"^\d\d\d\d\d\d\d\d\d\d\d\d")
    VAR r: regex.Result
    r := regex.searchRegex(re, "123456654321")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "123456654321"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test194()
    LET re := regex.prepare(@"^[\d][\d][\d][\d][\d][\d][\d][\d][\d][\d][\d][\d]")
    VAR r: regex.Result
    r := regex.searchRegex(re, "123456654321")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "123456654321"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test195()
    LET re := regex.prepare("^[abc]{12}")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abcabcabcabc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abcabcabcabc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test196()
    LET re := regex.prepare("^[a-c]{12}")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abcabcabcabc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abcabcabcabc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test197()
    LET re := regex.prepare("^(a|b|c){12}")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abcabcabcabc")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abcabcabcabc"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "c"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
FUNCTION test198()
    LET re := regex.prepare("^[abcdefghijklmnopqrstuvwxy0123456789]")
    VAR r: regex.Result
    r := regex.searchRegex(re, "n")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "n"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "z")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test199()
    LET re := regex.prepare("abcde{0,0}")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abcd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abcd"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abce")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test200()
    LET re := regex.prepare("ab[cd]{0,0}e")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abe")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abe"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abcde")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test201()
    LET re := regex.prepare("ab(c){0,0}d")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abd")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abd"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abcd")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test202()
    LET re := regex.prepare("a(b*)")
    VAR r: regex.Result
    r := regex.searchRegex(re, "a")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "a"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = ""
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "ab")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "ab"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "b"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "abbbb")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abbbb"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "bbbb"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "bbbbb")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test203()
    LET re := regex.prepare(@"ab\d{0}e")
    VAR r: regex.Result
    r := regex.searchRegex(re, "abe")
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "abe"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, "ab1e")
    TESTCASE r ISA regex.Result.noMatch
END FUNCTION
FUNCTION test204()
    LET re := regex.prepare(@@""([^\\"]+|\\.)*""@@)
    VAR r: regex.Result
    r := regex.searchRegex(re, @@"the "quick" brown fox"@@)
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @@""quick""@@
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = "quick"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
    r := regex.searchRegex(re, @@""the \"quick\" brown fox""@@)
    IF r ISA regex.Result.match THEN
        VAR m: regex.Match
        m := r.match[0]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = @@""the \"quick\" brown fox""@@
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        m := r.match[1]
        IF m ISA regex.Match.found THEN
            TESTCASE m.found.string = " brown fox"
        ELSE
            TESTCASE m ISA regex.Match.found
        END IF
        TESTCASE r ISA regex.Result.match
    END IF
END FUNCTION
test0()
test1()
test3()
test4()
test5()
test6()
test7()
test9()
test10()
test11()
test12()
test15()
test16()
test17()
test18()
test19()
test20()
test21()
test22()
test23()
test24()
test25()
test26()
test30()
test31()
test32()
test36()
test37()
test39()
test40()
test41()
test42()
test43()
test44()
test45()
test46()
test50()
test51()
test52()
test64()
test65()
test66()
test67()
test76()
test83()
test84()
test85()
test86()
test87()
test88()
test89()
test91()
test95()
test96()
test97()
test98()
test99()
test100()
test101()
test102()
test114()
test115()
test120()
test121()
test122()
test123()
test124()
test125()
test126()
test127()
test128()
test130()
test131()
test132()
test133()
test135()
test136()
test137()
test140()
test141()
test142()
test143()
test144()
test145()
test146()
test147()
test148()
test149()
test150()
test153()
test154()
test155()
test158()
test159()
test160()
test161()
test162()
test163()
test164()
test165()
test166()
test170()
test174()
test178()
test182()
test192()
test193()
test194()
test195()
test196()
test197()
test198()
test199()
test200()
test201()
test202()
test203()
test204()
