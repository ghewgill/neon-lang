/*
 * C Converted Whetstone Double Precision Benchmark
 *              Version 1.2     22 March 1998
 *
 *      (c) Copyright 1998 Painter Engineering, Inc.
 *              All Rights Reserved.
 *
 *              Permission is granted to use, duplicate, and
 *              publish this text and program as long as it
 *              includes this entire comment block and limited
 *              rights reference.
 *
 * Converted by Rich Painter, Painter Engineering, Inc. based on the
 * www.netlib.org benchmark/whetstoned version obtained 16 March 1998.
 *
 * A novel approach was used here to keep the look and feel of the
 * FORTRAN version.  Altering the FORTRAN-based array indices,
 * starting at element 1, to start at element 0 for C, would require
 * numerous changes, including decrementing the variable indices by 1.
 * Instead, the array E1[] was declared 1 element larger in C.  This
 * allows the FORTRAN index range to function without any literal or
 * variable indices changes.  The array element E1[0] is simply never
 * used and does not alter the benchmark results.
 *
 * The major FORTRAN comment blocks were retained to minimize
 * differences between versions.  Modules N5 and N12, like in the
 * FORTRAN version, have been eliminated here.
 *
 * An optional command-line argument has been provided [-c] to
 * offer continuous repetition of the entire benchmark.
 * An optional argument for setting an alternate LOOP count is also
 * provided.  Define PRINTOUT to cause the POUT() function to print
 * outputs at various stages.  Final timing measurements should be
 * made with the PRINTOUT undefined.
 *
 * Questions and comments may be directed to the author at
 *                      r.painter@ieee.org
 */
/*
C**********************************************************************
C     Benchmark #2 -- Double  Precision Whetstone (A001)
C
C     o This is a REAL*8 version of
C       the Whetstone benchmark program.
C
C     o DO-loop semantics are ANSI-66 compatible.
C
C     o Final measurements are to be made with all
C       WRITE statements and FORMAT sttements removed.
C
C**********************************************************************   
*/

-- standard modules required
IMPORT math

-- the following is optional depending on the timing function used
IMPORT time

--#define USAGE   "usage: whetdc [-c] [loops]\n"

/*
        COMMON T,T1,T2,E1(4),J,K,L
*/
VAR t: Number
VAR T1: Number
VAR T2: Number
VAR E1: Array<Number>
VAR j: Number
VAR k: Number
VAR l: Number

FUNCTION pa(INOUT e: Array<Number>)
    j := 0
    WHILE j < 6 DO
        e[1] := ( e[1] + e[2] + e[3] - e[4]) * t
        e[2] := ( e[1] + e[2] - e[3] + e[4]) * t
        e[3] := ( e[1] - e[2] + e[3] + e[4]) * t
        e[4] := (-e[1] + e[2] + e[3] + e[4]) / T2
        j := j + 1
    END WHILE
END FUNCTION

FUNCTION P0()
    E1[j] := E1[k]
    E1[k] := E1[l]
    E1[l] := E1[j]
END FUNCTION

FUNCTION P3(x: Number, y: Number, OUT z: Number)
    VAR X1, Y1: Number

    X1 := x
    Y1 := y
    X1 := t * (X1 + Y1)
    Y1 := t * (X1 + Y1)
    z  := (X1 + Y1) / T2
END FUNCTION

--#ifdef PRINTOUT
--void
--POUT(long N, long J, long K, double X1, double X2, double X3, double X4)
--{
--        printf("%7ld %7ld %7ld %12.4e %12.4e %12.4e %12.4e\n",
--                                                N, J, K, X1, X2, X3, X4);
--}
--#endif

FUNCTION main()

    -- used in the FORTRAN version
    VAR N1, N2, N3, N4, N6, N7, N8, N9, N10, N11: Number
    VAR X1,X2,X3,X4,x,y,z: Number
    VAR loop: Number
    VAR ii, jj: Number

    -- added for this version
    VAR loopstart: Number
    VAR startsec, finisec: Number
    VAR Kips: Number
    VAR continuous: Boolean

    loopstart := 1000               -- see the note about LOOP below
    continuous := FALSE

--    II = 1;         /* start at the first arg (temp use of II here) */
--    while (II < argc) {
--            if (strncmp(argv[II], "-c", 2) == 0 || argv[II][0] == 'c') {
--                    continuous = 1;
--            } else if (atol(argv[II]) > 0) {
--                    loopstart = atol(argv[II]);
--            } else {
--                    fprintf(stderr, USAGE);
--                    return(1);
--            }
--            II++;
--    }

    -- TODO: Just once through this loop for now.
    --WHILE continuous DO
/*
C
C       Start benchmark timing at this point.
C
*/
        startsec := time.now()

/*
C
C       The actual benchmark starts here.
C
*/
        t  := 0.499975
        T1 := 0.50025
        T2 := 2.0
/*
C
C       With loopcount loop=10, one million Whetstone instructions
C       will be executed in EACH MAJOR LOOP..A MAJOR LOOP IS EXECUTED
C       'II' TIMES TO INCREASE WALL-CLOCK TIMING ACCURACY.
C
        loop := 1000
*/
        loop := loopstart
        ii   := 1

        jj := 1

        WHILE jj <= ii DO
            N1  := 0
            N2  := 12 * loop
            N3  := 14 * loop
            N4  := 345 * loop
            N6  := 210 * loop
            N7  := 32 * loop
            N8  := 899 * loop
            N9  := 616 * loop
            N10 := 0
            N11 := 93 * loop
/*
C
C       Module 1: Simple identifiers
C
*/
            X1  :=  1.0
            X2  := -1.0
            X3  := -1.0
            X4  := -1.0

            FOR i := 1 TO N1 DO
                X1 := (X1 + X2 + X3 - X4) * t
                X2 := (X1 + X2 - X3 + X4) * t
                X3 := (X1 - X2 + X3 + X4) * t
                X4 := (-X1+ X2 + X3 + X4) * t
            END FOR
--#ifdef PRINTOUT
--            IF (JJ==II)POUT(N1,N1,N1,X1,X2,X3,X4);
--#endif

/*
C
C       Module 2: Array elements
C
*/
            E1[1] :=  1.0
            E1[2] := -1.0
            E1[3] := -1.0
            E1[4] := -1.0

            FOR i := 1 TO N2 DO
                E1[1] := ( E1[1] + E1[2] + E1[3] - E1[4]) * t
                E1[2] := ( E1[1] + E1[2] - E1[3] + E1[4]) * t
                E1[3] := ( E1[1] - E1[2] + E1[3] + E1[4]) * t
                E1[4] := (-E1[1] + E1[2] + E1[3] + E1[4]) * t
            END FOR

--#ifdef PRINTOUT
--            IF (JJ==II)POUT(N2,N3,N2,E1[1],E1[2],E1[3],E1[4]);
--#endif

/*
C
C       Module 3: Array as parameter
C
*/
            FOR i := 1 TO N3 DO
                pa(INOUT E1)
            END FOR

--#ifdef PRINTOUT
--            IF (JJ==II)POUT(N3,N2,N2,E1[1],E1[2],E1[3],E1[4]);
--#endif

/*
C
C       Module 4: Conditional jumps
C
*/
            j := 1
            FOR i := 1 TO N4 DO
                IF j = 1 THEN
                    j := 2
                ELSE
                    j := 3
                END IF

                IF j > 2 THEN
                    j := 0
                ELSE
                    j := 1
                END IF

                IF j < 1 THEN
                    j := 1
                ELSE
                    j := 0
                END IF
            END FOR

--#ifdef PRINTOUT
--            IF (JJ==II)POUT(N4,J,J,X1,X2,X3,X4);
--#endif

/*
C
C       Module 5: Omitted
C       Module 6: Integer arithmetic
C
*/

            j := 1
            k := 2
            l := 3

            FOR i := 1 TO N6 DO
                j := j * (k-j) * (l-k)
                k := l * k - (l-j) * k
                l := (l-k) * (k+j)
                E1[l-1] := j + k + l
                E1[k-1] := j * k * l
            END FOR

--#ifdef PRINTOUT
--            IF (JJ==II)POUT(N6,J,K,E1[1],E1[2],E1[3],E1[4]);
--#endif

/*
C
C       Module 7: Trigonometric functions
C
*/
            x := 0.5
            y := 0.5

            FOR i := 1 TO N7 DO
                x := t * math.atan(T2*math.sin(x)*math.cos(x)/(math.cos(x+y)+math.cos(x-y)-1.0))
                y := t * math.atan(T2*math.sin(y)*math.cos(y)/(math.cos(x+y)+math.cos(x-y)-1.0))
            END FOR

--#ifdef PRINTOUT
--            IF (JJ==II)POUT(N7,J,K,X,X,Y,Y);
--#endif

/*
C
C       Module 8: Procedure calls
C
*/
            x := 1.0
            y := 1.0
            z := 1.0

            FOR i := 1 TO N8 DO
                P3(x,y,OUT z)
            END FOR

--#ifdef PRINTOUT
--            IF (JJ==II)POUT(N8,J,K,X,Y,Z,Z);
--#endif

/*
C
C       Module 9: Array references
C
*/
            j := 1
            k := 2
            l := 3
            E1[1] := 1.0
            E1[2] := 2.0
            E1[3] := 3.0

            FOR i := 1 TO N9 DO
                P0()
            END FOR

--#ifdef PRINTOUT
--            IF (JJ==II)POUT(N9,J,K,E1[1],E1[2],E1[3],E1[4]);
--#endif

/*
C
C       Module 10: Integer arithmetic
C
*/
            j := 2
            k := 3

            FOR i := 1 TO N10 DO
                j := j + k
                k := j + k
                j := k - j
                k := k - j - j
            END FOR

--#ifdef PRINTOUT
--            IF (JJ==II)POUT(N10,J,K,X1,X2,X3,X4);
--#endif

/*
C
C       Module 11: Standard functions
C
*/
            x := 0.75

            FOR i := 1 TO N11 DO
                x := math.sqrt(math.exp(math.log(x)/T1))
            END FOR

--#ifdef PRINTOUT
--            IF (JJ==II)POUT(N11,J,K,X,X,X,X);
--#endif

/*
C
C      THIS IS THE END OF THE MAJOR LOOP.
C
*/
            jj := jj + 1
        END WHILE

/*
C
C      Stop benchmark timing at this point.
C
*/
        finisec := time.now()

/*
C----------------------------------------------------------------
C      Performance in Whetstone KIP's per second is given by
C
C       (100*loop*II)/TIME
C
C      where TIME is in seconds.
C--------------------------------------------------------------------
*/
        print("")
        IF finisec-startsec <= 0 THEN
            print("Insufficient duration- Increase the LOOP count")
            -- RETURN
        END IF

        print("Loops: " & str(loop) & ", Iterations: " & str(ii) & ", Duration: " & str(finisec-startsec) & ".")

        Kips := (100.0*loop*ii)/(finisec-startsec)
        IF Kips >= 1000.0 THEN
            print("Neon Converted Double Precision Whetstones: " & str(Kips/1000.0) & " MIPS")
        ELSE
            print("Neon Converted Double Precision Whetstones: " & str(Kips) & " KIPS")
        END IF

    --END WHILE

END FUNCTION

main()
