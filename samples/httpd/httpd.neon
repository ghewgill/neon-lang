/*  File: httpd
 *
 *  Implementation of a simple HTTP server.
 */

IMPORT file
IMPORT net
IMPORT regex
IMPORT string

FUNCTION toBytes(s: String): Bytes
    RETURN s.toBytes()
END FUNCTION

TYPE Response IS RECORD
    code: Number
    content_type: String
    headers: Dictionary<String>
    content: Bytes
END RECORD

TYPE RequestHandler IS FUNCTION(path: String, params: Array<Object>): Response

TYPE Handler IS RECORD
    path: String
    callback: RequestHandler
    params: Array<Object>
END RECORD

TYPE Client IS RECORD
    socket: net.Socket
    header: String
END RECORD

TYPE HttpServer IS RECORD
    port: Number
    server: net.Socket
    clients: Array<Client>
    handlers: Array<Handler>
END RECORD

FUNCTION HttpServer.addHandler(INOUT self: HttpServer, path: String, callback: RequestHandler, params: Array<Object>)
    self.handlers.append(Handler(path WITH path, callback WITH callback, params WITH params))
END FUNCTION

FUNCTION HttpServer.serve(INOUT self: HttpServer)
    self.server := net.tcpSocket()
    self.server.listen(self.port)
    LOOP
        VAR read: Array<net.Socket> := [self.server]
        FOREACH c IN self.clients DO
            read.append(c.socket)
        END FOREACH
        VAR write: Array<net.Socket> := []
        VAR error: Array<net.Socket> := []
        IF net.select(INOUT read, INOUT write, INOUT error, -1) THEN
            IF self.server IN read THEN
                self.clients.append(Client(socket WITH self.server.accept()))
            END IF
            FOR i := self.clients.size()-1 TO 0 STEP -1 DO
                IF self.clients[i].socket IN read THEN
                    IF self.handle_incoming(INOUT self.clients[i]) THEN
                        self.clients[i].socket.close()
                        self.clients.remove(i)
                    END IF
                END IF
            END FOR
        END IF
    END LOOP
END FUNCTION

FUNCTION HttpServer.handle_incoming(INOUT self: HttpServer, INOUT client: Client): Boolean
    VAR buf: Bytes
    IF NOT client.socket.recv(1000, OUT buf) THEN
        RETURN TRUE
    END IF
    client.header.append(buf.decodeToString())
    IF client.header[LAST-3 TO LAST] = "\r\n\r\n" THEN
        self.handle_request(INOUT client)
        RETURN TRUE
    END IF
    RETURN FALSE
END FUNCTION

FUNCTION HttpServer.handle_request(INOUT self: HttpServer, INOUT client: Client)
    LET a: Array<String> := string.split(client.header, "\r\n")
    LET request: Array<String> := string.split(a[0], " ")
    LET method: String := request[0]
    LET path: String := request[1]
    --LET version: String := request[2]
    VAR response: Response := Response()
    VAR found: Boolean := FALSE
    FOREACH h IN self.handlers DO
        IF regex.search(h.path, path, OUT _) THEN
            -- TODO: Should be able to do h.callback(path, params),
            -- but that syntax seems to be handled only as a method
            LET rh: RequestHandler := h.callback
            response := rh(path, h.params)
            found := TRUE
            EXIT FOREACH
        END IF
    END FOREACH
    IF NOT found THEN
        response.code := 404
        response.content_type := "text/plain"
        response.content := toBytes("not found")
    END IF
    print("\(method) \(path) \(response.code)")
    client.socket.send(toBytes("HTTP/1.0 \(response.code) ok\r\n"))
    client.socket.send(toBytes("Content-type: \(response.content_type)\r\n"))
    FOREACH h IN response.headers.keys() DO
        client.socket.send(toBytes("\(h): \(response.headers[h])\r\n"))
    END FOREACH
    client.socket.send(toBytes("Content-length: \(response.content.size())\r\n"))
    client.socket.send(toBytes("\r\n"))
    client.socket.send(response.content)
END FUNCTION

FUNCTION path_handler(path: String, params: Array<Object>): Response
    VAR r: Response := Response()
    LET local_path: String := params[0] & path
    IF file.isDirectory(local_path) THEN
        IF path[LAST] <> "/" THEN
            r.code := 302
            r.content_type := "text/plain"
            r.headers["Location"] := path & "/"
        ELSE
            r.code := 200
            r.content_type := "text/html"
            VAR page: String := ""
            page.append("<html>\n")
            page.append("<body>\n")
            page.append("<table>\n")
            FOREACH fn IN file.files(local_path) DO
                page.append("<tr><td><a href=\"\(fn)\">\(fn)</a></td></tr>\n")
            END FOREACH
            page.append("</table>\n")
            page.append("</body>\n")
            page.append("</html>\n")
            r.content := page.toBytes()
        END IF
    ELSE
        TRY
            r.code := 200
            r.content_type := "text/plain"
            r.content := file.readBytes(local_path)
        TRAP file.FileException.Open DO
            r.code := 404
            r.content_type := "text/plain"
            r.content := toBytes("file not found")
        END TRY
    END IF
    RETURN r
END FUNCTION

VAR server: HttpServer := HttpServer(port WITH 8080)
server.addHandler("/", path_handler, ["."])
server.serve()
