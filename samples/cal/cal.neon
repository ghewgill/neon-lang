--  File: cal
--
--  Implementation of the Unix cal command.

IMPORT datetime
IMPORT sys

CONSTANT MonthName: Array<String> := [
    "", -- Month numbers start at 1
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
]

FUNCTION build_month(year, month: Number, year_in_title: Boolean): Array<String>
    VAR dt: datetime.DateTime := datetime.DateTime()
    dt := dt.withDate(year, month, 1)
    -- TODO: module record constructor
    VAR p: datetime.Period := datetime.Period()
    p.days := dt.weekday MOD 7
    --dt := dt.minusPeriod(p)
    dt := dt.minusDuration(86400 * p.days)
    LET title: String := (IF year_in_title THEN "\(MonthName[month]) \(year)" ELSE MonthName[month])
    VAR r: Array<String> := ["\(title:^21)", "Su Mo Tu We Th Fr Sa "]
    FOR i := 1 TO 6*7 DO
        IF dt.weekday = 7 THEN
            r.append("")
        END IF
        IF dt.month = month THEN
            r[r.size()-1].append("\(dt.day:>2d) ")
        ELSE
            r[r.size()-1].append("   ")
        END IF
        p.days := 1
        dt := dt.plusPeriod(p)
    END FOR
    RETURN r
END FUNCTION

FUNCTION main(args: Array<String>)

    VAR month, year: Number := 0
    VAR options: Dictionary<Boolean> := {}

    FOREACH a IN args[1 TO LAST] DO
        IF a[0] = "-" THEN
            options[a] := TRUE
        ELSIF year = 0 THEN
            year := num(a)
        ELSE
            month := year
            year := num(a)
        END IF
    END FOREACH

    IF year = 0 THEN
        LET today: datetime.DateTime := datetime.now()
        year := today.year
        IF "-y" NOT IN options THEN
            month := today.month
        END IF
    END IF

    IF month > 0 THEN
        IF "-3" IN options THEN
            LET months: Array<Array<String>> := [
                (IF month > 1 THEN build_month(year, month-1, TRUE) ELSE build_month(year-1, 12, TRUE)),
                build_month(year, month, TRUE),
                (IF month < 12 THEN build_month(year, month+1, TRUE) ELSE build_month(year+1, 1, TRUE)),
            ]
            FOR line := 0 TO 7 DO
                VAR s: String := ""
                FOR col := 0 TO 2 DO
                    s.append(months[col][line] & "  ")
                END FOR
                print(s)
            END FOR
        ELSE
            LET grid: Array<String> := build_month(year, month, TRUE)
            FOREACH s IN grid DO
                print(s)
            END FOREACH
        END IF
    ELSE
        VAR months: Array<Array<String>> := []
        FOR m := 1 TO 12 DO
            months.append(build_month(year, m, FALSE))
        END FOR
        print("\(year:^66)")
        print("")
        FOR row := 0 TO 3 DO
            FOR line := 0 TO 7 DO
                VAR s: String := ""
                FOR col := 0 TO 2 DO
                    s.append(months[3*row+col][line] & "  ")
                END FOR
                print(s)
            END FOR
        END FOR
    END IF
END FUNCTION

main(sys.args)
