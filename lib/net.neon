--  File: net
--
--  Functions for working with network sockets.

EXPORT Socket
EXPORT SocketException

EXPORT select
EXPORT tcpSocket
EXPORT udpSocket

--  Exception: SocketException
--
--  Indicates some kind of socket error.
EXCEPTION SocketException

TYPE Handle IS Number

--  Type: Socket
--
--  Opaque type representing a network socket.
TYPE Socket IS RECORD
    PRIVATE handle: Handle
END RECORD

--  Function: tcpSocket
--
--  Create a new TCP/IP (stream) socket.
DECLARE NATIVE FUNCTION tcpSocket(): Socket
DECLARE NATIVE FUNCTION udpSocket(): Socket

DECLARE NATIVE FUNCTION socket_accept(handle: Handle): Socket
DECLARE NATIVE FUNCTION socket_bind(handle: Handle, address: String, port: Number)
DECLARE NATIVE FUNCTION socket_close(handle: Handle)
DECLARE NATIVE FUNCTION socket_connect(handle: Handle, host: String, port: Number)
DECLARE NATIVE FUNCTION socket_listen(handle: Handle, port: Number)
DECLARE NATIVE FUNCTION socket_recv(handle: Handle, count: Number): Bytes
DECLARE NATIVE FUNCTION socket_recvfrom(handle: Handle, count: Number, OUT remote_address: String, OUT remote_port: Number): Bytes
DECLARE NATIVE FUNCTION socket_send(handle: Handle, data: Bytes)
DECLARE NATIVE FUNCTION socket_select(INOUT read, write, error: Array<Socket>, timeout_seconds: Number): Boolean

--  Function: select
--
--  Select sockets with pending activity subject to an optional timeout.
FUNCTION select(INOUT read, write, error: Array<Socket>, timeout_seconds: Number): Boolean
    -- TODO: This function works around some problem with calling a predefined
    -- function with an Array<Socket> parameter.
    RETURN socket_select(INOUT read, INOUT write, INOUT error, timeout_seconds)
END FUNCTION

--  Function: Socket.accept
--
--  Accept an incoming connection request on a socket and returns a new socket.
FUNCTION Socket.accept(self: Socket): Socket
    RETURN socket_accept(self.handle)
END FUNCTION

--  Function: Socket.bind
--
--  Bind a socket to an address and port number.
FUNCTION Socket.bind(self: Socket, address: String, port: Number)
    socket_bind(self.handle, address, port)
END FUNCTION

--  Function: Socket.close
--
--  Close a socket.
FUNCTION Socket.close(self: Socket)
    socket_close(self.handle)
END FUNCTION

--  Function: Socket.connect
--
--  Connect a socket to a given host and port.
FUNCTION Socket.connect(self: Socket, host: String, port: Number)
    socket_connect(self.handle, host, port)
END FUNCTION

--  Function: Socket.listen
--
--  Listen for incoming connections on a specific port.
FUNCTION Socket.listen(self: Socket, port: Number)
    socket_listen(self.handle, port)
END FUNCTION

--  Function: Socket.recv
--
--  Receive (read) bytes from a socket.
FUNCTION Socket.recv(self: Socket, count: Number): Bytes
    RETURN socket_recv(self.handle, count)
END FUNCTION

--  Function: Socket.recvfrom
--
--  Receive (read) bytes from a socket, also returning the remote address where they came from.
FUNCTION Socket.recvfrom(self: Socket, count: Number, OUT remote_address: String, OUT remote_port: Number): Bytes
    RETURN socket_recvfrom(self.handle, count, OUT remote_address, OUT remote_port)
END FUNCTION

--  Function: Socket.send
--
--  Send (write) bytes to a socket.
FUNCTION Socket.send(self: Socket, data: Bytes)
    socket_send(self.handle, data)
END FUNCTION
