/*  File: net
 *
 *  Functions for working with network sockets.
 */

EXPORT Socket
EXPORT SocketException

EXPORT select
EXPORT tcpSocket
EXPORT udpSocket

/*  Exception: SocketException
 *
 *  Indicates some kind of socket error.
 */
EXCEPTION SocketException

/*  Type: Socket
 *
 *  Opaque type representing a network socket.
 */
TYPE Socket IS Object

DECLARE NATIVE FUNCTION socket_accept(socket: Socket): Socket
DECLARE NATIVE FUNCTION socket_bind(socket: Socket, address: String, port: Number)
DECLARE NATIVE FUNCTION socket_close(socket: Socket)
DECLARE NATIVE FUNCTION socket_connect(socket: Socket, host: String, port: Number)
DECLARE NATIVE FUNCTION socket_listen(socket: Socket, port: Number)
DECLARE NATIVE FUNCTION socket_recv(socket: Socket, count: Number, OUT buffer: Bytes): Boolean
DECLARE NATIVE FUNCTION socket_recvfrom(socket: Socket, count: Number, OUT remote_address: String, OUT remote_port: Number, OUT buffer: Bytes): Boolean
DECLARE NATIVE FUNCTION socket_send(socket: Socket, data: Bytes)
DECLARE NATIVE FUNCTION socket_select(INOUT read, write, error: Array<Socket>, timeout_seconds: Number): Boolean
DECLARE NATIVE FUNCTION socket_tcpSocket(): Socket
DECLARE NATIVE FUNCTION socket_udpSocket(): Socket

/*  Function: tcpSocket
 *
 *  Create a new TCP/IP (stream) socket.
 */
FUNCTION tcpSocket(): Socket
    RETURN socket_tcpSocket()
END FUNCTION

/*  Function: udpSocket
 *
 *  Create a new UDP/IP (datagram) socket.
 */
FUNCTION udpSocket(): Socket
    RETURN socket_udpSocket()
END FUNCTION

/*  Function: select
 *
 *  Select sockets with pending activity subject to an optional timeout.
 */
FUNCTION select(INOUT read, write, error: Array<Socket>, timeout_seconds: Number): Boolean
    -- TODO: This function works around some problem with calling a predefined
    -- function with an Array<Socket> parameter.
    RETURN socket_select(INOUT read, INOUT write, INOUT error, timeout_seconds)
END FUNCTION

/*  Function: Socket.accept
 *
 *  Accept an incoming connection request on a socket and returns a new socket.
 */
FUNCTION Socket.accept(self: Socket): Socket
    RETURN socket_accept(self)
END FUNCTION

/*  Function: Socket.bind
 *
 *  Bind a socket to an address and port number.
 */
FUNCTION Socket.bind(self: Socket, address: String, port: Number)
    socket_bind(self, address, port)
END FUNCTION

/*  Function: Socket.close
 *
 *  Close a socket.
 */
FUNCTION Socket.close(self: Socket)
    socket_close(self)
END FUNCTION

/*  Function: Socket.connect
 *
 *  Connect a socket to a given host and port.
 */
FUNCTION Socket.connect(self: Socket, host: String, port: Number)
    socket_connect(self, host, port)
END FUNCTION

/*  Function: Socket.listen
 *
 *  Listen for incoming connections on a specific port.
 */
FUNCTION Socket.listen(self: Socket, port: Number)
    socket_listen(self, port)
END FUNCTION

/*  Function: Socket.recv
 *
 *  Receive (read) bytes from a socket.
 */
FUNCTION Socket.recv(self: Socket, count: Number, OUT buffer: Bytes): Boolean
    RETURN socket_recv(self, count, OUT buffer)
END FUNCTION

/*  Function: Socket.recvfrom
 *
 *  Receive (read) bytes from a socket, also returning the remote address where they came from.
 */
FUNCTION Socket.recvfrom(self: Socket, count: Number, OUT remote_address: String, OUT remote_port: Number, OUT buffer: Bytes): Boolean
    RETURN socket_recvfrom(self, count, OUT remote_address, OUT remote_port, OUT buffer)
END FUNCTION

/*  Function: Socket.send
 *
 *  Send (write) bytes to a socket.
 */
FUNCTION Socket.send(self: Socket, data: Bytes)
    socket_send(self, data)
END FUNCTION
