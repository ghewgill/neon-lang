/*  Module: base
 *
 *  Conversions from numbers to and from arbitrary bases.
 */

IMPORT math
IMPORT string

EXPORT CONSTANT Digits: String := "0123456789abcdefghijklmnopqrstuvwxyz"

EXPORT TYPE NumberResult IS CHOICE
    value: Number
    error: String
END CHOICE

EXPORT FUNCTION from(base: Number, digits: String): NumberResult
    CHECK base = math.trunc(base) AND 2 <= base <= 36 ELSE
        PANIC "invalid base: \(base)"
    END CHECK
    VAR r: Number := 0
    FOREACH c IN digits INDEX i DO
        LET d: string.FindResult := string.find(Digits, string.lower(c))
        CHECK d ISA string.FindResult.index ELSE
            RETURN NumberResult.error("invalid digit: \(c) at index \(i)")
        END CHECK
        r := r * base + d.index
    END FOREACH
    RETURN NumberResult.value(r)
END FUNCTION

EXPORT FUNCTION to(base: Number, value: Number): String
    CHECK base = math.trunc(base) AND 2 <= base <= 36 ELSE
        PANIC "invalid base: \(base)"
    END CHECK
    CHECK value = math.trunc(value) AND value >= 0 ELSE
        PANIC "value cannot be negative"
    END CHECK
    VAR r: String := ""
    VAR x: Number := value
    REPEAT
        r := Digits[x MOD base] & r
        x := x INTDIV base
    UNTIL x = 0
    RETURN r
END FUNCTION

EXPORT FUNCTION fromBinary(digits: String): NumberResult
    RETURN from(2, digits)
END FUNCTION

EXPORT FUNCTION fromOctal(digits: String): NumberResult
    RETURN from(8, digits)
END FUNCTION

EXPORT FUNCTION fromHex(digits: String): NumberResult
    RETURN from(16, digits)
END FUNCTION

EXPORT FUNCTION toBinary(value: Number): String
    RETURN to(2, value)
END FUNCTION

EXPORT FUNCTION toOctal(value: Number): String
    RETURN to(8, value)
END FUNCTION

EXPORT FUNCTION toHex(value: Number): String
    RETURN to(16, value)
END FUNCTION
