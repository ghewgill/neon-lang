EXPORT EXCEPTION SampleException

EXPORT TYPE Rec IS RECORD
    x: Number
    y: Number
    name: String
END RECORD

EXPORT TYPE Handle IS POINTER

EXPORT TYPE Callback1 IS FUNCTION()
EXPORT TYPE Callback2 IS FUNCTION(s: String)
EXPORT TYPE Callback3 IS FUNCTION(a, b: Number): Number

EXPORT DECLARE EXTENSION CONSTANT constNumber: Number
--EXPORT DECLARE EXTENSION VAR varNumber: Number

EXPORT DECLARE EXTENSION FUNCTION funcNothing()
EXPORT DECLARE EXTENSION FUNCTION funcBoolean(): Boolean
EXPORT DECLARE EXTENSION FUNCTION funcNumber(): Number
EXPORT DECLARE EXTENSION FUNCTION funcString(): String
EXPORT DECLARE EXTENSION FUNCTION funcBytes(): Bytes
EXPORT DECLARE EXTENSION FUNCTION funcArray(): Array<Number>
EXPORT DECLARE EXTENSION FUNCTION funcDictionary(): Dictionary<Number>
EXPORT DECLARE EXTENSION FUNCTION funcRecord(): Rec

EXPORT DECLARE EXTENSION FUNCTION funcInBoolean(n: Boolean): Boolean
EXPORT DECLARE EXTENSION FUNCTION funcInNumber(n: Number): Number
EXPORT DECLARE EXTENSION FUNCTION funcInString(n: String): String
EXPORT DECLARE EXTENSION FUNCTION funcInBytes(n: Bytes): Bytes

EXPORT DECLARE EXTENSION FUNCTION funcNumberAdd(x, y: Number): Number

EXPORT DECLARE EXTENSION FUNCTION funcArraySize(a: Array<Number>): Number

EXPORT DECLARE EXTENSION FUNCTION funcNumberOut(OUT x: Number)
EXPORT DECLARE EXTENSION FUNCTION funcNumberOut2(OUT x: Number, OUT y: Number)

EXPORT DECLARE EXTENSION FUNCTION setVarNumber(n: Number)
EXPORT DECLARE EXTENSION FUNCTION callback1(cb: Callback1)
EXPORT DECLARE EXTENSION FUNCTION callback2(cb: Callback2, s: String)
EXPORT DECLARE EXTENSION FUNCTION callback3(cb: Callback3, x, y: Number): Number
EXPORT DECLARE EXTENSION FUNCTION setCallback(cb: Callback3)
EXPORT DECLARE EXTENSION FUNCTION callback4(x, y: Number): Number
EXPORT DECLARE EXTENSION FUNCTION raiseException()

EXPORT DECLARE EXTENSION FUNCTION allocHandle(): Handle
EXPORT DECLARE EXTENSION FUNCTION freeHandle(h: Handle)
