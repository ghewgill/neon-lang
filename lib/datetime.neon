/*  File: datetime
 *
 *  Functions for date and time manipulation.
 */

EXPORT Instant
EXPORT DateTime
EXPORT Interval
EXPORT Period
EXPORT Duration
EXPORT now
EXPORT makeFromInstant
EXPORT makeFromParts

EXPORT MonthNames
EXPORT January
EXPORT February
EXPORT March
EXPORT April
EXPORT May
EXPORT June
EXPORT July
EXPORT August
EXPORT September
EXPORT October
EXPORT November
EXPORT December

EXPORT WeekdayNames
EXPORT Monday
EXPORT Tuesday
EXPORT Wednesday
EXPORT Thursday
EXPORT Friday
EXPORT Saturday
EXPORT Sunday

IMPORT math
IMPORT time

EXCEPTION TodoException

CONSTANT MonthNames := [
    "",
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
]
CONSTANT January  : Number := 1
CONSTANT February : Number := 2
CONSTANT March    : Number := 3
CONSTANT April    : Number := 4
CONSTANT May      : Number := 5
CONSTANT June     : Number := 6
CONSTANT July     : Number := 7
CONSTANT August   : Number := 8
CONSTANT September: Number := 9
CONSTANT October  : Number := 10
CONSTANT November : Number := 11
CONSTANT December : Number := 12

CONSTANT WeekdayNames := [
    "",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday",
]
CONSTANT Monday   : Number := 1
CONSTANT Tuesday  : Number := 2
CONSTANT Wednesday: Number := 3
CONSTANT Thursday : Number := 4
CONSTANT Friday   : Number := 5
CONSTANT Saturday : Number := 6
CONSTANT Sunday   : Number := 7

/*  Type: Instant
 *
 *  Represents a particular instant in global time.
 */
TYPE Instant IS Number

/*  Type: DateTime
 *
 *  Represents a particular instant in global time,
 *  broken down to components in UTC.
 *
 *  Fields:
 *      year - year
 *      month - month (1=January, 12=December)
 *      day - day
 *      weekday - weekday (1=Monday, 7=Sunday)
 *      hour - hour
 *      minute - minute
 *      second - second
 */
TYPE DateTime IS RECORD
    instant: Instant
    year: Number
    month: Number
    day: Number
    weekday: Number
    hour: Number
    minute: Number
    second: Number
END RECORD

/*  Type: Interval
 *
 *  Represents a time period between a start and an end time.
 *
 *  Fields:
 *      start - start
 *      end - end
 */
TYPE Interval IS RECORD
    start: DateTime
    end: DateTime
END RECORD

/*  Type: Duration
 *
 *  Represents a specific amount of time measured in seconds.
 */
TYPE Duration IS Number

/*  Type: Period
 *
 *  Represents an amount of time measured by components.
 *
 *  Fields:
 *      years - years
 *      months - months
 *      days - days
 *      hours - hours
 *      minutes - minutes
 *      seconds - seconds
 */
TYPE Period IS RECORD
    years: Number
    months: Number
    days: Number
    hours: Number
    minutes: Number
    seconds: Number
END RECORD

TYPE struct_tm IS RECORD
    tm_sec: Number      -- seconds (0 - 60)
    tm_min: Number      -- minutes (0 - 59)
    tm_hour: Number     -- hours (0 - 23)
    tm_mday: Number     -- day of month (1 - 31)
    tm_mon: Number      -- month of year (0 - 11)
    tm_year: Number     -- year - 1900
    tm_wday: Number     -- day of week (Sunday = 0)
    tm_yday: Number     -- day of year (0 - 365)
    tm_isdst: Number    -- is summer time in effect?
END RECORD

DECLARE NATIVE FUNCTION gmtime(t: Number): struct_tm
DECLARE NATIVE FUNCTION timegm(tm: struct_tm): Number

/*  Function: now
 *
 *  Return the current timestamp as a <DateTime>.
 */
FUNCTION now(): DateTime
    RETURN makeFromInstant(time.now())
END FUNCTION

/*  Function: makeFromInstant
 *
 *  Convert a specific instant into a <DateTime> record.
 */
FUNCTION makeFromInstant(inst: Instant): DateTime
    LET tm: struct_tm := gmtime(inst)
    RETURN DateTime(
        instant WITH inst,
        year WITH 1900 + tm.tm_year,
        month WITH 1 + tm.tm_mon,
        day WITH tm.tm_mday,
        weekday WITH 1 + (tm.tm_wday + 6) MOD 7,
        hour WITH tm.tm_hour,
        minute WITH tm.tm_min,
        second WITH tm.tm_sec
    )
END FUNCTION

/*  Function: makeFromParts
 *
 *  Given timestamp parts, return a <DateTime> representing the instant.
 *  This function must be called after filling in an empty DateTime.
 */
FUNCTION makeFromParts(dt: DateTime): DateTime
    VAR tm: struct_tm := struct_tm()
    tm.tm_sec := dt.second
    tm.tm_min := dt.minute
    tm.tm_hour := dt.hour
    tm.tm_mday := dt.day
    tm.tm_mon := dt.month - 1
    tm.tm_year := dt.year - 1900
    RETURN makeFromInstant(timegm(tm))
END FUNCTION

/*  Function: makeFromString
 *
 *  Make a DateTime from a string representation.
 */
FUNCTION makeFromString(s: String): DateTime
    RAISE TodoException
END FUNCTION

/*  Function: DateTime.minusDuration
 *
 *  Subtract a <Duration> from a <DateTime> and return a new <DateTime>.
 */
FUNCTION DateTime.minusDuration(self: DateTime, duration: Duration): DateTime
    RETURN makeFromInstant(self.instant - duration)
END FUNCTION

/*  Function: DateTime.minusPeriod
 *
 *  Subtract a <Period> from a <DateTime> and return a new <DateTime>.
 */
FUNCTION DateTime.minusPeriod(self: DateTime, period: Period): DateTime
    RAISE TodoException
END FUNCTION

/*  Function: DateTime.plusDuration
 *
 *  Add a <Duration> to a <DateTime> and return a new <DateTime>.
 */
FUNCTION DateTime.plusDuration(self: DateTime, duration: Duration): DateTime
    RETURN makeFromInstant(self.instant + duration)
END FUNCTION

/*  Function: DateTime.plusPeriod
 *
 *  Add a <Period> to a <DateTime> and return a new <DateTime>.
 */
FUNCTION DateTime.plusPeriod(self: DateTime, period: Period): DateTime
    VAR dt: DateTime := self
    dt.year := dt.year + period.years
    LET m: Number := dt.month - 1 + period.months
    dt.year := dt.year + math.floor(m / 12)
    dt.month := 1 + (m MOD 12)
    RETURN makeFromParts(dt).plusDuration(86400*period.days + 3600*period.hours + 60*period.minutes + period.seconds)
END FUNCTION

/*  Function: DateTime.toString
 *
 *  Return an ISO 8601 formatted representation of a <DateTime>.
 */
FUNCTION DateTime.toString(self: DateTime): String
    RETURN "\(self.year:04d)-\(self.month:02d)-\(self.day:02d)T\(self.hour:02d):\(self.minute:02d):\(self.second:02d)Z"
END FUNCTION

/*  Function: DateTime.withDate
 *
 *  Return a new <DateTime> with the given year, month, and day based on
 *  an existing DateTime.
 */
FUNCTION DateTime.withDate(self: DateTime, year, month, day: Number): DateTime
    VAR dt: DateTime := self
    dt.year := year
    dt.month := month
    dt.day := day
    RETURN makeFromParts(dt)
END FUNCTION

/*  Function: DateTime.withYear
 *
 *  Return a new <DateTime> with the given year based on an existing DateTime.
 */
FUNCTION DateTime.withYear(self: DateTime, year: Number): DateTime
    VAR dt: DateTime := self
    dt.year := year
    RETURN makeFromParts(dt)
END FUNCTION

/*  Function: DateTime.withMonth
 *
 *  Return a new <DateTime> with the given month based on an existing DateTime.
 */
FUNCTION DateTime.withMonth(self: DateTime, month: Number): DateTime
    VAR dt: DateTime := self
    dt.month := month
    RETURN makeFromParts(dt)
END FUNCTION

/*  Function: DateTime.withDay
 *
 *  Return a new <DateTime> with the given day based on an existing DateTime.
 */
FUNCTION DateTime.withDay(self: DateTime, day: Number): DateTime
    VAR dt: DateTime := self
    dt.day := day
    RETURN makeFromParts(dt)
END FUNCTION

/*  Function: DateTime.withTime
 *
 *  Return a new <DateTime> with the given hour, minute, and second based on
 *  an existing DateTime.
 */
FUNCTION DateTime.withTime(self: DateTime, hour, minute, second: Number): DateTime
    VAR dt: DateTime := self
    dt.hour := hour
    dt.minute := minute
    dt.second := second
    RETURN makeFromParts(dt)
END FUNCTION

/*  Function: DateTime.withHour
 *
 *  Return a new <DateTime> with the given hour based on an existing DateTime.
 */
FUNCTION DateTime.withHour(self: DateTime, hour: Number): DateTime
    VAR dt: DateTime := self
    dt.hour := hour
    RETURN makeFromParts(dt)
END FUNCTION

/*  Function: DateTime.withMinute
 *
 *  Return a new <DateTime> with the given minute based on an existing DateTime.
 */
FUNCTION DateTime.withMinute(self: DateTime, minute: Number): DateTime
    VAR dt: DateTime := self
    dt.minute := minute
    RETURN makeFromParts(dt)
END FUNCTION

/*  Function: DateTime.withSecond
 *
 *  Return a new <DateTime> with the given second based on an existing DateTime.
 */
FUNCTION DateTime.withSecond(self: DateTime, second: Number): DateTime
    VAR dt: DateTime := self
    dt.second := second
    RETURN makeFromParts(dt)
END FUNCTION
