--  File: file
--
--  Functions for working with files and directories.

EXPORT FileException

EXPORT Separator

EXPORT FileType
EXPORT FileInfo

EXPORT copy
EXPORT copyOverwriteIfExists
EXPORT delete
EXPORT exists
EXPORT files
EXPORT getInfo
EXPORT isDirectory
EXPORT mkdir
EXPORT pathJoin
EXPORT pathSplit
EXPORT readBytes
EXPORT readLines
EXPORT removeDirectoryTree
EXPORT removeEmptyDirectory
EXPORT rename
EXPORT symlink
EXPORT writeBytes
EXPORT writeLines

DECLARE NATIVE CONSTANT Separator: String

--  Exception: FileException
--
--  Generic file error.
EXCEPTION FileException

--  Exception: FileException.DirectoryExists
--
--  Indicates that a directory already exists when calling <mkdir>.
EXCEPTION FileException.DirectoryExists

--  Exception: FileException.Exists
--
--  Indicates that a an attempt was made to create, or overwrite an existing file.
EXCEPTION FileException.Exists

--  Exception: FileException.Open
--
--  Indicates that an error occurred when opening a file.
EXCEPTION FileException.Open

--  Exception: FileException.PathNotFound
--
--  Indicates that a path was not found.
EXCEPTION FileException.PathNotFound

--  Exception: FileException.PermissionDenied
--
--  Indicates that an operation was denied due to filesystem permissions.
EXCEPTION FileException.PermissionDenied

--  Exception: FileException.Write
--
--  Indicates that an error occurred while writing to a file.
EXCEPTION FileException.Write

--  Type: FileType
--
--  Various types of directory entries.
TYPE FileType IS ENUM
    normal
    directory
    special
END ENUM

--  Type: FileInfo
--
--  Holds file information returned by <getInfo>.
TYPE FileInfo IS RECORD
    name: String
    size: Number
    readable: Boolean
    writable: Boolean
    executable: Boolean
    type: FileType
    creationTime: Number -- TODO: use datetime.Instant for these
    lastAccessTime: Number
    lastModificationTime: Number
END RECORD

--  Function: copy
--
--  Copies a file to a new destination.  If the destination file already exists, a FileException.Exists
--  is raised, and the file is not copied.
--
--  Exceptions:
--      - <FileException.Exists> - If the file provided by the destination parameter already exists.
--
--  See Also:
--      <copyOverwriteIfExists>
--      <exists>
--      <delete>
--
--  Example:
--      > TRY
--      >     file.copy("LICENSE.txt", "tmp/Copy_of_LICENSE.txt")
--      > TRAP file.FileException.Exists DO
--      >     print("File copy failed.  Destination file already exists.")
--      > END TRY
--
DECLARE NATIVE FUNCTION copy(filename: String, destination: String)

--  Function: copyOverwriteIfExists
--
--  Copies a file to a new destination.  If the destination file exists, it will be overwritten.
--  If the destination file does not exist, it will be created.
--
--  See Also:
--      <copy>
--
--  Example:
--      > file.copyOverwriteIfExists("LICENSE.txt", "tmp/Copy_of_LICENSE.txt")
--
DECLARE NATIVE FUNCTION copyOverwriteIfExists(filename: String, destination: String)

--  Function: delete
--
--  Delete a file. This function does not raise an exception
--  if the file does not exist.
--
--  Exceptions:
--      - <FileException.PermissionDenied> - if the file permissions prevent the operation
DECLARE NATIVE FUNCTION delete(filename: String)

--  Function: exists
--
--  Check to see whether a name exists in the filesystem.
--  The name may refer to either a file or a directory.
DECLARE NATIVE FUNCTION exists(filename: String): Boolean

--  Function: files
--
--  Given a path name, return an array containing the names of the files in that directory.
DECLARE NATIVE FUNCTION files(path: String): Array<String>

--  Functions: getInfo
--
--  Given a file name, return the file information.
DECLARE NATIVE FUNCTION getInfo(name: String): FileInfo

--  Function: isDirectory
--
--  Similar to <exists>, but only returns TRUE if the path actually is a directory.
DECLARE NATIVE FUNCTION isDirectory(path: String): Boolean

--  Function: mkdir
--
--  Create a new directory with the given name.
--
--  Exceptions:
--      - <FileException.PermissionDenied> - if the file permissions prevent the operation
--      - <FileException.DirectoryExists> - if the directory already exists
--      - <FileException.PathNotFound> - if the path (not including the last component) does not exist
DECLARE NATIVE FUNCTION mkdir(path: String)

--  Function: pathJoin
--
--  Join components of a path using the <Separator> characters appropriate for the OS.
FUNCTION pathJoin(first, second: String): String
    IF first = "" THEN
        RETURN second
    END IF
    IF second = "" THEN
        RETURN first
    END IF
    IF second[FIRST] IN ["/", Separator] THEN
        RETURN second
    END IF
    IF first[LAST] IN ["/", Separator] THEN
        RETURN first & second
    ELSE
        RETURN first & Separator & second
    END IF
END FUNCTION

--  Function: pathSplit
--
--  Split a path into directory and name parts.
FUNCTION pathSplit(path: String, OUT directory, name: String)
    FOR i := path.length() - 1 TO 0 STEP -1 DO
        IF path[i] IN ["/", Separator] THEN
            directory := path[FIRST TO i-1]
            name := path[i+1 TO LAST]
            EXIT FUNCTION
        END IF
    END FOR
    directory := ""
    name := path
END FUNCTION

--  Function: readBytes
--
--  Read the contents of a file into <Bytes>.
--
--  Exceptions:
--      - <FileOpenError> - if the file cannot be opened
DECLARE NATIVE FUNCTION readBytes(filename: String): Bytes

--  Function: readLines
--
--  Read the lines of a file into an array of <Strings>.
--
--  Exceptions:
--      - <FileOpenError> - if the file cannot be opened
DECLARE NATIVE FUNCTION readLines(filename: String): Array<String> 

--  Function: removeDirectoryTree
--
--  Remove directory tree recursively.
FUNCTION removeDirectoryTree(path: String)
    LET names: Array<String> := files(path)
    FOREACH name IN names DO
        IF name IN [".", ".."] THEN
            NEXT FOREACH
        END IF
        LET pathname: String := pathJoin(path, name)
        IF isDirectory(name) THEN
            removeDirectoryTree(pathname)
        ELSE
            delete(pathname)
        END IF
    END FOREACH
    removeEmptyDirectory(path)
END FUNCTION

--  Function: removeEmptyDirectory
--
--  Remove an empty directory.
DECLARE NATIVE FUNCTION removeEmptyDirectory(path: String)

--  Function: rename
--
--  Rename a file. This function can also be used to move a file from
--  one directory to another.
--
--  Exceptions:
--      - <PathNotFound> - if the file does not exist
DECLARE NATIVE FUNCTION rename(oldname: String, newname: String)

--  Function: symlink
--
--  Create a symlink named newlink that points to target.
--
--  Exceptions:
--      - <PathNotFound> - if the path does not exist
DECLARE NATIVE FUNCTION symlink(target: String, newlink: String, targetIsDirectory: Boolean DEFAULT FALSE)

--  Function: writeBytes
--
--  Write a complete file from data in <Bytes>.
--
--  Exceptions:
--      - <FileOpenError> - if the file cannot be opened
--      - <FileWriteError> - if an error occurs during writing
DECLARE NATIVE FUNCTION writeBytes(filename: String, data: Bytes)

--  Function: writeLines
--
--  Write a complete file from lines of text in an array.
--
--  Exceptions:
--      - <FileOpenError> - if the file cannot be opened
--      - <FileWriteError> - if an error occurs during writing
DECLARE NATIVE FUNCTION writeLines(filename: String, data: Array<String>)
