/*  File: http
 *
 *  Functions for making HTTP requests.
 */
IMPORT net
IMPORT string

EXPORT get
EXPORT post
EXPORT setRequireValidCertificate

EXPORT HttpResponse
EXPORT HttpResult

TYPE HttpResponse IS RECORD
    code: Number
    codeName: String
    headers: Array<String>
    data: Bytes
END RECORD

TYPE HttpResult IS CHOICE
    response: HttpResponse
    error: String
END CHOICE

TYPE UrlParts IS RECORD
    scheme: String
    server: String
    port: Number
    path: String
END RECORD

TYPE DecomposeResult IS CHOICE
    parts: UrlParts
    error: String
END CHOICE

VAR g_validateMode: net.TlsPeerValidateMode := net.TlsPeerValidateMode.RequireValidCertificate

/*  Function: get
 *
 *  Perform an HTTP GET operation with the specified url.
 *
 *  Parameters:
 *      url - the url
 *      headers - the response headers from the server
 */
FUNCTION get(url: String, requestHeaders: Dictionary<String>): HttpResult
    RETURN exec("GET", url, "", requestHeaders)
END FUNCTION

/*  Function: post
 *
 *  Perform an HTTP POST operation with the specified url and post data.
 *
 *  Parameters:
 *      url - the url
 *      post_data - the body of the POST request
 *      headers - the response headers from the server
 */
FUNCTION post(url: String, post_data: String, requestHeaders: Dictionary<String>): HttpResult
    RETURN exec("POST", url, post_data, requestHeaders)
END FUNCTION

/*  Function: setRequireValidCertificate
 *
 *  Set whether certificate validation is required for HTTPS requests.
 *  Note: Turning off certificate validation is a security concern.
 *
 *  Parameters:
 *      requireValid - TRUE if certificate validation is required
 */
FUNCTION setRequireValidCertificate(requireValid: Boolean)
    g_validateMode := (IF requireValid THEN net.TlsPeerValidateMode.RequireValidCertificate ELSE net.TlsPeerValidateMode.AllowInvalidCertificate)
END FUNCTION

FUNCTION exec(method: String, url: String, post_data: String, requestHeaders: Dictionary<String>): HttpResult
    LET dcr := decomposeUrl(url)
    CHECK dcr ISA DecomposeResult.parts ELSE
        RETURN HttpResult.error(dcr.error)
    END CHECK
    LET scheme := dcr.parts.scheme
    LET server := dcr.parts.server
    LET port := dcr.parts.port
    LET path := dcr.parts.path
    LET s: net.Socket := (IF scheme = "https" THEN net.tlsClientSocket(validateMode WITH g_validateMode) ELSE net.tcpSocket())
    s.connect(server, port)
    VAR request: String := "\(method) \(path) HTTP/1.0\r\n"
    request.append("Host: \(server)\r\n")
    IF method = "POST" THEN
        request.append("Content-Length: \(post_data.length())\r\n")
    END IF
    FOREACH h IN requestHeaders.keys() DO
        request.append("\(h): \(requestHeaders[h])\r\n")
    END FOREACH
    request.append("\r\n")
    s.send(request.encodeUTF8())
    IF method = "POST" THEN
        s.send(post_data.encodeUTF8())
    END IF
    VAR response: Bytes := HEXBYTES ""
    LOOP
        LET r := s.recv(1024)
        CHECK r ISA net.RecvResult.data ELSE
            EXIT LOOP
        END CHECK
        response := response & r.data
    END LOOP
    VAR responseHeaders: Array<String> := []
    VAR i: Number := 0
    LET status: String := nextLine(response, INOUT i)
    LOOP
        LET header: String := nextLine(response, INOUT i)
        IF header = "" THEN
            EXIT LOOP
        END IF
        responseHeaders.append(header)
    END LOOP
    s.close()
    LET a := string.split(status, " ")
    LET pr := parseNumber(a[1])
    CHECK pr ISA ParseNumberResult.number ELSE
        RETURN HttpResult.error("bad http result code: " & pr.error)
    END CHECK
    LET code := pr.number
    LET codeName := string.join(a[2 TO LAST], " ")
    RETURN HttpResult.response(HttpResponse(
        code WITH code,
        codeName WITH codeName,
        headers WITH responseHeaders,
        data WITH response[i TO LAST]
    ))
END FUNCTION

FUNCTION decomposeUrl(url: String): DecomposeResult
    LET schemecolon: string.FindResult := string.find(url, ":")
    CHECK schemecolon ISA string.FindResult.index ELSE
        RETURN DecomposeResult.error("url format error")
    END CHECK
    LET scheme: String := url[FIRST TO schemecolon.index-1]
    CHECK scheme IN ["http", "https"] ELSE
        RETURN DecomposeResult.error("url scheme not supported")
    END CHECK
    CHECK url[schemecolon.index TO schemecolon.index+2] = "://" ELSE
        RETURN DecomposeResult.error("url format error")
    END CHECK
    LET tail: String := url[schemecolon.index+3 TO LAST]
    LET slash: string.FindResult := string.find(tail, "/")
    CHECK slash ISA string.FindResult.index ELSE
        RETURN DecomposeResult.error("url format error")
    END CHECK
    VAR parts: UrlParts := UrlParts(scheme WITH scheme, port WITH (IF scheme = "https" THEN 443 ELSE 80))
    LET portcolon: string.FindResult := string.find(tail, ":")
    CASE portcolon
        WHEN ISA string.FindResult.notfound DO
            parts.server := tail[FIRST TO slash.index-1]
        WHEN ISA string.FindResult.index DO
            parts.server := tail[FIRST TO portcolon.index-1]
            IF portcolon.index < slash.index THEN
                LET pr := parseNumber(tail[portcolon.index+1 TO slash.index-1])
                CHECK pr ISA ParseNumberResult.number ELSE
                    RETURN DecomposeResult.error("bad port number: " & pr.error)
                END CHECK
                parts.port := pr.number
            END IF
    END CASE
    parts.path := tail[slash.index TO LAST]
    RETURN DecomposeResult.parts(parts)
END FUNCTION

FUNCTION nextLine(buf: Bytes, INOUT i: Number): String
    LET a: Array<Number> := buf.toArray()
    LET start: Number := i
    VAR lastchar: Number := i-1
    WHILE string.fromCodePoint(a[i]) <> "\n" DO
        IF string.fromCodePoint(a[i]) <> "\r" THEN
            lastchar := i
        END IF
        INC i
    END WHILE
    INC i
    RETURN buf[start TO lastchar].decodeUTF8().expectString()
END FUNCTION

BEGIN MAIN
    FUNCTION check(url: String, scheme: String, server: String, port: Number, path: String)
        LET dcr := decomposeUrl(url)
        CHECK dcr ISA DecomposeResult.parts ELSE
            PANIC "Test failed"
        END CHECK
        TESTCASE dcr.parts.scheme = scheme
        TESTCASE dcr.parts.server = server
        TESTCASE dcr.parts.port = port
        TESTCASE dcr.parts.path = path
    END FUNCTION
    check("http://hello/world", "http", "hello", 80, "/world")
    check("http://hello:1234/world", "http", "hello", 1234, "/world")
    check("https://hello/world", "https", "hello", 443, "/world")

    VAR x: String := "hello\r\nworld\r\n\r\n"
    VAR b: Bytes := x.encodeUTF8()
    VAR i: Number := 0
    TESTCASE nextLine(b, INOUT i) = "hello"
    TESTCASE i = 7
    TESTCASE nextLine(b, INOUT i) = "world"
    TESTCASE i = 14
    TESTCASE nextLine(b, INOUT i) = ""
    TESTCASE i = 16

    LET r := get("http://neverssl.com/", {})
    CHECK r ISA HttpResult.response ELSE
        PANIC "Test failed"
    END CHECK
    print("code=\(r.response.code) \(r.response.codeName)")
    FOREACH h IN r.response.headers DO
        print(h)
    END FOREACH
    print("size=\(r.response.data.size())")
END MAIN
