/*  File: string
 *
 *  Functions for common string operations.
 */

EXPORT find
EXPORT format
EXPORT fromCodePoint
EXPORT hasPrefix
EXPORT hasSuffix
EXPORT isBlank
EXPORT join
EXPORT lower
EXPORT quoted
EXPORT repeat
EXPORT replaceAll
EXPORT replaceOne
EXPORT split
EXPORT splitLines
EXPORT toCodePoint
EXPORT trim
EXPORT trimCharacters
EXPORT upper

/*  Function: find
 *
 *  Find the index of a string within another.
 */
DECLARE NATIVE FUNCTION find(s: String, t: String): Number

/*  Function: format
 *
 *  Format a string based on the formatting mini-language.
 *
 *  TODO
 */
FUNCTION format(s: String, fmt: String): String
    VAR fill: String := " "
    VAR align: String := ""
    VAR sign: String := ""
    VAR width: Number := -1
    VAR thousands: Boolean := FALSE
    VAR precision: Number := -1
    VAR type: String := ""

    VAR i: Number := 0
    IF i < fmt.length() AND fmt[i] IN ["<", ">", "=", "^"] THEN
        align := fmt[i]
        INC i
    END IF
    IF i < fmt.length() AND fmt[i] IN ["+", "-", " "] THEN
        sign := fmt[i]
        INC i
    END IF
    IF i < fmt.length() AND fmt[i] = "0" THEN
        fill := fmt[i]
        INC i
        IF align = "" THEN
            align := "="
        END IF
    END IF
    LET start: Number := i
    WHILE i < fmt.length() AND "0" <= fmt[i] <= "9" DO
        INC i
    END WHILE
    IF i > start THEN
        width := num(fmt[start TO i-1])
    END IF
    IF i < fmt.length() AND fmt[i] = "," THEN
        thousands := TRUE
        INC i
    END IF
    IF i < fmt.length() AND fmt[i] = "." THEN
        INC i
        LET pstart: Number := i
        WHILE i < fmt.length() AND "0" <= fmt[i] <= "9" DO
            INC i
        END WHILE
        IF i > pstart THEN
            precision := num(fmt[pstart TO i-1])
        END IF
    END IF
    IF i < fmt.length() THEN
        type := fmt[i]
    END IF
    CASE type
        WHEN "", "s" DO
            IF sign <> "" OR align = "=" THEN
                RAISE FormatException
            END IF
        WHEN "d", "x" DO
            -- pass
        WHEN OTHERS DO
            RAISE FormatException
    END CASE

    VAR r: String := s
    CASE type
        WHEN "d" DO
            _ := num(s)
        WHEN "x" DO
            VAR x: Number := num(s)
            r := ""
            IF x = 0 THEN
                r := "0"
            ELSE
                WHILE x <> 0 DO
                    CONSTANT hexdigit: String := "0123456789abcdef"
                    r := hexdigit[x MOD 16] & r
                    x := x INTDIV 16
                END WHILE
            END IF
    END CASE
    IF precision >= 0 AND r.length() > precision THEN
        r := r[FIRST TO precision-1]
    END IF
    IF width >= 0 THEN
        IF r.length() < width THEN
            LET space: Number := width - r.length()
            IF align = "" THEN
                IF type IN ["d", "x"] THEN
                    align := ">"
                ELSE
                    align := "<"
                END IF
            END IF
            IF align = "<" THEN
                r.append(repeat(fill, space))
            ELSIF align IN [">", "="] THEN
                r := repeat(fill, space) & r
            ELSIF align = "^" THEN
                r := repeat(fill, space INTDIV 2) & r & repeat(fill, space - space INTDIV 2)
            END IF
        END IF
    END IF
    RETURN r
END FUNCTION

/*  Function: fromCodePoint
 *
 *  Return a string containing the single code point.
 */
DECLARE NATIVE FUNCTION fromCodePoint(code: Number): String

/*  Function: hasPrefix
 *
 *  Return TRUE if a string has a specific prefix.
 */
FUNCTION hasPrefix(s: String, prefix: String): Boolean
    RETURN prefix.length() <= s.length() AND s[FIRST TO prefix.length()-1] = prefix
END FUNCTION

/*  Function: hasSuffix
 *
 *  Return TRUE if a string has a specific suffix.
 */
FUNCTION hasSuffix(s: String, suffix: String): Boolean
    RETURN suffix.length() <= s.length() AND s[LAST-(suffix.length()-1) TO LAST] = suffix
END FUNCTION

/*  Function: isBlank
 *
 *  Return TRUE if a string is empty or contains only whitespace.
 */
FUNCTION isBlank(s: String): Boolean
    FOREACH c IN s DO
        IF c NOT IN [" ", "\t"] THEN
            RETURN FALSE
        END IF
    END FOREACH
    RETURN TRUE
END FUNCTION

/*  Function: join
 *
 *  Join an array of strings together using the given delimiter.
 */
FUNCTION join(a: Array<String>, d: String): String
    VAR r: String := ""
    FOREACH s IN a DO
        IF r.length() > 0 THEN
            r.append(d)
        END IF
        r.append(s)
    END FOREACH
    RETURN r
END FUNCTION

/*  Function: lower
 *
 *  Return a string with all alphabetic characters converted to lower case.
 */
DECLARE NATIVE FUNCTION lower(s: String): String

/*  Function: quoted
 *
 *  Return a string that is a quoted version of the passed string, with enclosing quotes.
 */
DECLARE NATIVE FUNCTION quoted(s: String): String

/*  Function: repeat
 *
 *  Return a string with a given string repeated the specified number of times.
 */
FUNCTION repeat(s: String, n: Number): String
    CHECK n >= 0 ELSE
        RAISE InvalidValueException
    END CHECK
    VAR r: String := ""
    VAR t: String := s
    VAR b: Number := n
    WHILE b > 0 DO
        IF b MOD 2 = 1 THEN
            r.append(t)
        END IF
        t.append(t)
        b := b INTDIV 2
    END WHILE
    RETURN r
END FUNCTION

/*  Function: replaceAll
 *
 *  Return a string with all instances of a given string replaced by another string.
 */
FUNCTION replaceAll(s: String, target: String, replacement: String): String
    -- TODO: This can be improved with a findFrom function, which will allow
    -- us to search for the next instance of target more efficiently than
    -- extracting a substring at each position.
    IF target = "" THEN
        RETURN s
    END IF
    VAR t: String := s
    VAR i: Number := 0
    WHILE i <= t.length()-target.length() DO
        IF t[i TO i+target.length()-1] = target THEN
            t := t[FIRST TO i-1] & replacement & (IF i+target.length() < t.length() THEN t[i+target.length() TO LAST] ELSE "")
            i := i + replacement.length()
        ELSE
            INC i
        END IF
    END WHILE
    RETURN t
END FUNCTION

/*  Function: replaceOne
 *
 *  Return a string the first instance of a given string replaced by another string.
 */
FUNCTION replaceOne(s: String, target: String, replacement: String): String
    LET i: Number := find(s, target)
    CHECK i >= 0 ELSE
        RETURN s
    END CHECK
    RETURN s[FIRST TO i-1] & replacement & s[i+target.length() TO LAST]
END FUNCTION

/*  Function: split
 *
 *  Split a string into parts using the given delimiter.
 */
DECLARE NATIVE FUNCTION split(s: String, d: String): Array<String>

/*  Function: splitLines
 *
 *  Split a string into lines using any of CRLF or CR or LF line endings.
 */
DECLARE NATIVE FUNCTION splitLines(s: String): Array<String>

/*  Function: toCodePoint
 *
 *  Return the Unicode code point of a given character.
 *  The input string must be a single character.
 */
DECLARE NATIVE FUNCTION toCodePoint(s: String): Number

/*  Function: trimCharacters
 *
 *  Trim given characters from the start and end of a string.
 */
DECLARE NATIVE FUNCTION trimCharacters(s: String, trimLeadingChars, trimTrailingChars: String): String

/*  Function: trim
 *
 *  Trim spaces from the start and end of a string.
 */
FUNCTION trim(s: String): String
    RETURN trimCharacters(s, " ", " ")
END FUNCTION

/*  Function: upper
 *
 *  Return a string with all alphabetic characters converted to upper case.
 */
DECLARE NATIVE FUNCTION upper(s: String): String
