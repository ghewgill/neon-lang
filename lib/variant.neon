%|
 |  File: variant
 |
 |  Provides a general-purpose type that can hold values of any other type.
 |%

EXPORT Variant
EXPORT Type
EXPORT TypeMismatchException
EXPORT makeNull
EXPORT makeBoolean
EXPORT makeNumber
EXPORT makeString
EXPORT makeBytes
EXPORT makeArray
EXPORT makeDictionary

%|
 |  Exception: TypeMismatchException
 |
 |  Indicates an attempt to read a value of the wrong type from a <Variant>.
 |%
DECLARE EXCEPTION TypeMismatchException

%|
 |  Enumeration: Type
 |
 |  The type of a variant value.
 |
 |  Values:
 |      null - null value
 |      boolean - boolean
 |      number - number
 |      string - string
 |      bytes - bytes
 |      array - array
 |      dictionary - dictionary
 |%
TYPE Type IS ENUM
    null
    boolean
    number
    string
    bytes
    array
    dictionary
END ENUM

%|
 |  Type: Variant
 |
 |  Opaque variant type.
 |%
TYPE Variant IS RECORD
    PRIVATE type: Type
    PRIVATE val_boolean: Boolean
    PRIVATE val_number: Number
    PRIVATE val_string: String
    PRIVATE val_bytes: Bytes
    PRIVATE val_array: Array<Variant>
    PRIVATE val_dictionary: Dictionary<Variant>
END RECORD

%|
 |  Function: makeNull
 |
 |  Make a <Variant> with a null value.
 |%
FUNCTION makeNull(): Variant
    VAR r: Variant := Variant()
    r.setNull()
    RETURN r
END FUNCTION

%|
 |  Function: makeBoolean
 |
 |  Make a <Variant> with a boolean value.
 |%
FUNCTION makeBoolean(b: Boolean): Variant
    VAR r: Variant := Variant()
    r.setBoolean(b)
    RETURN r
END FUNCTION

%|
 |  Function: makeNumber
 |
 |  Make a <Variant> with a number value.
 |%
FUNCTION makeNumber(n: Number): Variant
    VAR r: Variant := Variant()
    r.setNumber(n)
    RETURN r
END FUNCTION

%|
 |  Function: makeString
 |
 |  Make a <Variant> with a string value.
 |%
FUNCTION makeString(s: String): Variant
    VAR r: Variant := Variant()
    r.setString(s)
    RETURN r
END FUNCTION

%|
 |  Function: makeBytes
 |
 |  Make a <Variant> with a bytes value.
 |%
FUNCTION makeBytes(b: Bytes): Variant
    VAR r: Variant := Variant()
    r.setBytes(b)
    RETURN r
END FUNCTION

%|
 |  Function: makeArray
 |
 |  Make a <Variant> with an array value.
 |%
FUNCTION makeArray(a: Array<Variant>): Variant
    VAR r: Variant := Variant()
    r.setArray(a)
    RETURN r
END FUNCTION

%|
 |  Function: makeDictionary
 |
 |  Make a <Variant> with a dictionary value.
 |%
FUNCTION makeDictionary(d: Dictionary<Variant>): Variant
    VAR r: Variant := Variant()
    r.setDictionary(d)
    RETURN r
END FUNCTION

%|
 |  Function: Variant.getType
 |
 |  Return the type of a variant.
 |%
FUNCTION Variant.getType(IN self: Variant): Type
    RETURN self.type
END FUNCTION

FUNCTION Variant.setNull(INOUT self: Variant)
    self.type := Type.null
END FUNCTION

%|
 |  Function: Variant.isNull
 |
 |  Return TRUE if the variant is a null value.
 |%
FUNCTION Variant.isNull(IN self: Variant): Boolean
    RETURN self.type = Type.null
END FUNCTION

FUNCTION Variant.setBoolean(INOUT self: Variant, b: Boolean)
    self.type := Type.boolean
    self.val_boolean := b
END FUNCTION

%|
 |  Function: Variant.getBoolean
 |
 |  Get a boolean value from a <Variant>.
 |%
FUNCTION Variant.getBoolean(IN self: Variant): Boolean
    CHECK self.type = Type.boolean ELSE
        RAISE TypeMismatchException
    END CHECK
    RETURN self.val_boolean
END FUNCTION

FUNCTION Variant.setNumber(INOUT self: Variant, n: Number)
    self.type := Type.number
    self.val_number := n
END FUNCTION

%|
 |  Function: Variant.getNumber
 |
 |  Get a number value from a <Variant>.
 |%
FUNCTION Variant.getNumber(IN self: Variant): Number
    CHECK self.type = Type.number ELSE
        RAISE TypeMismatchException
    END CHECK
    RETURN self.val_number
END FUNCTION

FUNCTION Variant.setString(INOUT self: Variant, s: String)
    self.type := Type.string
    self.val_string := s
END FUNCTION

%|
 |  Function: Variant.getString
 |
 |  Get a string value from a <Variant>.
 |%
FUNCTION Variant.getString(IN self: Variant): String
    CHECK self.type = Type.string ELSE
        RAISE TypeMismatchException
    END CHECK
    RETURN self.val_string
END FUNCTION

FUNCTION Variant.setBytes(INOUT self: Variant, s: Bytes)
    self.type := Type.bytes
    self.val_bytes := s
END FUNCTION

%|
 |  Function: Variant.getBytes
 |
 |  Get a bytes value from a <Variant>.
 |%
FUNCTION Variant.getBytes(IN self: Variant): Bytes
    CHECK self.type = Type.bytes ELSE
        RAISE TypeMismatchException
    END CHECK
    RETURN self.val_bytes
END FUNCTION

FUNCTION Variant.setArray(INOUT self: Variant, a: Array<Variant>)
    self.type := Type.array
    self.val_array := a
END FUNCTION

%|
 |  Function: Variant.getArray
 |
 |  Get an array value from a <Variant>.
 |%
FUNCTION Variant.getArray(IN self: Variant): Array<Variant>
    CHECK self.type = Type.array ELSE
        RAISE TypeMismatchException
    END CHECK
    RETURN self.val_array
END FUNCTION

FUNCTION Variant.setDictionary(INOUT self: Variant, d: Dictionary<Variant>)
    self.type := Type.dictionary
    self.val_dictionary := d
END FUNCTION

%|
 |  Function: Variant.getDictionary
 |
 |  Get a dictionary value from a <Variant>.
 |%
FUNCTION Variant.getDictionary(IN self: Variant): Dictionary<Variant>
    CHECK self.type = Type.dictionary ELSE
        RAISE TypeMismatchException
    END CHECK
    RETURN self.val_dictionary
END FUNCTION

%|
 |  Function: Variant.toString
 |
 |  Return a string representation of a <Variant> value.
 |%
FUNCTION Variant.toString(IN self: Variant): String
    CASE self.type
        WHEN Type.null DO
            RETURN "null"
        WHEN Type.boolean DO
            RETURN (IF self.val_boolean THEN "true" ELSE "false")
        WHEN Type.number DO
            RETURN str(self.val_number)
        WHEN Type.string DO
            RETURN self.val_string
        WHEN Type.bytes DO
            RETURN "<bytes>"
        WHEN Type.array DO
            VAR r: String := "["
            FOR x IN self.val_array INDEX i DO
                IF i > 0 THEN
                    r.append(", ")
                END IF
                IF x.getType() = Type.string THEN
                    r.append("\"\(x)\"")
                ELSE
                    r.append(x.toString())
                END IF
            END FOR
            r.append("]")
            RETURN r
        WHEN Type.dictionary DO
            VAR r: String := "{"
            LET keys: Array<String> := self.val_dictionary.keys() % TODO: remove this temporary
            FOR x IN keys INDEX i DO
                IF i > 0 THEN
                    r.append(", ")
                END IF
                r.append("\"\(x)\": ")
                IF self.val_dictionary[x].getType() = Type.string THEN
                    r.append("\"\(self.val_dictionary[x])\"")
                ELSE
                    r.append(" \(self.val_dictionary[x])")
                END IF
            END FOR
            r.append("}")
            RETURN r
    END CASE
    RETURN "TODO"
END FUNCTION
