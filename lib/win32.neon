%|
 |  File: win32
 |
 |  Win32 API access functions.
 |%

EXPORT Beep
EXPORT DebugBreak
EXPORT FindClose
EXPORT FindFirstFile
EXPORT FindNextFile
EXPORT Handle
EXPORT WIN32_FIND_DATA

IMPORT struct

% Type: Handle
TYPE Handle IS POINTER

% Type: WIN32_FIND_DATA
TYPE WIN32_FIND_DATA IS RECORD
    dwFileAttributes: Number
    ftCreationTime: Number
    ftLastAccessTime: Number
    ftLastWriteTime: Number
    nFileSizeHigh: Number
    nFileSizeLow: Number
    dwReserved0: Number
    dwReserved1: Number
    cFileName: String
    cAlternateFileName: String
END RECORD

LET Struct_WIN32_FIND_DATA: struct.Struct := struct.make([
    struct.field("dwFileAttributes",    struct.Type.int32LE,  4),
    struct.field("ftCreationTime",      struct.Type.uint64LE, 8),
    struct.field("ftLastAccessTime",    struct.Type.uint64LE, 8),
    struct.field("ftLastWriteTime",     struct.Type.uint64LE, 8),
    struct.field("nFileSizeHigh",       struct.Type.int32LE,  4),
    struct.field("nFileSizeLow",        struct.Type.int32LE,  4),
    struct.field("dwReserved0",         struct.Type.int32LE,  4),
    struct.field("dwReserved1",         struct.Type.int32LE,  4),
    struct.field("cFileName",           struct.Type.string, 260),
    struct.field("cAlternateFileName",  struct.Type.string,  14),
])

FUNCTION WIN32_FIND_DATA.pack(self: WIN32_FIND_DATA): Bytes
    VAR d: Dictionary<Object> := {}
    d["dwFileAttributes"]   := self.dwFileAttributes
    d["ftCreationTime"]     := self.ftCreationTime
    d["ftLastAccessTime"]   := self.ftLastAccessTime
    d["ftLastWriteTime"]    := self.ftLastWriteTime
    d["nFileSizeHigh"]      := self.nFileSizeHigh
    d["nFileSizeLow"]       := self.nFileSizeLow
    d["dwReserved0"]        := self.dwReserved0
    d["dwReserved1"]        := self.dwReserved1
    d["cFileName"]          := self.cFileName
    d["cAlternateFileName"] := self.cAlternateFileName
    RETURN Struct_WIN32_FIND_DATA.pack(d)
END FUNCTION

FUNCTION WIN32_FIND_DATA.unpack(INOUT self: WIN32_FIND_DATA, data: Bytes)
    LET d: Dictionary<Object> := Struct_WIN32_FIND_DATA.unpack(data)
    self.dwFileAttributes   := d["dwFileAttributes"]
    self.ftCreationTime     := d["ftCreationTime"]
    self.ftLastAccessTime   := d["ftLastAccessTime"]
    self.ftLastWriteTime    := d["ftLastWriteTime"]
    self.nFileSizeHigh      := d["nFileSizeHigh"]
    self.nFileSizeLow       := d["nFileSizeLow"]
    self.dwReserved0        := d["dwReserved0"]
    self.dwReserved1        := d["dwReserved1"]
    self.cFileName          := d["cFileName"]
    self.cAlternateFileName := d["cAlternateFileName"]
END FUNCTION

% Title: Win32 API Functions

% Function: Beep
FOREIGN FUNCTION Beep(dwFreq: Number, dwDuration: Number): Boolean
{
    "library": {"name": "kernel32"}
    "types": {
        "return": "boolean"
        "dwFreq": "uint32"
        "dwDuration": "uint32"
    }
}
END FUNCTION

% Function: DebugBreak
FOREIGN FUNCTION DebugBreak()
{
    "library": {"name": "kernel32"}
    "types": {}
}
END FUNCTION

% Function: FindClose
FOREIGN FUNCTION FindClose(hFindFile: Handle): Boolean
{
    "library": {"name": "kernel32"}
    "types": {
        "return": "boolean"
        "hFindFile": "pointer"
    }
}
END FUNCTION

% Function: FindFirstFileA
FOREIGN FUNCTION FindFirstFileA(lpFileName: String, INOUT lpFindFileData: Bytes): Handle
{
    "library": {"name": "kernel32"}
    "types": {
        "return": "pointer"
        "lpFileName": "string"
        "lpFindFileData": "bytes"
    }
}
END FUNCTION

FUNCTION FindFirstFile(lpFileName: String, OUT lpFindFileData: WIN32_FIND_DATA): Handle
    lpFindFileData := WIN32_FIND_DATA()
    VAR fd: Bytes := lpFindFileData.pack()
    LET r: Handle := FindFirstFileA(lpFileName, INOUT fd)
    lpFindFileData.unpack(fd)
    RETURN r
END FUNCTION

% Function: FindNextFileA
FOREIGN FUNCTION FindNextFileA(hFindFile: Handle, INOUT lpFindFileData: Bytes): Boolean
{
    "library": {"name": "kernel32"}
    "types": {
        "return": "boolean"
        "hFindFile": "pointer"
        "lpFindFileData": "bytes"
    }
}
END FUNCTION

FUNCTION FindNextFile(hFindFile: Handle, INOUT lpFindFileData: WIN32_FIND_DATA): Boolean
    VAR fd: Bytes := lpFindFileData.pack()
    LET r: Boolean := FindNextFileA(hFindFile, INOUT fd)
    lpFindFileData.unpack(fd)
    RETURN r
END FUNCTION
