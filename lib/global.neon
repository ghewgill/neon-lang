/*  File: global
 *
 *  Global names that are available everywhere.
 */

EXPORT ExceptionType
EXPORT DecodeResult

EXPORT num
EXPORT print
EXPORT str

EXPORT NumberException
EXPORT DynamicConversionException
EXPORT InterruptedException
EXPORT ObjectSubscriptException
EXPORT SqlException

/*  Type: Boolean
 *
 *  TRUE or FALSE.
 */

/*  Type: Number
 *
 *  Floating point number with 34 decimal digits of precision.
 */

/*  Type: String
 *
 *  Unicode string.
 */

/*  Type: Array
 *
 *  Parameterised sequence type. Example
 *
 *  > Array<String>
 */

/*  Type: Dictionary
 *
 *  Parameterised map type from <String> to the given type. Example
 *
 *  > Dictionary<String>
 */

/*  Type: Bytes
 *
 *  Bytes.
 */

/*  Type: ExceptionType
 *
 *  Record that contains information about a raised exception.
 */
TYPE ExceptionType IS RECORD
    name: String
    info: Object
    offset: Number
END RECORD

FUNCTION ExceptionType.toString(self: ExceptionType): String
    RETURN "<ExceptionType:" & self.name & "," & self.info & "," & str(self.offset) & ">"
END FUNCTION

/*  Exception: NumberException
 *
 *  Number exception.
 */
EXCEPTION NumberException

/*  Exception: NumberException.DivideByZero
 *
 *  Divide by zero error.
 */
EXCEPTION NumberException.DivideByZero

/*  Exception: NumberException.Invalid
 *
 *  Invalid range.
 */
EXCEPTION NumberException.Invalid

/*  Exception: NumberException.Overflow
 *
 *  Floating point overflow.
 */
EXCEPTION NumberException.Overflow

/*  Exception: DynamicConversionException
 *
 *  Dynamic conversion exception.
 */
EXCEPTION DynamicConversionException

/*  Exception: InterruptedException
 *
 *  Execution interrupted with Ctrl+C.
 */
EXCEPTION InterruptedException

/*  Exception: ObjectSubscriptException
 *
 *  Object subscript exception.
 */
EXCEPTION ObjectSubscriptException

/*  Exception: SqlException
 *
 *  SQL exception.
 */
EXCEPTION SqlException

/*  Function: num
 *
 *  Convert a decimal number as a string to a number.
 */
DECLARE NATIVE FUNCTION num(s: String): Number

/*  Function: print
 *
 *  Print a string to standard output followed by a newline.
 */
DECLARE NATIVE FUNCTION print(x: Object)

/*  Function: str
 *
 *  Convert a number to a decimal string.
 */
DECLARE NATIVE FUNCTION str(x: Number): String

TYPE DecodeError IS RECORD
    offset: Number
END RECORD

TYPE DecodeResult IS CHOICE
    string: String
    error: DecodeError
END CHOICE

DECLARE NATIVE FUNCTION Bytes.decodeToString(self: Bytes): DecodeResult

FUNCTION DecodeResult.expectString(self: DecodeResult): String
    CASE self
        WHEN ISA DecodeResult.string DO
            RETURN self.string
        WHEN ISA DecodeResult.error DO
            PANIC "UTF-8 decoding error at offset: " & str(self.error.offset)
    END CASE
END FUNCTION
