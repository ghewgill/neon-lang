#|
 |  File: struct
 |
 |  Functions for working with fixed-size structures.
 |#

IMPORT string

EXPORT Struct
EXPORT Field
EXPORT Type
EXPORT make
EXPORT field
EXPORT packBool
EXPORT packIEEE32
EXPORT packIEEE64
EXPORT packInt8
EXPORT packInt16BE
EXPORT packInt16LE
EXPORT packInt32BE
EXPORT packInt32LE
EXPORT packInt64BE
EXPORT packInt64LE
EXPORT packUInt8
EXPORT packUInt16BE
EXPORT packUInt16LE
EXPORT packUInt32BE
EXPORT packUInt32LE
EXPORT packUInt64BE
EXPORT packUInt64LE
EXPORT unpackBool
EXPORT unpackIEEE32
EXPORT unpackIEEE64
EXPORT unpackInt8
EXPORT unpackInt16BE
EXPORT unpackInt16LE
EXPORT unpackInt32BE
EXPORT unpackInt32LE
EXPORT unpackInt64BE
EXPORT unpackInt64LE
EXPORT unpackUInt8
EXPORT unpackUInt16BE
EXPORT unpackUInt16LE
EXPORT unpackUInt32BE
EXPORT unpackUInt32LE
EXPORT unpackUInt64BE
EXPORT unpackUInt64LE

IMPORT binary

#|
 |  Enumeration: Type
 |
 |  The type of a field.
 |
 |  Values:
 |      bool - boolean
 |      ieee32 - IEEE 754 32 bit binary floating point
 |      ieee64 - IEEE 754 64 bit binary floating point
 |      int8 - signed 8 bit integer
 |      int16BE - signed 16 bit integer, big endian
 |      int16LE - signed 16 bit integer, little endian
 |      int32BE - signed 32 bit integer, big endian
 |      int32LE - signed 32 bit integer, little endian
 |      int64BE - signed 64 bit integer, big endian
 |      int64LE - signed 64 bit integer, little endian
 |      uint8 - unsigned 8 bit integer
 |      uint16BE - unsigned 16 bit integer, big endian
 |      uint16LE - unsigned 16 bit integer, little endian
 |      uint32BE - unsigned 32 bit integer, big endian
 |      uint32LE - unsigned 32 bit integer, little endian
 |      uint64BE - unsigned 64 bit integer, big endian
 |      uint64LE - unsigned 64 bit integer, little endian
 |      string - string
 |      bytes - bytes
 |#
TYPE Type IS ENUM
    bool
    ieee32
    ieee64
    int8
    int16BE
    int16LE
    int32BE
    int32LE
    int64BE
    int64LE
    uint8
    uint16BE
    uint16LE
    uint32BE
    uint32LE
    uint64BE
    uint64LE
    string
    bytes
END ENUM

#|
 |  Type: Field
 |
 |  Represents a field in a structure.
 |#
TYPE Field IS RECORD
    name: String
    type: Type
    width: Number
END RECORD

#|
 |  Type: Struct
 |
 |  Represents a complete structure as a sequence of fields.
 |#
TYPE Struct IS RECORD
    PRIVATE fields: Array<Field>
END RECORD

#|
 |  Function: make
 |
 |  Make a <Struct> based on an array of <Fields>.
 |#
FUNCTION make(fields: Array<Field>): Struct
    RETURN Struct(fields WITH fields)
END FUNCTION

#|
 |  Function: field
 |
 |  Helper function to create <Field> records.
 |#
FUNCTION field(name: String, type: Type, width: Number): Field
    RETURN Field(name WITH name, type WITH type, width WITH width)
END FUNCTION

#|
 |  Function: packBool
 |
 |  Pack a <Boolean> value into a <Bytes>.
 |#
FUNCTION packBool(b: Boolean): Bytes
    RETURN (IF b THEN HEXBYTES "01" ELSE HEXBYTES "00")
END FUNCTION

#|
 |  Function: packIEEE32
 |
 |  Pack a <Number> value into a <Bytes> in IEEE 754 binary32 floating point format.
 |#
DECLARE NATIVE FUNCTION packIEEE32(n: Number): Bytes

#|
 |  Function: packIEEE64
 |
 |  Pack a <Number> value into a <Bytes> in IEEE 754 binary64 floating point format.
 |#
DECLARE NATIVE FUNCTION packIEEE64(n: Number): Bytes

#|
 |  Function: packInt8
 |
 |  Pack a signed <Number> into a <Bytes> of width 1.
 |#
FUNCTION packInt8(n: Number): Bytes
    CHECK -0x80 <= n <= 0x7F ELSE
        RAISE InvalidValueException
    END CHECK
    RETURN packUInt8((IF n < 0 THEN 0x100 + n ELSE n))
END FUNCTION

#|
 |  Function: packInt16BE
 |
 |  Pack a signed <Number> into a <Bytes> of width 2.
 |#
FUNCTION packInt16BE(n: Number): Bytes
    CHECK -0x8000 <= n <= 0x7FFF ELSE
        RAISE InvalidValueException
    END CHECK
    RETURN packUInt16BE((IF n < 0 THEN 0x10000 + n ELSE n))
END FUNCTION

#|
 |  Function: packInt16LE
 |
 |  Pack a signed <Number> into a <Bytes> of width 2.
 |#
FUNCTION packInt16LE(n: Number): Bytes
    CHECK -0x8000 <= n <= 0x7FFF ELSE
        RAISE InvalidValueException
    END CHECK
    RETURN packUInt16LE((IF n < 0 THEN 0x10000 + n ELSE n))
END FUNCTION

#|
 |  Function: packInt32BE
 |
 |  Pack a signed <Number> into a <Bytes> of width 4.
 |#
FUNCTION packInt32BE(n: Number): Bytes
    CHECK -0x80000000 <= n <= 0x7FFFFFFF ELSE
        RAISE InvalidValueException
    END CHECK
    RETURN packUInt32BE((IF n < 0 THEN 0x100000000 + n ELSE n))
END FUNCTION

#|
 |  Function: packInt32LE
 |
 |  Pack a signed <Number> into a <Bytes> of width 4.
 |#
FUNCTION packInt32LE(n: Number): Bytes
    CHECK -0x80000000 <= n <= 0x7FFFFFFF ELSE
        RAISE InvalidValueException
    END CHECK
    RETURN packUInt32LE((IF n < 0 THEN 0x100000000 + n ELSE n))
END FUNCTION

#|
 |  Function: packInt64BE
 |
 |  Pack a signed <Number> into a <Bytes> of width 8.
 |#
FUNCTION packInt64BE(n: Number): Bytes
    CHECK -0x8000000000000000 <= n <= 0x7FFFFFFFFFFFFFFF ELSE
        RAISE InvalidValueException
    END CHECK
    RETURN packUInt64BE((IF n < 0 THEN 0x10000000000000000 + n ELSE n))
END FUNCTION

#|
 |  Function: packInt64LE
 |
 |  Pack a signed <Number> into a <Bytes> of width 8.
 |#
FUNCTION packInt64LE(n: Number): Bytes
    CHECK -0x8000000000000000 <= n <= 0x7FFFFFFFFFFFFFFF ELSE
        RAISE InvalidValueException
    END CHECK
    RETURN packUInt64LE((IF n < 0 THEN 0x10000000000000000 + n ELSE n))
END FUNCTION

#|
 |  Function: packUInt8
 |
 |  Pack a signed <Number> into a <Bytes> of width 1.
 |#
FUNCTION packUInt8(n: Number): Bytes
    CHECK 0 <= n <= 0xFF ELSE
        RAISE InvalidValueException
    END CHECK
    VAR r: Array<Number> := []
    r[0] := binary.and32(n, 0xFF)
    RETURN r.toBytes()
END FUNCTION

#|
 |  Function: packUInt16BE
 |
 |  Pack an unsigned <Number> into a <Bytes> of width 2.
 |#
FUNCTION packUInt16BE(n: Number): Bytes
    CHECK 0 <= n <= 0xFFFF ELSE
        RAISE InvalidValueException
    END CHECK
    VAR r: Array<Number> := []
    r[0] := binary.and32(binary.shiftRight32(n, 8), 0xFF)
    r[1] := binary.and32(n, 0xFF)
    RETURN r.toBytes()
END FUNCTION

#|
 |  Function: packUInt16LE
 |
 |  Pack an unsigned <Number> into a <Bytes> of width 2.
 |#
FUNCTION packUInt16LE(n: Number): Bytes
    CHECK 0 <= n <= 0xFFFF ELSE
        RAISE InvalidValueException
    END CHECK
    VAR r: Array<Number> := []
    r[0] := binary.and32(n, 0xFF)
    r[1] := binary.and32(binary.shiftRight32(n, 8), 0xFF)
    RETURN r.toBytes()
END FUNCTION

#|
 |  Function: packUInt32BE
 |
 |  Pack an unsigned <Number> into a <Bytes> of width 4.
 |#
FUNCTION packUInt32BE(n: Number): Bytes
    CHECK 0 <= n <= 0xFFFFFFFF ELSE
        RAISE InvalidValueException
    END CHECK
    VAR r: Array<Number> := []
    r[0] := binary.and32(binary.shiftRight32(n, 24), 0xFF)
    r[1] := binary.and32(binary.shiftRight32(n, 16), 0xFF)
    r[2] := binary.and32(binary.shiftRight32(n, 8), 0xFF)
    r[3] := binary.and32(n, 0xFF)
    RETURN r.toBytes()
END FUNCTION

#|
 |  Function: packUInt32LE
 |
 |  Pack an unsigned <Number> into a <Bytes> of width 4.
 |#
FUNCTION packUInt32LE(n: Number): Bytes
    CHECK 0 <= n <= 0xFFFFFFFF ELSE
        RAISE InvalidValueException
    END CHECK
    VAR r: Array<Number> := []
    r[0] := binary.and32(n, 0xFF)
    r[1] := binary.and32(binary.shiftRight32(n, 8), 0xFF)
    r[2] := binary.and32(binary.shiftRight32(n, 16), 0xFF)
    r[3] := binary.and32(binary.shiftRight32(n, 24), 0xFF)
    RETURN r.toBytes()
END FUNCTION

#|
 |  Function: packUInt64BE
 |
 |  Pack an unsigned <Number> into a <Bytes> of width 8.
 |#
FUNCTION packUInt64BE(n: Number): Bytes
    CHECK 0 <= n <= 0xFFFFFFFFFFFFFFFF ELSE
        RAISE InvalidValueException
    END CHECK
    VAR r: Array<Number> := []
    r[0] := binary.and64(binary.shiftRight64(n, 56), 0xFF)
    r[1] := binary.and64(binary.shiftRight64(n, 48), 0xFF)
    r[2] := binary.and64(binary.shiftRight64(n, 40), 0xFF)
    r[3] := binary.and64(binary.shiftRight64(n, 32), 0xFF)
    r[4] := binary.and64(binary.shiftRight64(n, 24), 0xFF)
    r[5] := binary.and64(binary.shiftRight64(n, 16), 0xFF)
    r[6] := binary.and64(binary.shiftRight64(n, 8), 0xFF)
    r[7] := binary.and64(n, 0xFF)
    RETURN r.toBytes()
END FUNCTION

#|
 |  Function: packUInt64LE
 |
 |  Pack an unsigned <Number> into a <Bytes> of width 8.
 |#
FUNCTION packUInt64LE(n: Number): Bytes
    CHECK 0 <= n <= 0xFFFFFFFFFFFFFFFF ELSE
        RAISE InvalidValueException
    END CHECK
    VAR r: Array<Number> := []
    r[0] := binary.and64(n, 0xFF)
    r[1] := binary.and64(binary.shiftRight64(n, 8), 0xFF)
    r[2] := binary.and64(binary.shiftRight64(n, 16), 0xFF)
    r[3] := binary.and64(binary.shiftRight64(n, 24), 0xFF)
    r[4] := binary.and64(binary.shiftRight64(n, 32), 0xFF)
    r[5] := binary.and64(binary.shiftRight64(n, 40), 0xFF)
    r[6] := binary.and64(binary.shiftRight64(n, 48), 0xFF)
    r[7] := binary.and64(binary.shiftRight64(n, 56), 0xFF)
    RETURN r.toBytes()
END FUNCTION

#|
 |  Function: unpackBool
 |
 |  Unpack a <Boolean> from a <Bytes>.
 |#
FUNCTION unpackBool(b: Bytes): Boolean
    CHECK b.size() = 1 ELSE
        RAISE InvalidValueException
    END CHECK
    LET a: Array<Number> := b.toArray()
    RETURN a[0] <> 0
END FUNCTION

#|
 |  Function: unpackIEEE32
 |
 |  Unpack a <Number> from a <Bytes> in IEEE 754 binary32 floating point format.
 |#
DECLARE NATIVE FUNCTION unpackIEEE32(b: Bytes): Number

#|
 |  Function: unpackIEEE64
 |
 |  Unpack a <Number> from a <Bytes> in IEEE 754 binary64 floating point format.
 |#
DECLARE NATIVE FUNCTION unpackIEEE64(b: Bytes): Number

#|
 |  Function: unpackInt8
 |
 |  Unpack a <Number> from a <Bytes> of size 1.
 |#
FUNCTION unpackInt8(b: Bytes): Number
    LET r: Number := unpackUInt8(b)
    IF r < 0x80 THEN
        RETURN r
    ELSE
        RETURN r - 0x100
    END IF
END FUNCTION

#|
 |  Function: unpackInt16BE
 |
 |  Unpack a <Number> from a <Bytes> of size 2.
 |#
FUNCTION unpackInt16BE(b: Bytes): Number
    LET r: Number := unpackUInt16BE(b)
    IF r < 0x8000 THEN
        RETURN r
    ELSE
        RETURN r - 0x10000
    END IF
END FUNCTION

#|
 |  Function: unpackInt16LE
 |
 |  Unpack a <Number> from a <Bytes> of size 2.
 |#
FUNCTION unpackInt16LE(b: Bytes): Number
    LET r: Number := unpackUInt16LE(b)
    IF r < 0x8000 THEN
        RETURN r
    ELSE
        RETURN r - 0x10000
    END IF
END FUNCTION

#|
 |  Function: unpackInt32BE
 |
 |  Unpack a <Number> from a <Bytes> of size 4.
 |#
FUNCTION unpackInt32BE(b: Bytes): Number
    LET r: Number := unpackUInt32BE(b)
    IF r < 0x80000000 THEN
        RETURN r
    ELSE
        RETURN r - 0x100000000
    END IF
END FUNCTION

#|
 |  Function: unpackInt32LE
 |
 |  Unpack a <Number> from a <Bytes> of size 4.
 |#
FUNCTION unpackInt32LE(b: Bytes): Number
    LET r: Number := unpackUInt32LE(b)
    IF r < 0x80000000 THEN
        RETURN r
    ELSE
        RETURN r - 0x100000000
    END IF
END FUNCTION

#|
 |  Function: unpackInt64BE
 |
 |  Unpack a <Number> from a <Bytes> of size 8.
 |#
FUNCTION unpackInt64BE(b: Bytes): Number
    LET r: Number := unpackUInt64BE(b)
    IF r < 0x8000000000000000 THEN
        RETURN r
    ELSE
        RETURN r - 0x10000000000000000
    END IF
END FUNCTION

#|
 |  Function: unpackInt64LE
 |
 |  Unpack a <Number> from a <Bytes> of size 8.
 |#
FUNCTION unpackInt64LE(b: Bytes): Number
    LET r: Number := unpackUInt64LE(b)
    IF r < 0x8000000000000000 THEN
        RETURN r
    ELSE
        RETURN r - 0x10000000000000000
    END IF
END FUNCTION

#|
 |  Function: unpackUInt8
 |
 |  Unpack a <Number> from a <Bytes> of size 1.
 |#
FUNCTION unpackUInt8(b: Bytes): Number
    CHECK b.size() = 1 ELSE
        RAISE InvalidValueException
    END CHECK
    LET a: Array<Number> := b.toArray()
    RETURN a[0]
END FUNCTION

#|
 |  Function: unpackUInt16BE
 |
 |  Unpack a <Number> from a <Bytes> of size 2.
 |#
FUNCTION unpackUInt16BE(b: Bytes): Number
    CHECK b.size() = 2 ELSE
        RAISE InvalidValueException
    END CHECK
    LET a: Array<Number> := b.toArray()
    RETURN binary.shiftLeft32(a[0],  8) +
           a[1]
END FUNCTION

#|
 |  Function: unpackUInt16LE
 |
 |  Unpack a <Number> from a <Bytes> of size 2.
 |#
FUNCTION unpackUInt16LE(b: Bytes): Number
    CHECK b.size() = 2 ELSE
        RAISE InvalidValueException
    END CHECK
    LET a: Array<Number> := b.toArray()
    RETURN binary.shiftLeft32(a[1],  8) +
           a[0]
END FUNCTION

#|
 |  Function: unpackUInt32BE
 |
 |  Unpack a <Number> from a <Bytes> of size 4.
 |#
FUNCTION unpackUInt32BE(b: Bytes): Number
    CHECK b.size() = 4 ELSE
        RAISE InvalidValueException
    END CHECK
    LET a: Array<Number> := b.toArray()
    RETURN binary.shiftLeft32(a[0], 24) +
           binary.shiftLeft32(a[1], 16) +
           binary.shiftLeft32(a[2],  8) +
           a[3]
END FUNCTION

#|
 |  Function: unpackUInt32LE
 |
 |  Unpack a <Number> from a <Bytes> of size 4.
 |#
FUNCTION unpackUInt32LE(b: Bytes): Number
    CHECK b.size() = 4 ELSE
        RAISE InvalidValueException
    END CHECK
    LET a: Array<Number> := b.toArray()
    RETURN binary.shiftLeft32(a[3], 24) +
           binary.shiftLeft32(a[2], 16) +
           binary.shiftLeft32(a[1],  8) +
           a[0]
END FUNCTION

#|
 |  Function: unpackUInt64BE
 |
 |  Unpack a <Number> from a <Bytes> of size 8.
 |#
FUNCTION unpackUInt64BE(b: Bytes): Number
    CHECK b.size() = 8 ELSE
        RAISE InvalidValueException
    END CHECK
    LET a: Array<Number> := b.toArray()
    RETURN binary.shiftLeft64(a[0], 56) +
           binary.shiftLeft64(a[1], 48) +
           binary.shiftLeft64(a[2], 40) +
           binary.shiftLeft64(a[3], 32) +
           binary.shiftLeft64(a[4], 24) +
           binary.shiftLeft64(a[5], 16) +
           binary.shiftLeft64(a[6],  8) +
           a[7]
END FUNCTION

#|
 |  Function: unpackUInt64LE
 |
 |  Unpack a <Number> from a <Bytes> of size 8.
 |#
FUNCTION unpackUInt64LE(b: Bytes): Number
    CHECK b.size() = 8 ELSE
        RAISE InvalidValueException
    END CHECK
    LET a: Array<Number> := b.toArray()
    RETURN binary.shiftLeft64(a[7], 56) +
           binary.shiftLeft64(a[6], 48) +
           binary.shiftLeft64(a[5], 40) +
           binary.shiftLeft64(a[4], 32) +
           binary.shiftLeft64(a[3], 24) +
           binary.shiftLeft64(a[2], 16) +
           binary.shiftLeft64(a[1],  8) +
           a[0]
END FUNCTION

#|
 |  Function: Struct.pack
 |
 |  Convert a dictionary of values into a structure.
 |#
FUNCTION Struct.pack(self: Struct, values: Dictionary<Object>): Bytes
    VAR buf: Array<Number> := []
    FOR f := 0 TO self.fields.size()-1 DO
        IF self.fields[f].name IN values THEN
            LET v: Object := values[self.fields[f].name]
            CASE self.fields[f].type
                WHEN Type.bool DO
                    buf.extend(packBool(v).toArray())
                WHEN Type.ieee32 DO
                    buf.extend(packIEEE32(v).toArray())
                WHEN Type.ieee64 DO
                    buf.extend(packIEEE64(v).toArray())
                WHEN Type.int8 DO
                    buf.extend(packInt8(v).toArray())
                WHEN Type.int16BE DO
                    buf.extend(packInt16BE(v).toArray())
                WHEN Type.int16LE DO
                    buf.extend(packInt16LE(v).toArray())
                WHEN Type.int32BE DO
                    buf.extend(packInt32BE(v).toArray())
                WHEN Type.int32LE DO
                    buf.extend(packInt32LE(v).toArray())
                WHEN Type.int64BE DO
                    buf.extend(packInt64BE(v).toArray())
                WHEN Type.int64LE DO
                    buf.extend(packInt64LE(v).toArray())
                WHEN Type.uint8 DO
                    buf.extend(packUInt8(v).toArray())
                WHEN Type.uint16BE DO
                    buf.extend(packUInt16BE(v).toArray())
                WHEN Type.uint16LE DO
                    buf.extend(packUInt16LE(v).toArray())
                WHEN Type.uint32BE DO
                    buf.extend(packUInt32BE(v).toArray())
                WHEN Type.uint32LE DO
                    buf.extend(packUInt32LE(v).toArray())
                WHEN Type.uint64BE DO
                    buf.extend(packUInt64BE(v).toArray())
                WHEN Type.uint64LE DO
                    buf.extend(packUInt64LE(v).toArray())
                WHEN Type.string DO
                    LET s: String := values[self.fields[f].name]
                    FOR i := 0 TO self.fields[f].width-1 DO
                        buf.append((IF i < s.length() THEN string.toCodePoint(s[i]) ELSE 0))
                    END FOR
                WHEN Type.bytes DO
                    LET b: Bytes := values[self.fields[f].name]
                    LET a: Array<Number> := b.toArray()
                    FOR i := 0 TO self.fields[f].width-1 DO
                        buf.append((IF i < a.size() THEN a[i] ELSE 0))
                    END FOR
            END CASE
        ELSE
            buf.resize(buf.size() + self.fields[f].width)
        END IF
    END FOR
    RETURN buf.toBytes()
END FUNCTION

#|
 |  Function: Struct.sizeof
 |
 |  Return the total size of a structure definition.
 |#
FUNCTION Struct.sizeof(self: Struct): Number
    VAR r: Number := 0
    FOR f := 0 TO self.fields.size()-1 DO
        r := r + self.fields[f].width
    END FOR
    RETURN r
END FUNCTION

#|
 |  Function: Struct.unpack
 |
 |  Convert a structure into a dictionary of values.
 |#
FUNCTION Struct.unpack(self: Struct, data: Bytes): Dictionary<Object>
    VAR r: Dictionary<Object> := {}
    LET a: Array<Number> := data.toArray()
    VAR i: Number := 0
    FOR f := 0 TO self.fields.size()-1 DO
        VAR v: Object := NIL
        CASE self.fields[f].type
            WHEN Type.bool DO
                v := unpackBool(data[i TO i])
                INC i
            WHEN Type.ieee32 DO
                v := unpackIEEE32(data[i TO i+3])
                i := i + 4
            WHEN Type.ieee64 DO
                v := unpackIEEE64(data[i TO i+7])
                i := i + 8
            WHEN Type.int8 DO
                v := unpackInt8(data[i TO i])
                INC i
            WHEN Type.int16BE DO
                v := unpackInt16BE(data[i TO i+1])
                i := i + 2
            WHEN Type.int16LE DO
                v := unpackInt16LE(data[i TO i+1])
                i := i + 2
            WHEN Type.int32BE DO
                v := unpackInt32BE(data[i TO i+3])
                i := i + 4
            WHEN Type.int32LE DO
                v := unpackInt32LE(data[i TO i+3])
                i := i + 4
            WHEN Type.int64BE DO
                v := unpackInt64BE(data[i TO i+7])
                i := i + 8
            WHEN Type.int64LE DO
                v := unpackInt64LE(data[i TO i+7])
                i := i + 8
            WHEN Type.uint8 DO
                v := unpackUInt8(data[i TO i])
                INC i
            WHEN Type.uint16BE DO
                v := unpackUInt16BE(data[i TO i+1])
                i := i + 2
            WHEN Type.uint16LE DO
                v := unpackUInt16LE(data[i TO i+1])
                i := i + 2
            WHEN Type.uint32BE DO
                v := unpackUInt32BE(data[i TO i+3])
                i := i + 4
            WHEN Type.uint32LE DO
                v := unpackUInt32LE(data[i TO i+3])
                i := i + 4
            WHEN Type.uint64BE DO
                v := unpackUInt64BE(data[i TO i+7])
                i := i + 8
            WHEN Type.uint64LE DO
                v := unpackUInt64LE(data[i TO i+7])
                i := i + 8
            WHEN Type.string DO
                VAR s: String := ""
                FOR j := 0 TO self.fields[f].width-1 DO
                    IF a[i+j] = 0 THEN
                        EXIT FOR
                    END IF
                    s.append(string.fromCodePoint(a[i+j]))
                END FOR
                v := s
                i := i + self.fields[f].width
            WHEN Type.bytes DO
                v := a[i TO i+self.fields[f].width-1]
                i := i + self.fields[f].width
        END CASE
        r[self.fields[f].name] := v
    END FOR
    RETURN r
END FUNCTION

BEGIN MAIN
    TESTCASE packBool(FALSE) = HEXBYTES "00"
    TESTCASE packBool(TRUE) = HEXBYTES "01"

    TESTCASE packIEEE32(0) = HEXBYTES "00 00 00 00"
    TESTCASE packIEEE32(1) = HEXBYTES "00 00 80 3f"
    TESTCASE packIEEE32(1e10) = HEXBYTES "f9 02 15 50"

    TESTCASE packIEEE64(0) = HEXBYTES "00 00 00 00 00 00 00 00"
    TESTCASE packIEEE64(1) = HEXBYTES "00 00 00 00 00 00 f0 3f"
    TESTCASE packIEEE64(1e100) = HEXBYTES "7d c3 94 25 ad 49 b2 54"

    TESTCASE packInt8(-128) = HEXBYTES "80"
    TESTCASE packInt8(-1) = HEXBYTES "FF"
    TESTCASE packInt8(0) = HEXBYTES "00"
    TESTCASE packInt8(1) = HEXBYTES "01"
    TESTCASE packInt8(127) = HEXBYTES "7F"

    TESTCASE packInt16BE(-32768) = HEXBYTES "80 00"
    TESTCASE packInt16BE(-1) = HEXBYTES "FF FF"
    TESTCASE packInt16BE(0) = HEXBYTES "00 00"
    TESTCASE packInt16BE(1) = HEXBYTES "00 01"
    TESTCASE packInt16BE(32767) = HEXBYTES "7F FF"

    TESTCASE packInt16LE(-32768) = HEXBYTES "00 80"
    TESTCASE packInt16LE(-1) = HEXBYTES "FF FF"
    TESTCASE packInt16LE(0) = HEXBYTES "00 00"
    TESTCASE packInt16LE(1) = HEXBYTES "01 00"
    TESTCASE packInt16LE(32767) = HEXBYTES "FF 7F"

    TESTCASE packInt32BE(-2147483648) = HEXBYTES "80 00 00 00"
    TESTCASE packInt32BE(-1) = HEXBYTES "FF FF FF FF"
    TESTCASE packInt32BE(0) = HEXBYTES "00 00 00 00"
    TESTCASE packInt32BE(1) = HEXBYTES "00 00 00 01"
    TESTCASE packInt32BE(2147483647) = HEXBYTES "7F FF FF FF"

    TESTCASE packInt32LE(-2147483648) = HEXBYTES "00 00 00 80"
    TESTCASE packInt32LE(-1) = HEXBYTES "FF FF FF FF"
    TESTCASE packInt32LE(0) = HEXBYTES "00 00 00 00"
    TESTCASE packInt32LE(1) = HEXBYTES "01 00 00 00"
    TESTCASE packInt32LE(2147483647) = HEXBYTES "FF FF FF 7F"

    TESTCASE packInt64BE(-9223372036854775808) = HEXBYTES "80 00 00 00 00 00 00 00"
    TESTCASE packInt64BE(-1) = HEXBYTES "FF FF FF FF FF FF FF FF"
    TESTCASE packInt64BE(0) = HEXBYTES "00 00 00 00 00 00 00 00"
    TESTCASE packInt64BE(1) = HEXBYTES "00 00 00 00 00 00 00 01"
    TESTCASE packInt64BE(9223372036854775807) = HEXBYTES "7F FF FF FF FF FF FF FF"

    TESTCASE packInt64LE(-9223372036854775808) = HEXBYTES "00 00 00 00 00 00 00 80"
    TESTCASE packInt64LE(-1) = HEXBYTES "FF FF FF FF FF FF FF FF"
    TESTCASE packInt64LE(0) = HEXBYTES "00 00 00 00 00 00 00 00"
    TESTCASE packInt64LE(1) = HEXBYTES "01 00 00 00 00 00 00 00"
    TESTCASE packInt64LE(9223372036854775807) = HEXBYTES "FF FF FF FF FF FF FF 7F"

    TESTCASE packUInt8(0) = HEXBYTES "00"
    TESTCASE packUInt8(1) = HEXBYTES "01"
    TESTCASE packUInt8(127) = HEXBYTES "7F"
    TESTCASE packUInt8(255) = HEXBYTES "FF"

    TESTCASE packUInt16BE(0) = HEXBYTES "00 00"
    TESTCASE packUInt16BE(1) = HEXBYTES "00 01"
    TESTCASE packUInt16BE(32767) = HEXBYTES "7F FF"
    TESTCASE packUInt16BE(65535) = HEXBYTES "FF FF"

    TESTCASE packUInt16LE(0) = HEXBYTES "00 00"
    TESTCASE packUInt16LE(1) = HEXBYTES "01 00"
    TESTCASE packUInt16LE(32767) = HEXBYTES "FF 7F"
    TESTCASE packUInt16LE(65535) = HEXBYTES "FF FF"

    TESTCASE packUInt32BE(0) = HEXBYTES "00 00 00 00"
    TESTCASE packUInt32BE(1) = HEXBYTES "00 00 00 01"
    TESTCASE packUInt32BE(2147483647) = HEXBYTES "7F FF FF FF"
    TESTCASE packUInt32BE(4294967295) = HEXBYTES "FF FF FF FF"

    TESTCASE packUInt32LE(0) = HEXBYTES "00 00 00 00"
    TESTCASE packUInt32LE(1) = HEXBYTES "01 00 00 00"
    TESTCASE packUInt32LE(2147483647) = HEXBYTES "FF FF FF 7F"
    TESTCASE packUInt32LE(4294967295) = HEXBYTES "FF FF FF FF"

    TESTCASE packUInt64BE(0) = HEXBYTES "00 00 00 00 00 00 00 00"
    TESTCASE packUInt64BE(1) = HEXBYTES "00 00 00 00 00 00 00 01"
    TESTCASE packUInt64BE(9223372036854775807) = HEXBYTES "7F FF FF FF FF FF FF FF"
    TESTCASE packUInt64BE(18446744073709551615) = HEXBYTES "FF FF FF FF FF FF FF FF"

    TESTCASE packUInt64LE(0) = HEXBYTES "00 00 00 00 00 00 00 00"
    TESTCASE packUInt64LE(1) = HEXBYTES "01 00 00 00 00 00 00 00"
    TESTCASE packUInt64LE(9223372036854775807) = HEXBYTES "FF FF FF FF FF FF FF 7F"
    TESTCASE packUInt64LE(18446744073709551615) = HEXBYTES "FF FF FF FF FF FF FF FF"

    TESTCASE unpackBool(HEXBYTES "00") = FALSE
    TESTCASE unpackBool(HEXBYTES "01") = TRUE

    TESTCASE unpackIEEE32(HEXBYTES "00 00 00 00") = 0
    TESTCASE unpackIEEE32(HEXBYTES "00 00 80 3f") = 1
    TESTCASE unpackIEEE32(HEXBYTES "f9 02 15 50") = 1e10

    TESTCASE unpackIEEE64(HEXBYTES "00 00 00 00 00 00 00 00") = 0
    TESTCASE unpackIEEE64(HEXBYTES "00 00 00 00 00 00 f0 3f") = 1
    TESTCASE unpackIEEE64(HEXBYTES "7d c3 94 25 ad 49 b2 54") = 1.000000000000000015902891109759918e100

    TESTCASE unpackInt8(HEXBYTES "80") = -128
    TESTCASE unpackInt8(HEXBYTES "FF") = -1
    TESTCASE unpackInt8(HEXBYTES "00") = 0
    TESTCASE unpackInt8(HEXBYTES "01") = 1
    TESTCASE unpackInt8(HEXBYTES "7F") = 127

    TESTCASE unpackInt16BE(HEXBYTES "80 00") = -32768
    TESTCASE unpackInt16BE(HEXBYTES "FF FF") = -1
    TESTCASE unpackInt16BE(HEXBYTES "00 00") = 0
    TESTCASE unpackInt16BE(HEXBYTES "00 01") = 1
    TESTCASE unpackInt16BE(HEXBYTES "7F FF") = 32767

    TESTCASE unpackInt16LE(HEXBYTES "00 80") = -32768
    TESTCASE unpackInt16LE(HEXBYTES "FF FF") = -1
    TESTCASE unpackInt16LE(HEXBYTES "00 00") = 0
    TESTCASE unpackInt16LE(HEXBYTES "01 00") = 1
    TESTCASE unpackInt16LE(HEXBYTES "FF 7F") = 32767

    TESTCASE unpackInt32BE(HEXBYTES "80 00 00 00") = -2147483648
    TESTCASE unpackInt32BE(HEXBYTES "FF FF FF FF") = -1
    TESTCASE unpackInt32BE(HEXBYTES "00 00 00 00") = 0
    TESTCASE unpackInt32BE(HEXBYTES "00 00 00 01") = 1
    TESTCASE unpackInt32BE(HEXBYTES "7F FF FF FF") = 2147483647

    TESTCASE unpackInt32LE(HEXBYTES "00 00 00 80") = -2147483648
    TESTCASE unpackInt32LE(HEXBYTES "FF FF FF FF") = -1
    TESTCASE unpackInt32LE(HEXBYTES "00 00 00 00") = 0
    TESTCASE unpackInt32LE(HEXBYTES "01 00 00 00") = 1
    TESTCASE unpackInt32LE(HEXBYTES "FF FF FF 7F") = 2147483647

    TESTCASE unpackInt64BE(HEXBYTES "80 00 00 00 00 00 00 00") = -9223372036854775808
    TESTCASE unpackInt64BE(HEXBYTES "FF FF FF FF FF FF FF FF") = -1
    TESTCASE unpackInt64BE(HEXBYTES "00 00 00 00 00 00 00 00") = 0
    TESTCASE unpackInt64BE(HEXBYTES "00 00 00 00 00 00 00 01") = 1
    TESTCASE unpackInt64BE(HEXBYTES "7F FF FF FF FF FF FF FF") = 9223372036854775807

    TESTCASE unpackInt64LE(HEXBYTES "00 00 00 00 00 00 00 80") = -9223372036854775808
    TESTCASE unpackInt64LE(HEXBYTES "FF FF FF FF FF FF FF FF") = -1
    TESTCASE unpackInt64LE(HEXBYTES "00 00 00 00 00 00 00 00") = 0
    TESTCASE unpackInt64LE(HEXBYTES "01 00 00 00 00 00 00 00") = 1
    TESTCASE unpackInt64LE(HEXBYTES "FF FF FF FF FF FF FF 7F") = 9223372036854775807

    TESTCASE unpackUInt8(HEXBYTES "00") = 0
    TESTCASE unpackUInt8(HEXBYTES "01") = 1
    TESTCASE unpackUInt8(HEXBYTES "7F") = 127
    TESTCASE unpackUInt8(HEXBYTES "FF") = 255

    TESTCASE unpackUInt16BE(HEXBYTES "00 00") = 0
    TESTCASE unpackUInt16BE(HEXBYTES "00 01") = 1
    TESTCASE unpackUInt16BE(HEXBYTES "7F FF") = 32767
    TESTCASE unpackUInt16BE(HEXBYTES "FF FF") = 65535

    TESTCASE unpackUInt16LE(HEXBYTES "00 00") = 0
    TESTCASE unpackUInt16LE(HEXBYTES "01 00") = 1
    TESTCASE unpackUInt16LE(HEXBYTES "FF 7F") = 32767
    TESTCASE unpackUInt16LE(HEXBYTES "FF FF") = 65535

    TESTCASE unpackUInt32BE(HEXBYTES "00 00 00 00") = 0
    TESTCASE unpackUInt32BE(HEXBYTES "00 00 00 01") = 1
    TESTCASE unpackUInt32BE(HEXBYTES "7F FF FF FF") = 2147483647
    TESTCASE unpackUInt32BE(HEXBYTES "FF FF FF FF") = 4294967295

    TESTCASE unpackUInt32LE(HEXBYTES "00 00 00 00") = 0
    TESTCASE unpackUInt32LE(HEXBYTES "01 00 00 00") = 1
    TESTCASE unpackUInt32LE(HEXBYTES "FF FF FF 7F") = 2147483647
    TESTCASE unpackUInt32LE(HEXBYTES "FF FF FF FF") = 4294967295

    TESTCASE unpackUInt64BE(HEXBYTES "00 00 00 00 00 00 00 00") = 0
    TESTCASE unpackUInt64BE(HEXBYTES "00 00 00 00 00 00 00 01") = 1
    TESTCASE unpackUInt64BE(HEXBYTES "7F FF FF FF FF FF FF FF") = 9223372036854775807
    TESTCASE unpackUInt64BE(HEXBYTES "FF FF FF FF FF FF FF FF") = 18446744073709551615

    TESTCASE unpackUInt64LE(HEXBYTES "00 00 00 00 00 00 00 00") = 0
    TESTCASE unpackUInt64LE(HEXBYTES "01 00 00 00 00 00 00 00") = 1
    TESTCASE unpackUInt64LE(HEXBYTES "FF FF FF FF FF FF FF 7F") = 9223372036854775807
    TESTCASE unpackUInt64LE(HEXBYTES "FF FF FF FF FF FF FF FF") = 18446744073709551615
END MAIN
