/*  File: json
 *
 *  Functions for reading and writing files in JSON format (<http://json.org>).
 */

IMPORT string

EXPORT JsonResult

EXPORT decode
EXPORT encode

/* TODO: This encoder and decoder does not handle all backslash
 * character escapes yet.
 * TODO: Also, this could probably be improved a lot by using regex.
 */

TYPE DecodeError IS RECORD
    message: String
    index: Number
END RECORD

TYPE JsonResult IS CHOICE
    data: Object
    error: DecodeError
END CHOICE

FUNCTION skipWhitespace(json: String, INOUT index: Number)
    WHILE index < json.length() AND (json[index] = " " OR json[index] = "\t" OR json[index] = "\r" OR json[index] = "\n") DO
        INC index
    END WHILE
END FUNCTION

FUNCTION decodePart(json: String, INOUT index: Number): JsonResult
    skipWhitespace(json, INOUT index)
    IF index < json.length() THEN
        CASE json[index]
            WHEN "a" TO "z" DO
                LET start: Number := index
                WHILE index < json.length() AND "a" <= json[index] <= "z" DO
                    INC index
                END WHILE
                LET s: String := json[start TO index-1]
                CASE s
                    WHEN "null" DO
                        RETURN JsonResult.data(NIL)
                    WHEN "false" DO
                        RETURN JsonResult.data(FALSE)
                    WHEN "true" DO
                        RETURN JsonResult.data(TRUE)
                    WHEN OTHERS DO
                        RETURN JsonResult.error(DecodeError(message WITH "null or false or true expected", index WITH start))
                END CASE
            WHEN "-", "0" TO "9" DO
                LET start: Number := index
                IF json[index] = "-" THEN
                    INC index
                END IF
                IF index < json.length() AND json[index] = "0" THEN
                    INC index
                ELSE
                    CHECK index < json.length() AND "1" <= json[index] <= "9" ELSE
                        RETURN JsonResult.error(DecodeError(message WITH "digit expected", index WITH start))
                    END CHECK
                    INC index
                    WHILE index < json.length() AND "0" <= json[index] <= "9" DO
                        INC index
                    END WHILE
                END IF
                IF index < json.length() AND json[index] = "." THEN
                    INC index
                    CHECK index < json.length() AND "0" <= json[index] <= "9" ELSE
                        RETURN JsonResult.error(DecodeError(message WITH "digit expected", index WITH start))
                    END CHECK
                    WHILE index < json.length() AND "0" <= json[index] <= "9" DO
                        INC index
                    END WHILE
                END IF
                IF index < json.length() AND (json[index] = "e" OR json[index] = "E") THEN
                    INC index
                    IF index < json.length() AND (json[index] = "+" OR json[index] = "-") THEN
                        INC index
                    END IF
                    CHECK index < json.length() AND "0" <= json[index] <= "9" ELSE
                        RETURN JsonResult.error(DecodeError(message WITH "digit expected", index WITH start))
                    END CHECK
                    WHILE index < json.length() AND "0" <= json[index] <= "9" DO
                        INC index
                    END WHILE
                END IF
                RETURN JsonResult.data(num(json[start TO index-1]))
            WHEN "\"" DO
                INC index
                VAR t: String := ""
                WHILE index < json.length() AND json[index] <> "\"" DO
                    CHECK 0x20 <= string.toCodePoint(json[index]) <= 0x10ffff ELSE
                        RETURN JsonResult.error(DecodeError(message WITH "invalid character", index WITH index))
                    END CHECK
                    IF json[index] = "\\" THEN
                        INC index
                        CHECK index < json.length() ELSE
                            EXIT WHILE
                        END CHECK
                        CASE json[index]
                            WHEN "\"", "\\", "/" DO
                                t.append(json[index])
                            WHEN "b" DO
                                t.append("\b")
                            WHEN "f" DO
                                t.append("\f")
                            WHEN "n" DO
                                t.append("\n")
                            WHEN "r" DO
                                t.append("\r")
                            WHEN "t" DO
                                t.append("\t")
                            WHEN "u" DO
                                VAR char: Number := 0
                                FOR i := 1 TO 4 DO
                                    IF "0" <= json[index+i] <= "9" THEN
                                        char := char * 0x10 + (string.toCodePoint(json[index+i]) - string.toCodePoint("0"))
                                    ELSIF "a" <= json[index+i] <= "f" THEN
                                        char := char * 0x10 + (string.toCodePoint(json[index+i]) - string.toCodePoint("a"))
                                    ELSIF "A" <= json[index+i] <= "F" THEN
                                        char := char * 0x10 + (string.toCodePoint(json[index+i]) - string.toCodePoint("A"))
                                    ELSE
                                        RETURN JsonResult.error(DecodeError(message WITH "invalid hex character", index WITH index+i))
                                    END IF
                                END FOR
                                t.append(string.fromCodePoint(char))
                                index := index + 4
                            WHEN OTHERS DO
                                RETURN JsonResult.error(DecodeError(message WITH "invalid escape sequence", index WITH index))
                        END CASE
                    ELSE
                        t.append(json[index])
                    END IF
                    INC index
                END WHILE
                CHECK index < json.length() ELSE
                    RETURN JsonResult.error(DecodeError(message WITH "missing trailing quote", index WITH index))
                END CHECK
                INC index
                RETURN JsonResult.data(t)
            WHEN "[" DO
                INC index
                VAR a: Array<Object> := []
                skipWhitespace(json, INOUT index)
                IF index < json.length() AND json[index] = "]" THEN
                    INC index
                    RETURN JsonResult.data(a)
                END IF
                LOOP
                    LET t := decodePart(json, INOUT index)
                    CHECK t ISA JsonResult.data ELSE
                        RETURN t
                    END CHECK
                    a.append(t.data)
                    skipWhitespace(json, INOUT index)
                    IF index < json.length() AND json[index] = "," THEN
                        INC index
                    ELSIF index < json.length() AND json[index] = "]" THEN
                        EXIT LOOP
                    ELSE
                        RETURN JsonResult.error(DecodeError(message WITH ", or ] expected", index WITH index))
                    END IF
                    skipWhitespace(json, INOUT index)
                END LOOP
                INC index
                RETURN JsonResult.data(a)
            WHEN "{" DO
                INC index
                VAR d: Dictionary<Object> := {}
                skipWhitespace(json, INOUT index)
                IF index < json.length() AND json[index] = "}" THEN
                    INC index
                    RETURN JsonResult.data(d)
                END IF
                LOOP
                    VAR r := decodePart(json, INOUT index)
                    CHECK r ISA JsonResult.data ELSE
                        RETURN r
                    END CHECK
                    IF NOT (r.data ISA String) THEN
                        RETURN JsonResult.error(DecodeError(message WITH "string key expected", index WITH index))
                    END IF
                    LET key: String := r.data
                    skipWhitespace(json, INOUT index)
                    IF index >= json.length() OR json[index] <> ":" THEN
                        RETURN JsonResult.error(DecodeError(message WITH ": expected", index WITH index))
                    END IF
                    INC index
                    r := decodePart(json, INOUT index)
                    CHECK r ISA JsonResult.data ELSE
                        RETURN r
                    END CHECK
                    d[key] := r.data
                    skipWhitespace(json, INOUT index)
                    IF index < json.length() AND json[index] = "," THEN
                        INC index
                    ELSIF index < json.length() AND json[index] = "}" THEN
                        EXIT LOOP
                    ELSE
                        RETURN JsonResult.error(DecodeError(message WITH ", or } expected", index WITH index))
                    END IF
                    skipWhitespace(json, INOUT index)
                END LOOP
                INC index
                RETURN JsonResult.data(d)
        END CASE
    END IF
    RETURN JsonResult.error(DecodeError(message WITH "value expected", index WITH index))
END FUNCTION

/*  Function: decode
 *
 *  Decode JSON data in a string to a result in a <Object>.
 */
FUNCTION decode(json: String): JsonResult
    VAR i: Number := 0
    LET r := decodePart(json, INOUT i)
    CHECK r ISA JsonResult.data ELSE
        RETURN r
    END CHECK
    skipWhitespace(json, INOUT i)
    IF i < json.length() THEN
        RETURN JsonResult.error(DecodeError(message WITH "unexpected input after value", index WITH i))
    END IF
    RETURN r
END FUNCTION

/*  Function: encode
 *
 *  Encode a value in a <Object> to JSON data in a string.
 */
FUNCTION encode(data: Object): String
    IF data = NIL THEN
        RETURN "null"
    END IF
    CASE data
        WHEN ISA Boolean DO
            RETURN (IF data THEN "true" ELSE "false")
        WHEN ISA Number DO
            RETURN str(data)
        WHEN ISA String DO
            RETURN "\"" & data & "\""
        WHEN ISA Array<Object> DO
            VAR r: String := "["
            LET a: Array<Object> := data
            FOREACH x IN a DO
                IF r.length() > 1 THEN
                    r.append(",")
                END IF
                r.append(encode(x))
            END FOREACH
            r.append("]")
            RETURN r
        WHEN ISA Dictionary<Object> DO
            VAR r: String := "{"
            LET d: Dictionary<Object> := data
            LET keys: Array<String> := d.keys()
            -- TODO: This should just be d.keys(), see t/foreach-value.neon
            FOREACH x IN keys DO
                IF r.length() > 1 THEN
                    r.append(",")
                END IF
                r.append(encode(x) & ":" & encode(d[x]))
            END FOREACH
            r.append("}")
            RETURN r
    END CASE
    RETURN "?unknown"
END FUNCTION
