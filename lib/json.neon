/*  File: json
 *
 *  Functions for reading and writing files in JSON format (<http://json.org>).
 */

IMPORT string

EXPORT decode
EXPORT encode

/* TODO: This encoder and decoder does not handle all backslash
 * character escapes yet.
 * TODO: Also, this could probably be improved a lot by using regex.
 */

/*  Exception: JsonFormatException
 *
 *  Indicates that a formatting error was encountered when reading JSON.
 */
EXCEPTION JsonFormatException

FUNCTION skipWhitespace(json: String, INOUT index: Number)
    WHILE index < json.length() AND (json[index] = " " OR json[index] = "\t" OR json[index] = "\r" OR json[index] = "\n") DO
        INC index
    END WHILE
END FUNCTION

FUNCTION decodePart(json: String, INOUT index: Number): Object
    skipWhitespace(json, INOUT index)
    IF index < json.length() THEN
        CASE json[index]
            WHEN "a" TO "z" DO
                LET start: Number := index
                WHILE index < json.length() AND "a" <= json[index] <= "z" DO
                    INC index
                END WHILE
                LET s: String := json[start TO index-1]
                CASE s
                    WHEN "null" DO
                        RETURN NIL
                    WHEN "false" DO
                        RETURN FALSE
                    WHEN "true" DO
                        RETURN TRUE
                    WHEN OTHERS DO
                        RAISE JsonFormatException("null or false or true expected")
                END CASE
            WHEN "-", "0" TO "9" DO
                LET start: Number := index
                IF json[index] = "-" THEN
                    INC index
                END IF
                IF index < json.length() AND json[index] = "0" THEN
                    INC index
                ELSE
                    CHECK index < json.length() AND "1" <= json[index] <= "9" ELSE
                        RAISE JsonFormatException("digit expected")
                    END CHECK
                    INC index
                    WHILE index < json.length() AND "0" <= json[index] <= "9" DO
                        INC index
                    END WHILE
                END IF
                IF index < json.length() AND json[index] = "." THEN
                    INC index
                    CHECK index < json.length() AND "0" <= json[index] <= "9" ELSE
                        RAISE JsonFormatException("digit expected")
                    END CHECK
                    WHILE index < json.length() AND "0" <= json[index] <= "9" DO
                        INC index
                    END WHILE
                END IF
                IF index < json.length() AND (json[index] = "e" OR json[index] = "E") THEN
                    INC index
                    IF index < json.length() AND (json[index] = "+" OR json[index] = "-") THEN
                        INC index
                    END IF
                    CHECK index < json.length() AND "0" <= json[index] <= "9" ELSE
                        RAISE JsonFormatException("digit expected")
                    END CHECK
                    WHILE index < json.length() AND "0" <= json[index] <= "9" DO
                        INC index
                    END WHILE
                END IF
                RETURN num(json[start TO index-1])
            WHEN "\"" DO
                INC index
                VAR t: String := ""
                WHILE index < json.length() AND json[index] <> "\"" DO
                    CHECK 0x20 <= string.toCodePoint(json[index]) <= 0x10ffff ELSE
                        RAISE JsonFormatException("invalid character")
                    END CHECK
                    IF json[index] = "\\" THEN
                        INC index
                        CHECK index < json.length() ELSE
                            EXIT WHILE
                        END CHECK
                        CASE json[index]
                            WHEN "\"", "\\", "/" DO
                                t.append(json[index])
                            WHEN "b" DO
                                t.append("\b")
                            WHEN "f" DO
                                t.append("\f")
                            WHEN "n" DO
                                t.append("\n")
                            WHEN "r" DO
                                t.append("\r")
                            WHEN "t" DO
                                t.append("\t")
                            WHEN "u" DO
                                VAR char: Number := 0
                                FOR i := 1 TO 4 DO
                                    IF "0" <= json[index+i] <= "9" THEN
                                        char := char * 0x10 + (string.toCodePoint(json[index+i]) - string.toCodePoint("0"))
                                    ELSIF "a" <= json[index+i] <= "f" THEN
                                        char := char * 0x10 + (string.toCodePoint(json[index+i]) - string.toCodePoint("a"))
                                    ELSIF "A" <= json[index+i] <= "F" THEN
                                        char := char * 0x10 + (string.toCodePoint(json[index+i]) - string.toCodePoint("A"))
                                    ELSE
                                        RAISE JsonFormatException("invalid hex character")
                                    END IF
                                END FOR
                                t.append(string.fromCodePoint(char))
                                index := index + 4
                            WHEN OTHERS DO
                                RAISE JsonFormatException("invalid escape sequence")
                        END CASE
                    ELSE
                        t.append(json[index])
                    END IF
                    INC index
                END WHILE
                CHECK index < json.length() ELSE
                    RAISE JsonFormatException("missing trailing quote")
                END CHECK
                INC index
                RETURN t
            WHEN "[" DO
                INC index
                VAR a: Array<Object> := []
                skipWhitespace(json, INOUT index)
                IF index < json.length() AND json[index] = "]" THEN
                    INC index
                    RETURN a
                END IF
                LOOP
                    a.append(decodePart(json, INOUT index))
                    skipWhitespace(json, INOUT index)
                    IF index < json.length() AND json[index] = "," THEN
                        INC index
                    ELSIF index < json.length() AND json[index] = "]" THEN
                        EXIT LOOP
                    ELSE
                        RAISE JsonFormatException(", or ] expected")
                    END IF
                    skipWhitespace(json, INOUT index)
                END LOOP
                INC index
                RETURN a
            WHEN "{" DO
                INC index
                VAR d: Dictionary<Object> := {}
                skipWhitespace(json, INOUT index)
                IF index < json.length() AND json[index] = "}" THEN
                    INC index
                    RETURN d
                END IF
                LOOP
                    LET vkey: Object := decodePart(json, INOUT index)
                    IF NOT (vkey ISA String) THEN
                        RAISE JsonFormatException("string key expected")
                    END IF
                    LET key: String := vkey
                    skipWhitespace(json, INOUT index)
                    IF index >= json.length() OR json[index] <> ":" THEN
                        RAISE JsonFormatException(": expected")
                    END IF
                    INC index
                    d[key] := decodePart(json, INOUT index)
                    skipWhitespace(json, INOUT index)
                    IF index < json.length() AND json[index] = "," THEN
                        INC index
                    ELSIF index < json.length() AND json[index] = "}" THEN
                        EXIT LOOP
                    ELSE
                        RAISE JsonFormatException(", or } expected")
                    END IF
                    skipWhitespace(json, INOUT index)
                END LOOP
                INC index
                RETURN d
        END CASE
    END IF
    RAISE JsonFormatException("value expected")
END FUNCTION

/*  Function: decode
 *
 *  Decode JSON data in a string to a result in a <Object>.
 */
FUNCTION decode(json: String): Object
    VAR i: Number := 0
    LET r: Object := decodePart(json, INOUT i)
    skipWhitespace(json, INOUT i)
    IF i < json.length() THEN
        RAISE JsonFormatException("unexpected input after value")
    END IF
    RETURN r
END FUNCTION

/*  Function: encode
 *
 *  Encode a value in a <Object> to JSON data in a string.
 */
FUNCTION encode(data: Object): String
    IF data = NIL THEN
        RETURN "null"
    END IF
    CASE data
        WHEN ISA Boolean DO
            RETURN (IF data THEN "true" ELSE "false")
        WHEN ISA Number DO
            RETURN str(data)
        WHEN ISA String DO
            RETURN "\"" & data & "\""
        WHEN ISA Array<Object> DO
            VAR r: String := "["
            LET a: Array<Object> := data
            FOREACH x IN a DO
                IF r.length() > 1 THEN
                    r.append(",")
                END IF
                r.append(encode(x))
            END FOREACH
            r.append("]")
            RETURN r
        WHEN ISA Dictionary<Object> DO
            VAR r: String := "{"
            LET d: Dictionary<Object> := data
            LET keys: Array<String> := d.keys()
            -- TODO: This should just be d.keys(), see t/foreach-value.neon
            FOREACH x IN keys DO
                IF r.length() > 1 THEN
                    r.append(",")
                END IF
                r.append(encode(x) & ":" & encode(d[x]))
            END FOREACH
            r.append("}")
            RETURN r
    END CASE
    RETURN "?unknown"
END FUNCTION
