IMPORT http
IMPORT json
IMPORT os
IMPORT string
IMPORT sys
IMPORT time
IMPORT variant

CONSTANT Port: Number := 20179

FUNCTION get(url: String): variant.Variant
    LET data: String := http.get("http://127.0.0.1:\(Port)\(url)", {}, OUT responseHeaders WITH _).decodeToString()
    RETURN json.decode(data)
END FUNCTION

FUNCTION post(url: String, post_data: String): variant.Variant
    LET data: String := http.post("http://127.0.0.1:\(Port)\(url)", post_data, {}, OUT responseHeaders WITH _).decodeToString()
    RETURN json.decode(data)
END FUNCTION

FUNCTION help()
    print(@@"
Debugger Commands:

    b  break    Set a breakpoint on a source line number
    c  clear    Clear a breakpoint on a source line number
    h  help     Print this help message
    n  next     Next source line
    ni next-in  Next source line, stepping in to functions
    no next-out Next source line after return from the current function
    p  print    Print value of variable
    q  quit     Quit
    r  run      Run until the next breakpoint
    s  stack    Print current operand stack
"@@)
END FUNCTION

TYPE Global IS RECORD
    index: Number
    repr: String
END RECORD

VAR Source: Array<String> := []
VAR LineFromAddress: Array<Number> := []
VAR AddressFromLine: Array<Number> := []
VAR Globals: Dictionary<Global> := {}

print("Neon debugger. Type 'help' for help.")

LET target: os.Process := os.spawn("bin/neon -d \(Port) \(sys.args[1])")
time.sleep(0.1)
VAR r: variant.Variant

r := get("/module/-/debuginfo")
FOREACH s IN r.getDictionary()["source"].getArray() INDEX i DO
    Source[i] := s.getString()
END FOREACH
FOREACH ln IN r.getDictionary()["line_numbers"].getArray() DO
    LET addr: Number := ln.getArray()[0].getNumber()
    LET line: Number := ln.getArray()[1].getNumber()
    LineFromAddress[addr] := line
    AddressFromLine[line] := addr
END FOREACH
FOREACH g IN r.getDictionary()["globals"].getArray() DO
    Globals[g.getDictionary()["name"].getString()] := Global(
        index WITH g.getDictionary()["index"].getNumber(),
        repr WITH g.getDictionary()["type"].getDictionary()["representation"].getString()
    )
END FOREACH

VAR last: String := ""
LOOP
    REPEAT
        time.sleep(0.1)
        TRY
            r := get("/status")
        TRAP http.HttpException DO
            EXIT LOOP
        END TRY
    UNTIL r.getDictionary()["state"].getString() = "stopped"

    IF r.getDictionary()["log_messages"].getNumber() > 0 THEN
        LET log: variant.Variant := post("/log", "")
        FOREACH message IN log.getArray() DO
            print(message.getString())
        END FOREACH
    END IF

    LET ip: Number := r.getDictionary()["ip"].getNumber()
    IF LineFromAddress[ip] > 0 THEN
        print("\(LineFromAddress[ip]) | \(Source[LineFromAddress[ip]])")
    ELSE
        print("ip \(ip)")
    END IF

    VAR s: String := input("ndb> ")
    IF s = "" THEN
        s := last
    ELSE
        last := s
    END IF

    LET a: Array<String> := string.split(s, " ")
    IF a[0] IN ["b", "break"] THEN
        r := post("/break/\(AddressFromLine[num(a[1])])", "true")
    ELSIF a[0] IN ["c", "clear"] THEN
        r := post("/break/\(AddressFromLine[num(a[1])])", "false")
    ELSIF a[0] IN ["h", "help"] THEN
        help()
    ELSIF a[0] IN ["n", "next"] THEN
        r := post("/step/source/0", "")
    ELSIF a[0] IN ["ni", "next-in"] THEN
        r := post("/step/source/1", "")
    ELSIF a[0] IN ["no", "next-out"] THEN
        r := post("/step/source/-1", "")
    ELSIF a[0] IN ["p", "print"] THEN
        LET g: Global := Globals[a[1]]
        r := get("/module/-/global/\(g.index)")
        LET v: variant.Variant := r.getDictionary()["value"]
        print("\(v)")
    ELSIF a[0] IN ["q", "quit"] THEN
        r := post("/quit", "")
        EXIT LOOP
    ELSIF a[0] IN ["r", "run"] THEN
        r := post("/continue", "")
    ELSIF a[0] IN ["s", "stack"] THEN
        r := get("/opstack")
        print(r.toString())
    ELSE
        print("Unknown command: \(a[0])")
    END IF
END LOOP
