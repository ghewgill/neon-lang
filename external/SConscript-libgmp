import os
import shutil
import sys
import tarfile

Import("env")

gmpenv = Environment()

if GetOption("clean"):
    shutil.rmtree("gmp-6.1.2", ignore_errors=True)
elif not os.path.exists("gmp-6.1.2/configure"):
    tarfile.open("gmp-6.1.2.tar.bz2").extractall(".")
    if sys.platform == "win32":
        gmp_h = open("gmp-6.1.2/gmp-h.in").read()
        gmp_h = gmp_h.replace("@HAVE_HOST_CPU_FAMILY_power@", "0")
        gmp_h = gmp_h.replace("@HAVE_HOST_CPU_FAMILY_powerpc@", "0")
        gmp_h = gmp_h.replace("@GMP_LIMB_BITS@", "32")
        gmp_h = gmp_h.replace("@GMP_NAIL_BITS@", "0")
        gmp_h = gmp_h.replace("@DEFN_LONG_LONG_LIMB@", "")
        gmp_h = gmp_h.replace("@LIBGMP_DLL@", "0")
        gmp_h = gmp_h.replace("@CC@", "cl")
        gmp_h = gmp_h.replace("@CFLAGS@", "")
        open("gmp-6.1.2/gmp.h", "w").write(gmp_h)
        config_h = open("gmp-6.1.2/config.in").read()
        config_h = config_h.replace("#undef WANT_TMP_ALLOCA", "#define WANT_TMP_ALLOCA 1")
        config_h = config_h.replace("#undef inline", "/*#undef inline*/")
        open("gmp-6.1.2/config.h", "w").write(config_h)

if sys.platform == "win32":
    if not env["RELEASE"]:
        gmpenv.Append(CFLAGS=["/MTd"])
    else:
        gmpenv.Append(CFLAGS=["/MT"])
    gmpenv.Append(CPPPATH=[Dir("gmp-6.1.2"), Dir("gmp-6.1.2/mpn/x86")])
    gen_fib = gmpenv.Program("gmp-6.1.2/gen-fib", "gmp-6.1.2/gen-fib.c")
    fib_table_h = gmpenv.Command("gmp-6.1.2/fib_table.h", gen_fib, gen_fib[0].abspath + " header 32 0 >$TARGET")
    gen_fac = gmpenv.Program("gmp-6.1.2/gen-fac", "gmp-6.1.2/gen-fac.c")
    fac_table_h = gmpenv.Command("gmp-6.1.2/fac_table.h", gen_fac, gen_fac[0].abspath + " 32 0 >$TARGET")
    gen_bases = gmpenv.Program("gmp-6.1.2/gen-bases", "gmp-6.1.2/gen-bases.c")
    mp_bases_h = gmpenv.Command("gmp-6.1.2/mp_bases.h", gen_bases, gen_bases[0].abspath + " header 32 0 >$TARGET")
    mp_bases_c = gmpenv.Command("gmp-6.1.2/mp_bases.c", gen_bases, gen_bases[0].abspath + " table 32 0 >$TARGET")
    libgmp = gmpenv.Library("gmp-6.1.2/gmp.lib", [
        "gmp-6.1.2/assert.c",
        "gmp-6.1.2/errno.c",
        "gmp-6.1.2/memory.c",
        "gmp-6.1.2/mp_bases.c",
        "gmp-6.1.2/mp_bpl.c",
        "gmp-6.1.2/mp_clz_tab.c",
        "gmp-6.1.2/mp_dv_tab.c",
        "gmp-6.1.2/mp_get_fns.c",
        "gmp-6.1.2/mp_minv_tab.c",
        "gmp-6.1.2/tal-reent.c",
        "gmp-6.1.2/mpn/generic/add.c",
        "gmp-6.1.2/mpn/generic/add_n.c",
        "gmp-6.1.2/mpn/generic/addmul_1.c",
        "gmp-6.1.2/mpn/generic/bdiv_dbm1c.c",
        "gmp-6.1.2/mpn/generic/binvert.c",
        "gmp-6.1.2/mpn/generic/com.c",
        "gmp-6.1.2/mpn/generic/dcpi1_bdiv_q.c",
        "gmp-6.1.2/mpn/generic/dcpi1_bdiv_qr.c",
        "gmp-6.1.2/mpn/generic/dcpi1_div_q.c",
        "gmp-6.1.2/mpn/generic/dcpi1_div_qr.c",
        "gmp-6.1.2/mpn/generic/dcpi1_divappr_q.c",
        "gmp-6.1.2/mpn/generic/divis.c",
        "gmp-6.1.2/mpn/generic/div_q.c",
        "gmp-6.1.2/mpn/generic/dive_1.c",
        "gmp-6.1.2/mpn/generic/divexact.c",
        "gmp-6.1.2/mpn/generic/divrem_1.c",
        "gmp-6.1.2/mpn/generic/divrem_2.c",
        "gmp-6.1.2/mpn/generic/get_d.c",
        "gmp-6.1.2/mpn/generic/get_str.c",
        "gmp-6.1.2/mpn/generic/invertappr.c",
        "gmp-6.1.2/mpn/generic/lshift.c",
        "gmp-6.1.2/mpn/generic/lshiftc.c",
        "gmp-6.1.2/mpn/generic/mod_1.c",
        "gmp-6.1.2/mpn/generic/mod_1_1.c",
        "gmp-6.1.2/mpn/generic/mod_1_2.c",
        "gmp-6.1.2/mpn/generic/mod_1_4.c",
        "gmp-6.1.2/mpn/generic/mode1o.c",
        "gmp-6.1.2/mpn/generic/mul.c",
        "gmp-6.1.2/mpn/generic/mul_1.c",
        "gmp-6.1.2/mpn/generic/mul_basecase.c",
        "gmp-6.1.2/mpn/generic/mul_fft.c",
        "gmp-6.1.2/mpn/generic/mul_n.c",
        "gmp-6.1.2/mpn/generic/mullo_basecase.c",
        "gmp-6.1.2/mpn/generic/mullo_n.c",
        "gmp-6.1.2/mpn/generic/mulmod_bnm1.c",
        "gmp-6.1.2/mpn/generic/mu_bdiv_qr.c",
        "gmp-6.1.2/mpn/generic/mu_div_q.c",
        "gmp-6.1.2/mpn/generic/mu_div_qr.c",
        "gmp-6.1.2/mpn/generic/mu_divappr_q.c",
        "gmp-6.1.2/mpn/generic/nussbaumer_mul.c",
        "gmp-6.1.2/mpn/generic/pre_divrem_1.c",
        "gmp-6.1.2/mpn/generic/rshift.c",
        "gmp-6.1.2/mpn/generic/sbpi1_bdiv_q.c",
        "gmp-6.1.2/mpn/generic/sbpi1_bdiv_qr.c",
        "gmp-6.1.2/mpn/generic/sbpi1_div_q.c",
        "gmp-6.1.2/mpn/generic/sbpi1_div_qr.c",
        "gmp-6.1.2/mpn/generic/sbpi1_divappr_q.c",
        "gmp-6.1.2/mpn/generic/set_str.c",
        "gmp-6.1.2/mpn/generic/sqr.c",
        "gmp-6.1.2/mpn/generic/sqr_basecase.c",
        "gmp-6.1.2/mpn/generic/sqrmod_bnm1.c",
        "gmp-6.1.2/mpn/generic/sub_n.c",
        "gmp-6.1.2/mpn/generic/submul_1.c",
        "gmp-6.1.2/mpn/generic/tdiv_qr.c",
        "gmp-6.1.2/mpn/generic/toom2_sqr.c",
        "gmp-6.1.2/mpn/generic/toom22_mul.c",
        "gmp-6.1.2/mpn/generic/toom3_sqr.c",
        "gmp-6.1.2/mpn/generic/toom32_mul.c",
        "gmp-6.1.2/mpn/generic/toom33_mul.c",
        "gmp-6.1.2/mpn/generic/toom4_sqr.c",
        "gmp-6.1.2/mpn/generic/toom42_mul.c",
        "gmp-6.1.2/mpn/generic/toom43_mul.c",
        "gmp-6.1.2/mpn/generic/toom44_mul.c",
        "gmp-6.1.2/mpn/generic/toom53_mul.c",
        "gmp-6.1.2/mpn/generic/toom6_sqr.c",
        "gmp-6.1.2/mpn/generic/toom63_mul.c",
        "gmp-6.1.2/mpn/generic/toom6h_mul.c",
        "gmp-6.1.2/mpn/generic/toom8_sqr.c",
        "gmp-6.1.2/mpn/generic/toom8h_mul.c",
        "gmp-6.1.2/mpn/generic/toom_couple_handling.c",
        "gmp-6.1.2/mpn/generic/toom_eval_dgr3_pm1.c",
        "gmp-6.1.2/mpn/generic/toom_eval_dgr3_pm2.c",
        "gmp-6.1.2/mpn/generic/toom_eval_pm1.c",
        "gmp-6.1.2/mpn/generic/toom_eval_pm2.c",
        "gmp-6.1.2/mpn/generic/toom_eval_pm2exp.c",
        "gmp-6.1.2/mpn/generic/toom_eval_pm2rexp.c",
        "gmp-6.1.2/mpn/generic/toom_interpolate_12pts.c",
        "gmp-6.1.2/mpn/generic/toom_interpolate_16pts.c",
        "gmp-6.1.2/mpn/generic/toom_interpolate_5pts.c",
        "gmp-6.1.2/mpn/generic/toom_interpolate_6pts.c",
        "gmp-6.1.2/mpn/generic/toom_interpolate_7pts.c",
        "gmp-6.1.2/mpn/generic/toom_interpolate_8pts.c",
        "gmp-6.1.2/mpz/abs.c",
        "gmp-6.1.2/mpz/add.c",
        "gmp-6.1.2/mpz/add_ui.c",
        "gmp-6.1.2/mpz/cfdiv_q_2exp.c",
        "gmp-6.1.2/mpz/clear.c",
        "gmp-6.1.2/mpz/cmp.c",
        "gmp-6.1.2/mpz/cmp_si.c",
        "gmp-6.1.2/mpz/divis.c",
        "gmp-6.1.2/mpz/fdiv_r.c",
        "gmp-6.1.2/mpz/get_d.c",
        "gmp-6.1.2/mpz/get_si.c",
        "gmp-6.1.2/mpz/get_str.c",
        "gmp-6.1.2/mpz/init.c",
        "gmp-6.1.2/mpz/iset.c",
        "gmp-6.1.2/mpz/iset_si.c",
        "gmp-6.1.2/mpz/iset_str.c",
        "gmp-6.1.2/mpz/iset_ui.c",
        "gmp-6.1.2/mpz/mul.c",
        "gmp-6.1.2/mpz/mul_2exp.c",
        "gmp-6.1.2/mpz/n_pow_ui.c",
        "gmp-6.1.2/mpz/pow_ui.c",
        "gmp-6.1.2/mpz/realloc.c",
        "gmp-6.1.2/mpz/set.c",
        "gmp-6.1.2/mpz/set_str.c",
        "gmp-6.1.2/mpz/set_ui.c",
        "gmp-6.1.2/mpz/sub.c",
        "gmp-6.1.2/mpz/tdiv_q.c",
        "gmp-6.1.2/mpz/tdiv_r.c",
        "gmp-6.1.2/mpz/tdiv_r_ui.c",
    ])
    gmpenv.Depends(libgmp, [fib_table_h, fac_table_h, mp_bases_h])
else:
    libgmp = gmpenv.Command("lib/libgmp.a", "gmp-6.1.2/configure", "cd external/gmp-6.1.2 && ./configure --prefix=`pwd`/.. --enable-cxx && make && make install")

if sys.platform == "win32":
    env.Append(CPPPATH=[Dir("gmp-6.1.2")])
else:
    # Avoid triggering warnings like -Weffc++ on these headers.
    env.Append(CPPFLAGS=["-isystem", "external/include"])
env.Append(LIBS=libgmp)

Return(["libgmp"])
