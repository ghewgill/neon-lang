import os
import shutil
import sys
import tarfile

Import("env")

liblzma = None
include_lzma = None

lzmaenv = Environment()
if not env["RELEASE"]:
    if sys.platform == "win32":
        lzmaenv.Append(CFLAGS=["/MTd"])

if GetOption("clean"):
    shutil.rmtree("xz-5.2.1", ignore_errors=True)
elif not os.path.exists("xz-5.2.1/configure"):
    tarfile.open("xz-5.2.1.tar.gz").extractall(".")

if sys.platform == "win32":
    env.Append(CPPDEFINES=[
        "LZMA_API_STATIC",
    ])
    lzmaenv.Append(CPPDEFINES=[
        "LZMA_API_STATIC",
    ])
    lzmaenv.Append(CPPPATH=[
        "xz-5.2.1/src/common",
        "xz-5.2.1/src/liblzma/api",
        "xz-5.2.1/src/liblzma/check",
        "xz-5.2.1/src/liblzma/common",
        "xz-5.2.1/src/liblzma/delta",
        "xz-5.2.1/src/liblzma/lz",
        "xz-5.2.1/src/liblzma/lzma",
        "xz-5.2.1/src/liblzma/rangecoder",
        "xz-5.2.1/src/liblzma/simple",
        "xz-5.2.1/windows",
    ])
    lzmaenv.Append(CPPDEFINES=[
        ("DWORD", "unsigned long"),
        "HAVE_CONFIG_H",
    ])
    liblzma = lzmaenv.Library("xz-5.2.1/src/liblzma/liblzma.lib", [
        "xz-5.2.1/src/liblzma/check/check.c",
        "xz-5.2.1/src/liblzma/check/crc32_fast.c",
        "xz-5.2.1/src/liblzma/check/crc32_table.c",
        "xz-5.2.1/src/liblzma/check/crc64_fast.c",
        "xz-5.2.1/src/liblzma/check/crc64_table.c",
        "xz-5.2.1/src/liblzma/check/sha256.c",
        "xz-5.2.1/src/liblzma/delta/delta_common.c",
        "xz-5.2.1/src/liblzma/delta/delta_decoder.c",
        "xz-5.2.1/src/liblzma/delta/delta_encoder.c",
        "xz-5.2.1/src/liblzma/common/block_header_decoder.c",
        "xz-5.2.1/src/liblzma/common/block_header_encoder.c",
        "xz-5.2.1/src/liblzma/common/block_buffer_encoder.c",
        "xz-5.2.1/src/liblzma/common/block_decoder.c",
        "xz-5.2.1/src/liblzma/common/block_util.c",
        "xz-5.2.1/src/liblzma/common/common.c",
        "xz-5.2.1/src/liblzma/common/easy_buffer_encoder.c",
        "xz-5.2.1/src/liblzma/common/easy_preset.c",
        "xz-5.2.1/src/liblzma/common/filter_common.c",
        "xz-5.2.1/src/liblzma/common/filter_decoder.c",
        "xz-5.2.1/src/liblzma/common/filter_encoder.c",
        "xz-5.2.1/src/liblzma/common/filter_flags_decoder.c",
        "xz-5.2.1/src/liblzma/common/filter_flags_encoder.c",
        "xz-5.2.1/src/liblzma/common/index.c",
        "xz-5.2.1/src/liblzma/common/index_encoder.c",
        "xz-5.2.1/src/liblzma/common/index_hash.c",
        "xz-5.2.1/src/liblzma/common/stream_buffer_decoder.c",
        "xz-5.2.1/src/liblzma/common/stream_buffer_encoder.c",
        "xz-5.2.1/src/liblzma/common/stream_decoder.c",
        "xz-5.2.1/src/liblzma/common/stream_flags_common.c",
        "xz-5.2.1/src/liblzma/common/stream_flags_decoder.c",
        "xz-5.2.1/src/liblzma/common/stream_flags_encoder.c",
        "xz-5.2.1/src/liblzma/common/vli_decoder.c",
        "xz-5.2.1/src/liblzma/common/vli_encoder.c",
        "xz-5.2.1/src/liblzma/common/vli_size.c",
        "xz-5.2.1/src/liblzma/lz/lz_decoder.c",
        "xz-5.2.1/src/liblzma/lz/lz_encoder.c",
        "xz-5.2.1/src/liblzma/lz/lz_encoder_mf.c",
        "xz-5.2.1/src/liblzma/lzma/fastpos_table.c",
        "xz-5.2.1/src/liblzma/lzma/lzma_decoder.c",
        "xz-5.2.1/src/liblzma/lzma/lzma_encoder.c",
        "xz-5.2.1/src/liblzma/lzma/lzma_encoder_optimum_fast.c",
        "xz-5.2.1/src/liblzma/lzma/lzma_encoder_optimum_normal.c",
        "xz-5.2.1/src/liblzma/lzma/lzma_encoder_presets.c",
        "xz-5.2.1/src/liblzma/lzma/lzma2_decoder.c",
        "xz-5.2.1/src/liblzma/lzma/lzma2_encoder.c",
        "xz-5.2.1/src/liblzma/rangecoder/price_table.c",
        "xz-5.2.1/src/liblzma/simple/arm.c",
        "xz-5.2.1/src/liblzma/simple/armthumb.c",
        "xz-5.2.1/src/liblzma/simple/ia64.c",
        "xz-5.2.1/src/liblzma/simple/powerpc.c",
        "xz-5.2.1/src/liblzma/simple/simple_coder.c",
        "xz-5.2.1/src/liblzma/simple/simple_decoder.c",
        "xz-5.2.1/src/liblzma/simple/simple_encoder.c",
        "xz-5.2.1/src/liblzma/simple/sparc.c",
        "xz-5.2.1/src/liblzma/simple/x86.c",
    ])
    include_lzma = "external/xz-5.2.1/src/liblzma/api"
else:
    conf = Configure(env)
    if not conf.CheckLibWithHeader("lzma", "lzma.h", "c"):
        liblzma = lzmaenv.Command("xz-5.2.1/src/liblzma/.libs/liblzma.a", "xz-5.2.1/configure", "cd external/xz-5.2.1 && ./configure && make")
        include_lzma = "external/xz-5.2.1/src/liblzma/api"
    conf.Finish()

Return(["liblzma", "include_lzma"])
