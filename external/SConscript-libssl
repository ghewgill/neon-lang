import os
import shutil
import stat
import sys
import tarfile

Import("env")

def replace(fn, t, r):
    data = open(fn).read()
    data = data.replace(t, r)
    open(fn, "w").write(data)

libssl = None

sslenv = Environment()
if not env["RELEASE"]:
    if sys.platform == "win32":
        sslenv.Append(CFLAGS=[
            "/MTd",
            "/Zi",
            "/Od",
        ])

if GetOption("clean"):
    def remove_readonly(function, path, excinfo):
        os.chmod(path, stat.S_IWRITE)
        os.remove(path)
    shutil.rmtree("libressl-2.2.4", ignore_errors=True, onerror=remove_readonly)
elif not os.path.exists("libressl-2.2.4/configure"):
    tarfile.open("libressl-2.2.4.tar.gz").extractall(".")
    if sys.platform == "win32":
        replace("libressl-2.2.4/include/compat/string.h", "static inline", "static")
        replace("libressl-2.2.4/crypto/md32_common.h", "static inline", "static")

if sys.platform == "win32":
    # This is just enough of libressl to build the SHA hash functions.
    sslenv.Append(CPPPATH=["libressl-2.2.4/include"])
    sslenv.Append(CPPPATH=["libressl-2.2.4/include/compat"])
    sslenv.Append(CPPPATH=["libressl-2.2.4/crypto"])
    libssl = sslenv.Library("libressl-2.2.4/libssl.lib", [
        "libressl-2.2.4/crypto/compat/explicit_bzero_win.c",
        "libressl-2.2.4/crypto/mem_clr.c",
        "libressl-2.2.4/crypto/sha/sha1_one.c",
        "libressl-2.2.4/crypto/sha/sha1dgst.c",
        "libressl-2.2.4/crypto/sha/sha256.c",
        "libressl-2.2.4/crypto/sha/sha512.c",
    ])
    env.Append(CPPPATH=["external/libressl-2.2.4/include"])
else:
    conf = Configure(env)
    if not conf.CheckLibWithHeader("ressl", "crypto.h", "C++"):
        libssl = sslenv.Command(["lib/libssl.a", "lib/libcrypto.a"], "libressl-2.2.4/configure", "cd external/libressl-2.2.4 && ./configure --prefix={} && make install".format(os.path.abspath(".")))
        env.Append(CPPPATH=["external/include"])
    conf.Finish()

Return(["libssl"])
