from __future__ import print_function

import os
import sys

Import(["env"])

envcnex = env.Clone()

if sys.platform == "win32":
    envcnex.Append(CFLAGS=[
        "/W4",
        "/WX",
        "/MDd",
        "/wd4996", # CRT deprecation warnings
    ])
else:
    envcnex.Append(CFLAGS=[
        "-std=c99",
        "-Wall",
        "-Werror",
    ])
    if "RELEASE" in envcnex and not envcnex["RELEASE"]:
        envcnex.Append(CFLAGS=[
            "-g",
        ])
    envcnex.Append(LIBS=["m", "dl"])

envcnex.Append(CPPPATH=[
    Dir("."),
    Dir("../../common"),
])

test_number_to_string_c = envcnex.Program("test_number_to_string_c", [
    "test_number_to_string.c",
    "number.c",
])

test_path_support = envcnex.Program("test_path_support", [
    "test_path_support.c",
    "support.c",
    "util.c",
])

test_string_support_c = envcnex.Program("test_string_support", [
    "test_string_support.c",
    "nstring.c",
    "util.c",
])

rtl_c = ([
    "lib/binary.c",
    "lib/datetime.c",
    "lib/io.c",
    "lib/file.c",
    "lib/math.c",
    "lib/net.c",
    "lib/os.c",
    "lib/random.c",
    "lib/runtime.c",
    "lib/sqlite.c",
    "lib/string.c",
    "lib/struct.c",
    "lib/sys.c",
    "lib/textio.c",
])

if os.name == "posix":
    rtl_c.extend([
        "rtl_posix.c",
        "lib/file_posix.c",
        "lib/mmap_posix.c",
        "lib/os_posix.c",
        "lib/posix.c",
        "lib/process_posix.c",
        "lib/time_posix.c",
    ])
    if sys.platform.startswith("darwin"):
        rtl_c.extend([
            "lib/time_darwin.c",
        ])
    elif sys.platform.startswith("linux"):
        rtl_c.extend([
            "lib/time_linux.c",
        ])
    else:
        print("Unsupported platform:", sys.platform, file=sys.stderr)
        sys.exit(1)
elif os.name == "nt":
    rtl_c.extend([
        "rtl_win32.c",
        "lib/file_win32.c",
        "lib/mmap_win32.c",
        "lib/os_win32.c",
        "lib/process_win32.c",
        "lib/time_win32.c",
    ])
else:
    print("Unsupported platform:", os.name, file=sys.stderr)
    sys.exit(1)

cnex = envcnex.Program("cnex", [
    "array.c",
    "bytecode.c",
    "cell.c",
    "cJSON.c",
    "cnex.c",
    "dictionary.c",
    "disassembly.c",
    "extension.c",
    "framestack.c",
    "global.c",
    "module.c",
    "nstring.c",
    "number.c",
    "object.c",
    "stack.c",
    "support.c",
    "util.c",
    rtl_c,
],
)

envcnex.Command("tests_number", test_number_to_string_c, test_number_to_string_c[0].path)
envcnex.Command("tests_paths", test_path_support, test_path_support[0].path)
envcnex.Command("test_string_support_c", test_string_support_c, test_string_support_c[0].path)

Return(["cnex"])
