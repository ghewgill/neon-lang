IMPORT binary
IMPORT file
IMPORT math
IMPORT sys
IMPORT textio

EXCEPTION InternalException

FUNCTION getVint(a: Array<Number>, INOUT i: Number): Number
    VAR r: Number := 0
    LOOP
        LET x: Number := a[i]
        INC i
        r := binary.or64(binary.shiftLeft64(r, 7), binary.and32(x, 0x7f))
        IF binary.and32(x, 0x80) = 0 THEN
            EXIT LOOP
        END IF
    END LOOP
    RETURN r
END FUNCTION

FUNCTION getStringTable(a: Array<Number>): Array<String>
    VAR r: Array<String> := []
    VAR i: Number := 0
    WHILE i < a.size() DO
        LET len: Number := getVint(a, INOUT i)
        r.append(a[i TO i+len-1].toBytes().decodeToString())
        i := i + len
    END WHILE
    RETURN r
END FUNCTION

TYPE Import IS RECORD
    name: Number
    hash: Bytes
END RECORD

TYPE Function IS RECORD
    name: Number
    nest: Number
    params: Number
    locals: Number
    entry: Number
END RECORD

TYPE Exception IS RECORD
    start: Number
    end: Number
    excid: Number
    handler: Number
    stack_depth: Number
END RECORD

TYPE ClassInfo IS RECORD
    name: Number
    interfaces: Array<Array<Number>>
END RECORD

TYPE Bytecode IS RECORD
    sourceHash: Bytes
    globalSize: Number
    strtable: Array<String>
    imports: Array<Import>
    functions: Array<Function>
    exceptions: Array<Exception>
    classes: Array<ClassInfo>
    code: Array<Number>
END RECORD

FUNCTION decodeBytecode(bytes: Bytes): Bytecode
    VAR r: Bytecode := Bytecode()
    LET a: Array<Number> := bytes.toArray()
    VAR i: Number := 0

    r.sourceHash := bytes[0 TO 31]
    i := i + 32
    r.globalSize := getVint(a, INOUT i)

    LET strtablesize: Number := getVint(a, INOUT i)
    r.strtable := getStringTable(a[i TO i+strtablesize-1])
    i := i + strtablesize

    LET typesize: Number := getVint(a, INOUT i)
    ASSERT typesize = 0

    LET constantsize: Number := getVint(a, INOUT i)
    ASSERT constantsize = 0

    LET variablesize: Number := getVint(a, INOUT i)
    ASSERT variablesize = 0

    LET exportfunctionsize: Number := getVint(a, INOUT i)
    ASSERT exportfunctionsize = 0

    LET exceptionexportsize: Number := getVint(a, INOUT i)
    ASSERT exceptionexportsize = 0

    LET interfaceexportsize: Number := getVint(a, INOUT i)
    ASSERT interfaceexportsize = 0

    LET importsize: Number := getVint(a, INOUT i)
    FOR z := 1 TO importsize DO
        VAR imp: Import := Import()
        imp.name := getVint(a, INOUT i)
        imp.hash := bytes[i TO i+31]
        i := i + 32
        r.imports.append(imp)
    END FOR

    LET functionsize: Number := getVint(a, INOUT i)
    FOR z := 1 TO functionsize DO
        VAR f: Function := Function()
        f.name := getVint(a, INOUT i)
        f.nest := getVint(a, INOUT i)
        f.params := getVint(a, INOUT i)
        f.locals := getVint(a, INOUT i)
        f.entry := getVint(a, INOUT i)
        r.functions.append(f)
    END FOR

    LET exceptionsize: Number := getVint(a, INOUT i)
    FOR z := 1 TO exceptionsize DO
        VAR e: Exception := Exception()
        e.start := getVint(a, INOUT i)
        e.end := getVint(a, INOUT i)
        e.excid := getVint(a, INOUT i)
        e.handler := getVint(a, INOUT i)
        e.stack_depth := getVint(a, INOUT i)
        r.exceptions.append(e)
    END FOR

    LET classsize: Number := getVint(a, INOUT i)
    FOR z := 1 TO classsize DO
        VAR c: ClassInfo := ClassInfo()
        c.name := getVint(a, INOUT i)
        LET interfacecount: Number := getVint(a, INOUT i)
        FOR zi := 1 TO interfacecount DO
            LET methods: Array<Number> := []
            LET methodcount: Number := getVint(a, INOUT i)
            FOR zm := 1 TO methodcount DO
                methods.append(getVint(a, INOUT i))
            END FOR
            c.interfaces.append(methods)
        END FOR
        r.classes.append(c)
    END FOR

    r.code := a[i TO LAST]

    RETURN r
END FUNCTION

TYPE Value IS CLASS
    p: POINTER TO Value
    b: Boolean
    n: Number
    s: String
    a: Array<POINTER TO Value>
    d: Dictionary<POINTER TO Value>
    ci: ClassInfo
END CLASS

TYPE Frame IS RECORD
    locals: Array<POINTER TO Value>
    opstack_depth: Number
END RECORD

TYPE Executor IS RECORD
    bytecode: Bytecode
    ip: Number
    stack: Array<POINTER TO Value>
    callstack: Array<Number>
    globals: Array<POINTER TO Value>
    frames: Array<Frame>
END RECORD

LET DispatchTable: Array<FUNCTION(INOUT self: Executor)> := [
    f_pushb,
    f_pushn,
    f_pushs,
    f_pushy,
    f_pushpg,
    f_pushppg,
    f_pushpmg,
    f_pushpl,
    f_pushpol,
    f_pushi,
    f_loadb,
    f_loadn,
    f_loads,
    f_loady,
    f_loada,
    f_loadd,
    f_loadp,
    f_loadj,
    f_loadv,
    f_storeb,
    f_storen,
    f_stores,
    f_storet,
    f_storea,
    f_stored,
    f_storep,
    f_storej,
    f_storev,
    f_negn,
    f_addn,
    f_subn,
    f_muln,
    f_divn,
    f_modn,
    f_expn,
    f_eqb,
    f_neb,
    f_eqn,
    f_nen,
    f_ltn,
    f_gtn,
    f_len,
    f_gen,
    f_eqs,
    f_nes,
    f_lts,
    f_gts,
    f_les,
    f_ges,
    f_eqy,
    f_ney,
    f_lty,
    f_gty,
    f_ley,
    f_gey,
    f_eqa,
    f_nea,
    f_eqd,
    f_ned,
    f_eqp,
    f_nep,
    f_eqv,
    f_nev,
    f_andb,
    f_orb,
    f_notb,
    f_indexar,
    f_indexaw,
    f_indexav,
    f_indexan,
    f_indexdr,
    f_indexdw,
    f_indexdv,
    f_ina,
    f_ind,
    f_callp,
    f_callf,
    f_callmf,
    f_calli,
    f_jump,
    f_jf,
    f_jt,
    f_jfchain,
    f_dup,
    f_dupx1,
    f_drop,
    f_ret,
    f_consa,
    f_consd,
    f_except,
    f_alloc,
    f_pushnil,
    f_resetc,
    f_pushpeg,
    f_jumptbl,
    f_callx,
    f_swap,
    f_dropn,
    f_pushfp,
    f_callv,
    f_pushci,
]

FUNCTION Executor.run(INOUT self: Executor)
    WHILE self.ip < self.bytecode.code.size() DO
        %textio.writeLine(textio.stderr, "ip=\(self.ip) depth=\(self.stack.size())")
        LET f: FUNCTION(INOUT self: Executor) := DispatchTable[self.bytecode.code[self.ip]]
        f(INOUT self)
    END WHILE
END FUNCTION

FUNCTION Executor.pop(INOUT self: Executor): VALID POINTER TO Value
    LET r: POINTER TO Value := self.stack[LAST]
    CHECK VALID r ELSE
        RAISE InternalException
    END CHECK
    self.stack[LAST TO LAST] := []
    RETURN r
END FUNCTION

FUNCTION Executor.invoke(INOUT self: Executor, index: Number)
    self.callstack.append(self.ip)
    LET params: Number := self.bytecode.functions[index].params
    LET locals: Number := self.bytecode.functions[index].locals
    VAR frame: Frame := Frame()
    WHILE frame.locals.size() < locals DO
        frame.locals.append(NEW Value)
    END WHILE
    frame.opstack_depth := self.stack.size() - params
    self.frames.append(frame)
    self.ip := self.bytecode.functions[index].entry
END FUNCTION

FUNCTION Executor.raise_literal(INOUT self: Executor, exception: String, info: ExceptionInfo)
    VAR exceptionvar: Array<POINTER TO Value> := [
        NEW Value(s WITH exception),
        NEW Value(s WITH info.info),
        NEW Value(n WITH info.code),
        NEW Value(n WITH self.ip),
    ]
    VAR tip: Number := self.ip
    VAR sp: Number := self.callstack.size()
    LOOP
        FOREACH e IN self.bytecode.exceptions DO
            IF e.start <= tip < e.end THEN
                LET handler: String := self.bytecode.strtable[e.excid]
                IF exception = handler
                OR (exception.length() > handler.length() AND exception[FIRST TO handler.length()-1] = handler AND exception[handler.length()] = ".") THEN
                    self.ip := e.handler
                    WHILE self.stack.size() > (IF self.frames.size() = 0 THEN 0 ELSE self.frames[LAST].opstack_depth) + e.stack_depth DO
                        _ := self.pop()
                    END WHILE
                    self.callstack.resize(sp)
                    self.stack.append(NEW Value(a WITH exceptionvar))
                    EXIT FUNCTION
                END IF
            END IF
        END FOREACH
        IF sp = 0 THEN
            EXIT LOOP
        END IF
        DEC sp
        IF self.frames.size() > 0 THEN
            self.frames[LAST TO LAST] := []
        END IF
        tip := self.callstack[sp]
    END LOOP
    textio.writeLine(textio.stderr, "Unhandled exception \(exception) (\(info.info)) (code \(info.code))")
    sys.exit(1)
END FUNCTION

FUNCTION f_pushb(INOUT self: Executor)
    INC self.ip
    LET val: Number := self.bytecode.code[self.ip]
    INC self.ip
    self.stack.append(NEW Value(b WITH val <> 0))
END FUNCTION

FUNCTION f_pushn(INOUT self: Executor)
    INC self.ip
    LET val: Number := getVint(self.bytecode.code, INOUT self.ip)
    self.stack.append(NEW Value(n WITH num(self.bytecode.strtable[val])))
END FUNCTION

FUNCTION f_pushs(INOUT self: Executor)
    INC self.ip
    LET val: Number := getVint(self.bytecode.code, INOUT self.ip)
    self.stack.append(NEW Value(s WITH self.bytecode.strtable[val]))
END FUNCTION

FUNCTION f_pushy(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_pushpg(INOUT self: Executor)
    INC self.ip
    LET val: Number := getVint(self.bytecode.code, INOUT self.ip)
    self.stack.append(NEW Value(p WITH self.globals[val]))
END FUNCTION

FUNCTION f_pushppg(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_pushpmg(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_pushpl(INOUT self: Executor)
    INC self.ip
    LET addr: Number := getVint(self.bytecode.code, INOUT self.ip)
    self.stack.append(NEW Value(p WITH self.frames[LAST].locals[addr]))
END FUNCTION

FUNCTION f_pushpol(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_pushi(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_loadb(INOUT self: Executor)
    INC self.ip
    LET addr: POINTER TO Value := self.pop()->p
    CHECK VALID addr ELSE
        RAISE InternalException
    END CHECK
    self.stack.append(NEW Value(b WITH addr->b))
END FUNCTION

FUNCTION f_loadn(INOUT self: Executor)
    INC self.ip
    LET addr: POINTER TO Value := self.pop()->p
    IF VALID addr THEN
        self.stack.append(NEW Value(n WITH addr->n))
    ELSE
        ASSERT FALSE
    END IF
END FUNCTION

FUNCTION f_loads(INOUT self: Executor)
    INC self.ip
    LET addr: POINTER TO Value := self.pop()->p
    CHECK VALID addr ELSE
        RAISE InternalException
    END CHECK
    self.stack.append(NEW Value(s WITH addr->s))
END FUNCTION

FUNCTION f_loady(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_loada(INOUT self: Executor)
    INC self.ip
    LET addr: POINTER TO Value := self.pop()->p
    IF VALID addr THEN
        self.stack.append(NEW Value(a WITH addr->a))
    ELSE
        ASSERT FALSE
    END IF
END FUNCTION

FUNCTION f_loadd(INOUT self: Executor)
    INC self.ip
    LET addr: POINTER TO Value := self.pop()->p
    CHECK VALID addr ELSE
        RAISE InternalException
    END CHECK
    self.stack.append(NEW Value(d WITH addr->d))
END FUNCTION

FUNCTION f_loadp(INOUT self: Executor)
    INC self.ip
    LET addr: POINTER TO Value := self.pop()->p
    CHECK VALID addr ELSE
        RAISE InternalException
    END CHECK
    self.stack.append(NEW Value(p WITH addr->p))
END FUNCTION

FUNCTION f_loadj(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_loadv(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_storeb(INOUT self: Executor)
    INC self.ip
    LET addr: POINTER TO Value := self.pop()->p
    CHECK VALID addr ELSE
        RAISE InternalException
    END CHECK
    addr->b := self.pop()->b
END FUNCTION

FUNCTION f_storen(INOUT self: Executor)
    INC self.ip
    LET addr: POINTER TO Value := self.pop()->p
    IF VALID addr THEN
        addr->n := self.pop()->n
    ELSE
        ASSERT FALSE
    END IF
END FUNCTION

FUNCTION f_stores(INOUT self: Executor)
    INC self.ip
    LET addr: POINTER TO Value := self.pop()->p
    CHECK VALID addr ELSE
        RAISE InternalException
    END CHECK
    addr->s := self.pop()->s
END FUNCTION

FUNCTION f_storet(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_storea(INOUT self: Executor)
    INC self.ip
    LET addr: POINTER TO Value := self.pop()->p
    IF VALID addr THEN
        addr->a := self.pop()->a
    ELSE
        ASSERT FALSE
    END IF
END FUNCTION

FUNCTION f_stored(INOUT self: Executor)
    INC self.ip
    LET addr: POINTER TO Value := self.pop()->p
    CHECK VALID addr ELSE
        RAISE InternalException
    END CHECK
    addr->d := self.pop()->d
END FUNCTION

FUNCTION f_storep(INOUT self: Executor)
    INC self.ip
    LET addr: POINTER TO Value := self.pop()->p
    CHECK VALID addr ELSE
        RAISE InternalException
    END CHECK
    addr->p := self.pop()->p
END FUNCTION

FUNCTION f_storej(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_storev(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_negn(INOUT self: Executor)
    INC self.ip
    LET x: Number := self.pop()->n
    self.stack.append(NEW Value(n WITH -x))
END FUNCTION

FUNCTION f_addn(INOUT self: Executor)
    INC self.ip
    LET b: Number := self.pop()->n
    LET a: Number := self.pop()->n
    self.stack.append(NEW Value(n WITH a + b))
END FUNCTION

FUNCTION f_subn(INOUT self: Executor)
    INC self.ip
    LET b: Number := self.pop()->n
    LET a: Number := self.pop()->n
    self.stack.append(NEW Value(n WITH a - b))
END FUNCTION

FUNCTION f_muln(INOUT self: Executor)
    INC self.ip
    LET b: Number := self.pop()->n
    LET a: Number := self.pop()->n
    self.stack.append(NEW Value(n WITH a * b))
END FUNCTION

FUNCTION f_divn(INOUT self: Executor)
    INC self.ip
    LET b: Number := self.pop()->n
    LET a: Number := self.pop()->n
    CHECK b <> 0 ELSE
        self.raise_literal("DivideByZeroException", ExceptionInfo())
        EXIT FUNCTION
    END CHECK
    self.stack.append(NEW Value(n WITH a / b))
END FUNCTION

FUNCTION f_modn(INOUT self: Executor)
    INC self.ip
    LET b: Number := self.pop()->n
    LET a: Number := self.pop()->n
    self.stack.append(NEW Value(n WITH a MOD b))
END FUNCTION

FUNCTION f_expn(INOUT self: Executor)
    INC self.ip
    LET b: Number := self.pop()->n
    LET a: Number := self.pop()->n
    self.stack.append(NEW Value(n WITH a ^ b))
END FUNCTION

FUNCTION f_eqb(INOUT self: Executor)
    INC self.ip
    LET b: Boolean := self.pop()->b
    LET a: Boolean := self.pop()->b
    self.stack.append(NEW Value(b WITH a = b))
END FUNCTION

FUNCTION f_neb(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_eqn(INOUT self: Executor)
    INC self.ip
    LET b: Number := self.pop()->n
    LET a: Number := self.pop()->n
    self.stack.append(NEW Value(b WITH a = b))
END FUNCTION

FUNCTION f_nen(INOUT self: Executor)
    INC self.ip
    LET b: Number := self.pop()->n
    LET a: Number := self.pop()->n
    self.stack.append(NEW Value(b WITH a <> b))
END FUNCTION

FUNCTION f_ltn(INOUT self: Executor)
    INC self.ip
    LET b: Number := self.pop()->n
    LET a: Number := self.pop()->n
    self.stack.append(NEW Value(b WITH a < b))
END FUNCTION

FUNCTION f_gtn(INOUT self: Executor)
    INC self.ip
    LET b: Number := self.pop()->n
    LET a: Number := self.pop()->n
    self.stack.append(NEW Value(b WITH a > b))
END FUNCTION

FUNCTION f_len(INOUT self: Executor)
    INC self.ip
    LET b: Number := self.pop()->n
    LET a: Number := self.pop()->n
    self.stack.append(NEW Value(b WITH a <= b))
END FUNCTION

FUNCTION f_gen(INOUT self: Executor)
    INC self.ip
    LET b: Number := self.pop()->n
    LET a: Number := self.pop()->n
    self.stack.append(NEW Value(b WITH a >= b))
END FUNCTION

FUNCTION f_eqs(INOUT self: Executor)
    INC self.ip
    LET b: String := self.pop()->s
    LET a: String := self.pop()->s
    self.stack.append(NEW Value(b WITH a = b))
END FUNCTION

FUNCTION f_nes(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_lts(INOUT self: Executor)
    INC self.ip
    LET b: String := self.pop()->s
    LET a: String := self.pop()->s
    self.stack.append(NEW Value(b WITH a < b))
END FUNCTION

FUNCTION f_gts(INOUT self: Executor)
    INC self.ip
    LET b: String := self.pop()->s
    LET a: String := self.pop()->s
    self.stack.append(NEW Value(b WITH a > b))
END FUNCTION

FUNCTION f_les(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_ges(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_eqy(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_ney(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_lty(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_gty(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_ley(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_gey(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_eqa(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_nea(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_eqd(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_ned(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_eqp(INOUT self: Executor)
    INC self.ip
    LET b: POINTER TO Value := self.pop()->p
    LET a: POINTER TO Value := self.pop()->p
    self.stack.append(NEW Value(b WITH a = b))
END FUNCTION

FUNCTION f_nep(INOUT self: Executor)
    INC self.ip
    LET b: POINTER TO Value := self.pop()->p
    LET a: POINTER TO Value := self.pop()->p
    self.stack.append(NEW Value(b WITH a <> b))
END FUNCTION

FUNCTION f_eqv(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_nev(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_andb(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_orb(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_notb(INOUT self: Executor)
    INC self.ip
    LET x: Boolean := self.pop()->b
    self.stack.append(NEW Value(b WITH NOT x))
END FUNCTION

FUNCTION f_indexar(INOUT self: Executor)
    INC self.ip
    LET index: Number := self.pop()->n
    LET addr: POINTER TO Value := self.pop()->p
    CHECK VALID addr ELSE
        RAISE InternalException
    END CHECK
    CHECK index = math.trunc(index) AND 0 <= index < addr->a.size() ELSE
        self.raise_literal("ArrayIndexException", ExceptionInfo(info WITH str(index)))
        EXIT FUNCTION
    END CHECK
    self.stack.append(NEW Value(p WITH addr->a[index]))
END FUNCTION

FUNCTION f_indexaw(INOUT self: Executor)
    INC self.ip
    LET index: Number := self.pop()->n
    LET addr: POINTER TO Value := self.pop()->p
    CHECK VALID addr ELSE
        RAISE InternalException
    END CHECK
    CHECK index = math.trunc(index) AND 0 <= index ELSE
        self.raise_literal("ArrayIndexException", ExceptionInfo(info WITH str(index)))
        EXIT FUNCTION
    END CHECK
    WHILE index >= addr->a.size() DO
        addr->a.append(NEW Value())
    END WHILE
    self.stack.append(NEW Value(p WITH addr->a[index]))
END FUNCTION

FUNCTION f_indexav(INOUT self: Executor)
    INC self.ip
    LET index: Number := self.pop()->n
    LET array: Array<POINTER TO Value> := self.pop()->a
    CHECK index = math.trunc(index) AND 0 <= index < array.size() ELSE
        self.raise_literal("ArrayIndexException", ExceptionInfo(info WITH str(index)))
        EXIT FUNCTION
    END CHECK
    self.stack.append(array[index])
END FUNCTION

FUNCTION f_indexan(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_indexdr(INOUT self: Executor)
    INC self.ip
    LET key: String := self.pop()->s
    LET addr: POINTER TO Value := self.pop()->p
    CHECK VALID addr ELSE
        RAISE InternalException
    END CHECK
    CHECK key IN addr->d ELSE
        self.raise_literal("DictionaryIndexException", ExceptionInfo(info WITH key))
        EXIT FUNCTION
    END CHECK
    self.stack.append(NEW Value(p WITH addr->d[key]))
END FUNCTION

FUNCTION f_indexdw(INOUT self: Executor)
    INC self.ip
    LET key: String := self.pop()->s
    LET addr: POINTER TO Value := self.pop()->p
    CHECK VALID addr ELSE
        RAISE InternalException
    END CHECK
    IF key NOT IN addr->d THEN
        addr->d[key] := NEW Value()
    END IF
    self.stack.append(NEW Value(p WITH addr->d[key]))
END FUNCTION

FUNCTION f_indexdv(INOUT self: Executor)
    INC self.ip
    LET key: String := self.pop()->s
    LET dict: Dictionary<POINTER TO Value> := self.pop()->d
    CHECK key IN dict ELSE
        self.raise_literal("DictionaryIndexException", ExceptionInfo(info WITH key))
        EXIT FUNCTION
    END CHECK
    self.stack.append(dict[key])
END FUNCTION

FUNCTION f_ina(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_ind(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_callp(INOUT self: Executor)
    INC self.ip
    LET val: Number := getVint(self.bytecode.code, INOUT self.ip)
    LET f: String := self.bytecode.strtable[val]
    CASE f
        %WHEN "array__append" DO
        %    LET v: Value := self.pop()
        %    LET addr: POINTER TO Variable := self.pop().p
        %    IF VALID addr THEN
        %        addr->v.aa.append(NEW Variable(v WITH v))
        %    ELSE
        %        ASSERT FALSE
        %    END IF
        WHEN "array__size" DO
            LET a: VALID POINTER TO Value := self.pop()
            self.stack.append(NEW Value(n WITH a->a.size()))
        WHEN "boolean__toString" DO
            LET b: Boolean := self.pop()->b
            self.stack.append(NEW Value(s WITH b.toString()))
        WHEN "chr" DO
            LET n: Number := self.pop()->n
            self.stack.append(NEW Value(s WITH chr(n)))
        WHEN "concat" DO
            LET b: String := self.pop()->s
            LET a: String := self.pop()->s
            self.stack.append(NEW Value(s WITH a & b))
        WHEN "dictionary__keys" DO
            LET d: Dictionary<POINTER TO Value> := self.pop()->d
            LET a: Array<POINTER TO Value> := []
            FOREACH k IN d.keys() DO
                a.append(NEW Value(s WITH k))
            END FOREACH
            self.stack.append(NEW Value(a WITH a))
        WHEN "exceptiontype__toString" DO
            LET ei: Array<POINTER TO Value> := self.pop()->a
            VAR name: String := ""
            VAR info: String := ""
            VAR code: Number := 0
            VAR offset: Number := 0
            IF VALID ei[0] AS p THEN
                name := p->s
            END IF
            IF VALID ei[1] AS p THEN
                info := p->s
            END IF
            IF VALID ei[2] AS p THEN
                code := p->n
            END IF
            IF VALID ei[3] AS p THEN
                offset := p->n
            END IF
            self.stack.append(NEW Value(s WITH "<ExceptionType:\(name),\(info),\(code),\(offset)>"))
        WHEN "ord" DO
            LET s: String := self.pop()->s
            self.stack.append(NEW Value(n WITH ord(s)))
        WHEN "print" DO
            print(self.pop()->s)
        WHEN "runtime$assertionsEnabled" DO
            self.stack.append(NEW Value(b WITH TRUE))
        WHEN "str", "number__toString" DO
            LET n: Number := self.pop()->n
            self.stack.append(NEW Value(s WITH str(n)))
        WHEN "string__length" DO
            LET s: String := self.pop()->s
            self.stack.append(NEW Value(n WITH s.length()))
        WHEN "string__substring" DO
            LET last_from_end: Boolean := self.pop()->b
            ASSERT last_from_end = last_from_end
            LET last: Number := self.pop()->n
            LET first_from_end: Boolean := self.pop()->b
            ASSERT first_from_end = first_from_end
            LET first: Number := self.pop()->n
            LET s: String := self.pop()->s
            self.stack.append(NEW Value(s WITH s[first TO last]))
        WHEN OTHERS DO
            textio.writeLine(textio.stderr, "unexpected function: \(f)")
            sys.exit(1)
    END CASE
END FUNCTION

FUNCTION f_callf(INOUT self: Executor)
    INC self.ip
    LET val: Number := getVint(self.bytecode.code, INOUT self.ip)
    self.invoke(val)
END FUNCTION

FUNCTION f_callmf(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_calli(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_jump(INOUT self: Executor)
    INC self.ip
    LET target: Number := getVint(self.bytecode.code, INOUT self.ip)
    self.ip := target
END FUNCTION

FUNCTION f_jf(INOUT self: Executor)
    INC self.ip
    LET target: Number := getVint(self.bytecode.code, INOUT self.ip)
    LET b: Boolean := self.pop()->b
    IF NOT b THEN
        self.ip := target
    END IF
END FUNCTION

FUNCTION f_jt(INOUT self: Executor)
    INC self.ip
    LET target: Number := getVint(self.bytecode.code, INOUT self.ip)
    LET b: Boolean := self.pop()->b
    IF b THEN
        self.ip := target
    END IF
END FUNCTION

FUNCTION f_jfchain(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_dup(INOUT self: Executor)
    INC self.ip
    VAR x: VALID POINTER TO Value := self.pop()
    self.stack.append(x)
    self.stack.append(x)
END FUNCTION

FUNCTION f_dupx1(INOUT self: Executor)
    INC self.ip
    LET a: POINTER TO Value := self.pop()
    LET b: POINTER TO Value := self.pop()
    self.stack.append(a)
    self.stack.append(b)
    self.stack.append(a)
END FUNCTION

FUNCTION f_drop(INOUT self: Executor)
    INC self.ip
    _ := self.pop()
END FUNCTION

FUNCTION f_ret(INOUT self: Executor)
    self.frames[LAST TO LAST] := []
    self.ip := self.callstack[LAST]
    self.callstack[LAST TO LAST] := []
END FUNCTION

FUNCTION f_consa(INOUT self: Executor)
    INC self.ip
    LET val: Number := getVint(self.bytecode.code, INOUT self.ip)
    VAR a: Array<POINTER TO Value> := []
    FOR i := 1 TO val DO
        a.append(self.pop())
    END FOR
    self.stack.append(NEW Value(a WITH a))
END FUNCTION

FUNCTION f_consd(INOUT self: Executor)
    INC self.ip
    LET val: Number := getVint(self.bytecode.code, INOUT self.ip)
    VAR d: Dictionary<POINTER TO Value> := {}
    FOR i := 1 TO val DO
        LET v: POINTER TO Value := self.pop()
        LET k: String := self.pop()->s
        d[k] := v
    END FOR
    self.stack.append(NEW Value(d WITH d))
END FUNCTION

FUNCTION f_except(INOUT self: Executor)
    LET start_ip: Number := self.ip
    INC self.ip
    LET val: Number := getVint(self.bytecode.code, INOUT self.ip)
    self.ip := start_ip
    VAR info: Array<POINTER TO Value> := self.pop()->a
    VAR ei: ExceptionInfo := ExceptionInfo()
    LET size: Number := info.size()
    IF size >= 1 THEN
        IF VALID info[0] AS p THEN
            ei.info := p->s
        END IF
    END IF
    IF size >= 2 THEN
        IF VALID info[1] AS p THEN
            ei.code := p->n
        END IF
    END IF
    self.raise_literal(self.bytecode.strtable[val], ei)
END FUNCTION

FUNCTION f_alloc(INOUT self: Executor)
    INC self.ip
    LET val: Number := getVint(self.bytecode.code, INOUT self.ip)
    VAR a: Array<POINTER TO Value> := []
    FOR i := 1 TO val DO
        a.append(NEW Value())
    END FOR
    self.stack.append(NEW Value(p WITH NEW Value(a WITH a)))
END FUNCTION

FUNCTION f_pushnil(INOUT self: Executor)
    INC self.ip
    self.stack.append(NEW Value(p WITH NIL))
END FUNCTION

FUNCTION f_resetc(INOUT self: Executor)
    INC self.ip
    LET addr: POINTER TO Value := self.pop()->p
    IF VALID addr THEN
        addr->p := NIL
        addr->b := FALSE
        addr->n := 0
        addr->s := ""
        addr->a := []
        addr->d := {}
        addr->ci := ClassInfo()
    ELSE
        ASSERT FALSE
    END IF
END FUNCTION

FUNCTION f_pushpeg(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_jumptbl(INOUT self: Executor)
    INC self.ip
    LET val: Number := getVint(self.bytecode.code, INOUT self.ip)
    LET n: Number := math.trunc(self.pop()->n)
    IF 0 <= n < val THEN
        self.ip := self.ip + (6 * n)
    ELSE
        self.ip := self.ip + (6 * val)
    END IF
END FUNCTION

FUNCTION f_callx(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_swap(INOUT self: Executor)
    INC self.ip
    LET a: VALID POINTER TO Value := self.pop()
    LET b: VALID POINTER TO Value := self.pop()
    self.stack.append(a)
    self.stack.append(b)
END FUNCTION

FUNCTION f_dropn(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_pushfp(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_callv(INOUT self: Executor)
    ASSERT FALSE
END FUNCTION

FUNCTION f_pushci(INOUT self: Executor)
    INC self.ip
    LET val: Number := getVint(self.bytecode.code, INOUT self.ip)
    LET dot: Number := string.find(self.bytecode.strtable[val], ".")
    IF dot < 0 THEN
        FOREACH c IN self.bytecode.classes DO
            IF c.name = val THEN
                LET a: Array<POINTER TO Value> := [
                    NEW Value(ci WITH c)
                ]
                self.stack.append(NEW Value(a WITH a))
                EXIT FUNCTION
            END IF
        END FOREACH
    END IF
    textio.writeLine(textio.stderr, "neon: unknown class name \(self.bytecode.strtable[val])")
    sys.exit(1)
END FUNCTION

FUNCTION makeExecutor(bytes: Bytes): Executor
    VAR r: Executor := Executor()
    r.bytecode := decodeBytecode(bytes)
    r.ip := 0
    r.stack := []
    r.callstack := [r.bytecode.code.size()]
    r.globals := []
    FOR i := 0 TO r.bytecode.globalSize-1 DO
        r.globals[i] := NEW Value()
    END FOR
    RETURN r
END FUNCTION

BEGIN MAIN
    VAR e: Executor := makeExecutor(file.readBytes(sys.args[1]))
    e.run()
END MAIN
